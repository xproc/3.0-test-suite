<c:directory xmlns:c="http://www.w3.org/ns/xproc-step" name="specs" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/"><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/xproc.html"><head><title>XProc 3.0+: An XML Pipeline Language</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the syntax and semantics of&#xA;XProc 3.0: An XML Pipeline Language, a language for&#xA;describing operations to be performed on documents. An XML Pipeline specifies a sequence of operations to be&#xA;performed on documents. Pipelines generally accept&#xA;documents as input and produce documents as output.&#xA;Pipelines are made up of simple steps which&#xA;perform atomic operations on documents and constructs such as&#xA;conditionals, iterations, and exception handlers which control which&#xA;steps are executed."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0+: An XML Pipeline Language</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-09-25">25 September 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20220925T15:16:54Z">15:16 UTC</time> (<a href="https://github.com/xproc/3.0-specification/commit/3b261679de3e2d78e11779fd228309254e027ffe">build 5</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/xproc/">https://spec.xproc.org/master/head/xproc/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-specification">GitHub xproc/3.0-specification</a></dd><dd><a href="http://github.com/xproc/3.0-specification/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="lcdiff.html">Diff against the 3.0 specification</a></dd><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-specification/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020, 2021, 2022</span> the Contributors to the <cite>XProc 3.0+: An XML Pipeline Language</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the syntax and semantics of
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>, a language for
describing operations to be performed on documents.</p>

<p>An XML Pipeline specifies a sequence of operations to be
performed on documents. Pipelines generally accept
documents as input and produce documents as output.
Pipelines are made up of simple steps which
perform atomic operations on documents and constructs such as
conditionals, iterations, and exception handlers which control which
steps are executed.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>

<div class="note editorial admonition"><h3>Note</h3><div class="admonition-body">
<p>This draft is the “editor’s working draft” and includes changes made
after the XProc 3.0 specification was released.
</p>
</div></div>

<p>This document is derived from
<a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</a> published by the W3C.</p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#intro-examples"><bdi class="secno">1.1. </bdi>Pipeline examples</a></li></ul></li><li class="tocline"><a class="tocxref" href="#pipeline-concepts"><bdi class="secno">2. </bdi>Pipeline Concepts</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#step-concept"><bdi class="secno">2.1. </bdi>Steps</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#step-names"><bdi class="secno">2.1.1. </bdi>Step names</a></li><li class="tocline"><a class="tocxref" href="#step-types"><bdi class="secno">2.1.2. </bdi>Step types</a></li></ul></li></ul></li><li class="tocline"><a class="tocxref" href="#documents"><bdi class="secno">3. </bdi>Documents</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#document-properties"><bdi class="secno">3.1. </bdi>Document Properties</a></li><li class="tocline"><a class="tocxref" href="#document-types"><bdi class="secno">3.2. </bdi>Document Types</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#xml-documents"><bdi class="secno">3.2.1. </bdi>XML Documents</a></li><li class="tocline"><a class="tocxref" href="#html-documents"><bdi class="secno">3.2.2. </bdi>HTML Documents</a></li><li class="tocline"><a class="tocxref" href="#text-documents"><bdi class="secno">3.2.3. </bdi>Text Documents</a></li><li class="tocline"><a class="tocxref" href="#json-documents"><bdi class="secno">3.2.4. </bdi>JSON Documents</a></li><li class="tocline"><a class="tocxref" href="#other-documents"><bdi class="secno">3.2.5. </bdi>Other documents</a></li></ul></li><li class="tocline"><a class="tocxref" href="#creating-documents-from-xdm-step-results"><bdi class="secno">3.3. </bdi>Creating documents from XDM step results</a></li><li class="tocline"><a class="tocxref" href="#specified-content-types"><bdi class="secno">3.4. </bdi>Specifying content types</a></li></ul></li><li class="tocline"><a class="tocxref" href="#input-output"><bdi class="secno">4. </bdi>Inputs and Outputs</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#external-docs"><bdi class="secno">4.1. </bdi>External Documents</a></li></ul></li><li class="tocline"><a class="tocxref" href="#primary-input-output"><bdi class="secno">5. </bdi>Primary Inputs and Outputs</a></li><li class="tocline"><a class="tocxref" href="#connections"><bdi class="secno">6. </bdi>Connections</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#connecting-the-drp"><bdi class="secno">6.1. </bdi>Connections and the Default Readable Port</a></li><li class="tocline"><a class="tocxref" href="#namespace-fixup"><bdi class="secno">6.2. </bdi>Namespace Fixup on XML Outputs</a></li></ul></li><li class="tocline"><a class="tocxref" href="#initiating"><bdi class="secno">7. </bdi>Initiating a pipeline</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#static-expressions"><bdi class="secno">7.1. </bdi>Evaluating expressions during static analysis</a></li><li class="tocline"><a class="tocxref" href="#dynamic-evaluation"><bdi class="secno">7.2. </bdi>Dynamic evaluation of the pipeline</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#environment"><bdi class="secno">7.2.1. </bdi>Environment</a></li><li class="tocline"><a class="tocxref" href="#xpath-context"><bdi class="secno">7.2.2. </bdi>XPath in XProc</a></li></ul></li></ul></li><li class="tocline"><a class="tocxref" href="#xpath-extension-functions"><bdi class="secno">8. </bdi>XPath Extension Functions</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#f.system-property"><bdi class="secno">8.1. </bdi>System Properties</a></li><li class="tocline"><a class="tocxref" href="#f.step-available"><bdi class="secno">8.2. </bdi>Step Available</a></li><li class="tocline"><a class="tocxref" href="#f.iteration-position"><bdi class="secno">8.3. </bdi>Iteration Position</a></li><li class="tocline"><a class="tocxref" href="#f.iteration-size"><bdi class="secno">8.4. </bdi>Iteration Size</a></li><li class="tocline"><a class="tocxref" href="#f.version-available"><bdi class="secno">8.5. </bdi>Version Available</a></li><li class="tocline"><a class="tocxref" href="#f.xpath-version-available"><bdi class="secno">8.6. </bdi>XPath Version Available</a></li><li class="tocline"><a class="tocxref" href="#f.document-properties"><bdi class="secno">8.7. </bdi>Document properties</a></li><li class="tocline"><a class="tocxref" href="#f.document-property"><bdi class="secno">8.8. </bdi>Document property</a></li><li class="tocline"><a class="tocxref" href="#f.urify"><bdi class="secno">8.9. </bdi>Transform file system paths into URIs and normalize URIs</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#urify-normalize"><bdi class="secno">8.9.1. </bdi>Normalize file separators</a></li><li class="tocline"><a class="tocxref" href="#urify-analysis"><bdi class="secno">8.9.2. </bdi>Analysis</a></li><li class="tocline"><a class="tocxref" href="#urify-fixup"><bdi class="secno">8.9.3. </bdi>Path fixup</a></li><li class="tocline"><a class="tocxref" href="#urify-uri-construction"><bdi class="secno">8.9.4. </bdi>URI construction</a></li></ul></li><li class="tocline"><a class="tocxref" href="#f.function-library-importable"><bdi class="secno">8.10. </bdi>Function library importable</a></li><li class="tocline"><a class="tocxref" href="#other-xpath-extension-functions"><bdi class="secno">8.11. </bdi>Other XPath Extension Functions</a></li></ul></li><li class="tocline"><a class="tocxref" href="#psvi-support"><bdi class="secno">9. </bdi>PSVIs in XProc</a></li><li class="tocline"><a class="tocxref" href="#value-templates"><bdi class="secno">10. </bdi>Value Templates</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#attribute-value-templates"><bdi class="secno">10.1. </bdi>Attribute Value Templates</a></li><li class="tocline"><a class="tocxref" href="#text-value-templates"><bdi class="secno">10.2. </bdi>Text Value Templates</a></li></ul></li><li class="tocline"><a class="tocxref" href="#variables-options-background"><bdi class="secno">11. </bdi>Variables and Options</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#variables"><bdi class="secno">11.1. </bdi>Variables</a></li><li class="tocline"><a class="tocxref" href="#options"><bdi class="secno">11.2. </bdi>Options</a></li><li class="tocline"><a class="tocxref" href="#statics"><bdi class="secno">11.3. </bdi>Static Options</a></li><li class="tocline"><a class="tocxref" href="#varopt-types"><bdi class="secno">11.4. </bdi>Variable and option types</a></li><li class="tocline"><a class="tocxref" href="#implicit-casting"><bdi class="secno">11.5. </bdi>Implicit casting</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#qname-handling"><bdi class="secno">11.5.1. </bdi>Special rules for casting QNames</a></li><li class="tocline"><a class="tocxref" href="#handling-uris"><bdi class="secno">11.5.2. </bdi>Special rules for casting URIs</a></li></ul></li><li class="tocline"><a class="tocxref" href="#opt-bindings"><bdi class="secno">11.6. </bdi>Namespaces on variables and options</a></li></ul></li><li class="tocline"><a class="tocxref" href="#security-considerations"><bdi class="secno">12. </bdi>Security Considerations</a></li><li class="tocline"><a class="tocxref" href="#versioning-considerations"><bdi class="secno">13. </bdi>Versioning Considerations</a></li><li class="tocline"><a class="tocxref" href="#syntax"><bdi class="secno">14. </bdi>Syntax Overview</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#namespaces"><bdi class="secno">14.1. </bdi>XProc Namespaces</a></li><li class="tocline"><a class="tocxref" href="#scoping"><bdi class="secno">14.2. </bdi>Scoping of Names</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#scoping.4"><bdi class="secno">14.2.1. </bdi>Scoping of step type names</a></li><li class="tocline"><a class="tocxref" href="#scoping.5"><bdi class="secno">14.2.2. </bdi>Scoping of step names</a></li><li class="tocline"><a class="tocxref" href="#scoping.6"><bdi class="secno">14.2.3. </bdi>Scoping of port names</a></li><li class="tocline"><a class="tocxref" href="#scoping.7"><bdi class="secno">14.2.4. </bdi>Scoping of non-static options and variables</a></li><li class="tocline"><a class="tocxref" href="#scoping.8"><bdi class="secno">14.2.5. </bdi>Scoping of static option names</a></li></ul></li><li class="tocline"><a class="tocxref" href="#xml-base-attribute"><bdi class="secno">14.3. </bdi>Base URIs and xml:base</a></li><li class="tocline"><a class="tocxref" href="#xml-id-attribute"><bdi class="secno">14.4. </bdi>Unique identifiers</a></li><li class="tocline"><a class="tocxref" href="#syntax-docs-ports"><bdi class="secno">14.5. </bdi>Associating Documents with Ports</a></li><li class="tocline"><a class="tocxref" href="#documentation"><bdi class="secno">14.6. </bdi>Documentation</a></li><li class="tocline"><a class="tocxref" href="#annotations"><bdi class="secno">14.7. </bdi>Processor annotations</a></li><li class="tocline"><a class="tocxref" href="#extension-attributes"><bdi class="secno">14.8. </bdi>Extension attributes</a></li><li class="tocline"><a class="tocxref" href="#common-attr"><bdi class="secno">14.9. </bdi>Common Attributes</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#expand-text-attribute"><bdi class="secno">14.9.1. </bdi>Expand text attributes</a></li><li class="tocline"><a class="tocxref" href="#use-when"><bdi class="secno">14.9.2. </bdi>Conditional Element Exclusion</a></li><li class="tocline"><a class="tocxref" href="#depends"><bdi class="secno">14.9.3. </bdi>Additional dependent connections</a></li><li class="tocline"><a class="tocxref" href="#timeout"><bdi class="secno">14.9.4. </bdi>Controlling long running steps</a></li><li class="tocline"><a class="tocxref" href="#messages"><bdi class="secno">14.9.5. </bdi>Status and debugging output</a></li></ul></li><li class="tocline"><a class="tocxref" href="#syntax-summaries"><bdi class="secno">14.10. </bdi>Syntax Summaries</a></li><li class="tocline"><a class="tocxref" href="#common-errors"><bdi class="secno">14.11. </bdi>Common errors</a></li></ul></li><li class="tocline"><a class="tocxref" href="#steps"><bdi class="secno">15. </bdi>Steps</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#pipelines"><bdi class="secno">15.1. </bdi>Pipelines</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#example-pipeline"><bdi class="secno">15.1.1. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.for-each"><bdi class="secno">15.2. </bdi>p:for-each</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#for-each-xpath-context"><bdi class="secno">15.2.1. </bdi>XPath Context</a></li><li class="tocline"><a class="tocxref" href="#example-for-each"><bdi class="secno">15.2.2. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.viewport"><bdi class="secno">15.3. </bdi>p:viewport</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#viewport-xpath-context"><bdi class="secno">15.3.1. </bdi>XPath Context</a></li><li class="tocline"><a class="tocxref" href="#example-viewport"><bdi class="secno">15.3.2. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.choose"><bdi class="secno">15.4. </bdi>p:choose</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#p.when"><bdi class="secno">15.4.1. </bdi>p:when</a></li><li class="tocline"><a class="tocxref" href="#p.otherwise"><bdi class="secno">15.4.2. </bdi>p:otherwise</a></li><li class="tocline"><a class="tocxref" href="#example-choose"><bdi class="secno">15.4.3. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.if"><bdi class="secno">15.5. </bdi>p:if</a></li><li class="tocline"><a class="tocxref" href="#p.group"><bdi class="secno">15.6. </bdi>p:group</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#example-group"><bdi class="secno">15.6.1. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.try"><bdi class="secno">15.7. </bdi>p:try</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#p.catch"><bdi class="secno">15.7.1. </bdi>p:catch</a></li><li class="tocline"><a class="tocxref" href="#p.finally"><bdi class="secno">15.7.2. </bdi>p:finally</a></li><li class="tocline"><a class="tocxref" href="#err-vocab"><bdi class="secno">15.7.3. </bdi>The Error Vocabulary</a></li><li class="tocline"><a class="tocxref" href="#example-try"><bdi class="secno">15.7.4. </bdi>Example</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.atomic"><bdi class="secno">15.8. </bdi>Atomic Steps</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#p.standard"><bdi class="secno">15.8.1. </bdi>Processor-provided standard atomic steps</a></li><li class="tocline"><a class="tocxref" href="#p.extension"><bdi class="secno">15.8.2. </bdi>Extension Steps</a></li></ul></li></ul></li><li class="tocline"><a class="tocxref" href="#other-elements"><bdi class="secno">16. </bdi>Other pipeline elements</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#p.input"><bdi class="secno">16.1. </bdi>p:input</a></li><li class="tocline"><a class="tocxref" href="#p.with-input"><bdi class="secno">16.2. </bdi>p:with-input</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#conn-prec"><bdi class="secno">16.2.1. </bdi>Connection precedence</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.output"><bdi class="secno">16.3. </bdi>p:output</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#serialization"><bdi class="secno">16.3.1. </bdi>Serialization parameters</a></li></ul></li><li class="tocline"><a class="tocxref" href="#variables-options"><bdi class="secno">16.4. </bdi>Variables and Options</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#p.variable"><bdi class="secno">16.4.1. </bdi>p:variable</a></li><li class="tocline"><a class="tocxref" href="#p.option"><bdi class="secno">16.4.2. </bdi>p:option</a></li><li class="tocline"><a class="tocxref" href="#p.with-option"><bdi class="secno">16.4.3. </bdi>p:with-option</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.declare-step"><bdi class="secno">16.5. </bdi>p:declare-step</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#declare-pipelines"><bdi class="secno">16.5.1. </bdi>Declaring pipelines</a></li><li class="tocline"><a class="tocxref" href="#declare-atomic-steps"><bdi class="secno">16.5.2. </bdi>Declaring external steps</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.library"><bdi class="secno">16.6. </bdi>p:library</a></li><li class="tocline"><a class="tocxref" href="#p.import"><bdi class="secno">16.7. </bdi>p:import</a></li><li class="tocline"><a class="tocxref" href="#p.import-functions"><bdi class="secno">16.8. </bdi>p:import-functions</a></li><li class="tocline"><a class="tocxref" href="#p.pipe"><bdi class="secno">16.9. </bdi>p:pipe</a></li><li class="tocline"><a class="tocxref" href="#p.inline"><bdi class="secno">16.10. </bdi>p:inline</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#inline-xml-content"><bdi class="secno">16.10.1. </bdi>Inline XML and HTML content</a></li><li class="tocline"><a class="tocxref" href="#inline-text"><bdi class="secno">16.10.2. </bdi>Inline text content</a></li><li class="tocline"><a class="tocxref" href="#inline-json"><bdi class="secno">16.10.3. </bdi>Inline JSON content</a></li><li class="tocline"><a class="tocxref" href="#inline-others"><bdi class="secno">16.10.4. </bdi>Other inline content</a></li><li class="tocline"><a class="tocxref" href="#implicit-inlines"><bdi class="secno">16.10.5. </bdi>Implicit inlines</a></li></ul></li><li class="tocline"><a class="tocxref" href="#p.document"><bdi class="secno">16.11. </bdi>p:document</a></li><li class="tocline"><a class="tocxref" href="#p.empty"><bdi class="secno">16.12. </bdi>p:empty</a></li><li class="tocline"><a class="tocxref" href="#p.documentation"><bdi class="secno">16.13. </bdi>p:documentation</a></li><li class="tocline"><a class="tocxref" href="#p.pipeinfo"><bdi class="secno">16.14. </bdi>p:pipeinfo</a></li></ul></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">17. </bdi>Errors</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#static-errors"><bdi class="secno">17.1. </bdi>Static Errors</a></li><li class="tocline"><a class="tocxref" href="#dynamic-errors"><bdi class="secno">17.2. </bdi>Dynamic Errors</a></li><li class="tocline"><a class="tocxref" href="#step-errors"><bdi class="secno">17.3. </bdi>Step Errors</a></li></ul></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li><li class="tocline"><a class="tocxref" href="#infoset-conformance"><bdi class="secno">A.3. </bdi>Infoset Conformance</a></li></ul></li><li class="tocline"><a class="tocxref" href="#xproc-and-step-xpath-context"><bdi class="secno">B. </bdi>XPath contexts in XProc</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#xproc-xpath-context-31"><bdi class="secno">B.1. </bdi>Processor XPath Context</a></li><li class="tocline"><a class="tocxref" href="#step-xpath-context-31"><bdi class="secno">B.2. </bdi>Step XPath Context</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">C. </bdi>References</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#normative-references"><bdi class="secno">C.1. </bdi>Normative References</a></li></ul></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">D. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#language-summary"><bdi class="secno">E. </bdi>Pipeline Language Summary</a></li><li class="tocline"><a class="tocxref" href="#errors-list"><bdi class="secno">F. </bdi>List of Error Codes</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#app.static-errors"><bdi class="secno">F.1. </bdi>Static Errors</a></li><li class="tocline"><a class="tocxref" href="#app.dynamic-errors"><bdi class="secno">F.2. </bdi>Dynamic Errors</a></li><li class="tocline"><a class="tocxref" href="#app.step-errors"><bdi class="secno">F.3. </bdi>Step Errors</a></li></ul></li><li class="tocline"><a class="tocxref" href="#namespace-fixup-guidance"><bdi class="secno">G. </bdi>Guidance on Namespace Fixup (Non-Normative)</a></li><li class="tocline"><a class="tocxref" href="#handling-imports"><bdi class="secno">H. </bdi>Handling Circular and Re-entrant Library Imports (Non-Normative)</a></li><li class="tocline"><a class="tocxref" href="#parallelism"><bdi class="secno">I. </bdi>Sequential steps, parallelism, and side-effects</a></li><li class="tocline"><a class="tocxref" href="#xproc-media-type"><bdi class="secno">J. </bdi>The <code class="code">application/xproc+xml</code> media type</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#media-type-registration"><bdi class="secno">J.1. </bdi>Registration of MIME media type application/xproc+xml</a></li><li class="tocline"><a class="tocxref" href="#fragid"><bdi class="secno">J.2. </bdi>Fragment Identifiers</a></li></ul></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">K. </bdi>Ancillary files</a></li><li class="tocline"><a class="tocxref" href="#credits"><bdi class="secno">L. </bdi>Credits</a></li><li class="tocline"><a class="tocxref" href="#changelog"><bdi class="secno">M. </bdi>Change Log</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>An XML Pipeline specifies a sequence of operations to be
performed on a collection of input documents. Pipelines take documents
(XML, JSON, text, images, etc.)
as their input and produce documents as their output.</p>

<p>A <em class="glossterm"><a href="#dt-pipeline">pipeline</a></em> consists of steps. Like
pipelines, steps take documents as their inputs and
produce documents as their outputs. The inputs of a step
come from the web, from the pipeline document, from the inputs to the
pipeline itself, or from the outputs of other steps in the pipeline.
The outputs from a step are consumed by other steps, are outputs of
the pipeline as a whole, or are discarded.</p>

<p>There are two kinds of steps:
<em class="glossterm"><a href="#dt-atomic-step">atomic steps</a></em> and
<em class="glossterm"><a href="#dt-compound-step">compound steps</a></em>.
Atomic steps carry out a single operation and have no substructure as
far as the pipeline is concerned. Compound steps control the execution
of other steps, which they include in the form of one or more
subpipelines.</p>

<p>[<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>]
defines a standard library of steps. Pipeline implementations
<span class="rfc2119" id="introduction.5.2">may</span> support additional types of steps as well.
</p>

    <p>The media type for pipeline documents is <code class="literal">application/xml</code>. Often,
      pipeline documents are identified by the extension <code class="filename">.xpl</code>.</p>
    <p>In this specification the words <span class="rfc2119" id="introduction.7.1">must</span>, <span class="rfc2119" id="introduction.7.2">must not</span>,
        <span class="rfc2119" id="introduction.7.3">should</span>, <span class="rfc2119" id="introduction.7.4">should not</span>, <span class="rfc2119" id="introduction.7.5">may</span> and
        <span class="rfc2119" id="introduction.7.6">recommended</span> are to be interpreted as described in [<a href="#rfc2119"><span class="abbrev">RFC 2119</span></a>].</p>

<section id="intro-examples" class="section"><div class="section-titlepage"><h3><bdi class="secno">1.1. </bdi>Pipeline examples<a aria-label="§" class="self-link" href="#intro-examples"/></h3></div><div class="content">


<p><a href="#fig-xival" title="A simple, linear XInclude/Validate pipeline">Figure 1, “A simple, linear XInclude/Validate pipeline”</a> is a graphical representation of a
simple pipeline that performs XInclude processing and validation on a
document.</p>

<figure id="fig-xival" class="figure-wrapper"><div class="figure"><div id="fig-xival.2" title="A simple, linear XInclude/Validate pipeline" class="mediaobject"><img src="graphics/sch-xinclude-validate-pipeline.png" alt="A simple, linear XInclude/Validate pipeline"/></div></div><div class="title">Figure 1. A simple, linear XInclude/Validate pipeline</div></figure>
<p>This is a pipeline that consists of two atomic steps, XInclude and Validate with XML
  Schema. The pipeline itself has two inputs, “source” (a source document) and “schemas” (a
  sequence of W3C XML Schemas). The XInclude step reads the pipeline input “source” and produces
  a result document. The Validate with XML Schema step reads the pipeline input “schemas” and
  the result of the XInclude step and produces its own result document. The result of the
  validation, “result”, is the result of the pipeline. (For consistency across the step
  vocabulary, the standard input is usually named “source” and the standard output is
  usually named “result”.) </p>
<p>The pipeline document determines how the steps are connected together inside the pipeline,
  that is, how the output of one step becomes the input of another.</p>
<p>The pipeline document for this pipeline is shown in <a href="#ex1" title="A simple, linear XInclude/Validate pipeline">Example 1, “A simple, linear XInclude/Validate pipeline”</a>.</p>

<figure id="ex1" class="example-wrapper"><div class="title">Example 1. A simple, linear XInclude/Validate pipeline</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                name="xinclude-and-validate"
                version="3.0"&gt;
  &lt;p:input port="source" primary="true"/&gt;
  &lt;p:input port="schemas" sequence="true"/&gt;
  &lt;p:output port="result"&gt;
    &lt;p:pipe step="validated" port="result"/&gt;
  &lt;/p:output&gt;

  &lt;p:xinclude name="included"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="xinclude-and-validate" port="source"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:xinclude&gt;

  &lt;p:validate-with-xml-schema name="validated"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="included" port="result"/&gt;
    &lt;/p:with-input&gt;
    &lt;p:with-input port="schema"&gt;
      &lt;p:pipe step="xinclude-and-validate" port="schemas"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:validate-with-xml-schema&gt;
&lt;/p:declare-step&gt;</code></pre></div></figure>

<p><a href="#ex1" title="A simple, linear XInclude/Validate pipeline">Example 1, “A simple, linear XInclude/Validate pipeline”</a> is very verbose. It makes
all of the connections seen in the figure explicit. In practice,
pipelines do not have to be this verbose. By default, where inputs and
outputs are connected between sequential sibling steps, they do not
have to be made explicit.</p>

<p>The same pipeline, using XProc defaults, is shown in <a href="#ex1-abbr" title="A simple, linear XInclude/Validate pipeline (simplified)">Example 2, “A simple, linear XInclude/Validate pipeline (simplified)”</a>.</p>

<figure id="ex1-abbr" class="example-wrapper"><div class="title">Example 2. A simple, linear XInclude/Validate pipeline (simplified)</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                name="xinclude-and-validate"
                version="3.0"&gt;
  &lt;p:input port="source" primary="true"/&gt;
  &lt;p:input port="schemas" sequence="true"/&gt;
  &lt;p:output port="result"/&gt;

  &lt;p:xinclude/&gt;

  &lt;p:validate-with-xml-schema&gt;
    &lt;p:with-input port="schema"&gt;
      &lt;p:pipe step="xinclude-and-validate" port="schemas"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:validate-with-xml-schema&gt;
&lt;/p:declare-step&gt;</code></pre></div></figure>

<p><a href="#fig-style-proc" title="A validate and transform pipeline">Figure 2, “A validate and transform pipeline”</a> is a more complex example: it
performs schema validation with an appropriate schema and then styles
the validated document.</p>

<figure id="fig-style-proc" class="figure-wrapper"><div class="figure"><div id="fig-style-proc.2" title="A validate and transform pipeline" class="mediaobject"><img src="graphics/sch-transform.png" alt="A validate and transform pipeline"/></div></div><div class="title">Figure 2. A validate and transform pipeline</div></figure>

<p>The heart of this example is the conditional. The “choose” step
evaluates an XPath expression over a test document. Based on the
result of that expression, one or another branch is run. In this
example, each branch consists of a single validate step.</p>

<figure id="ex2" class="example-wrapper"><div class="title">Example 3. A validate and transform pipeline</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                name="xinclude-and-validate"
                version="3.0"&gt;
  &lt;p:input port="source"/&gt;
  &lt;p:input port="schemas" sequence="true"/&gt;
  &lt;p:output port="result"/&gt;

  &lt;p:choose&gt;
    &lt;p:when test="/*[@version &amp;lt; 2.0]"&gt;
      &lt;p:validate-with-xml-schema&gt;
        &lt;p:with-input port="schema" href="v1schema.xsd"/&gt;
      &lt;/p:validate-with-xml-schema&gt;
    &lt;/p:when&gt;

    &lt;p:otherwise&gt;
      &lt;p:validate-with-xml-schema&gt;
        &lt;p:with-input port="schema" href="v2schema.xsd"/&gt;
      &lt;/p:validate-with-xml-schema&gt;
    &lt;/p:otherwise&gt;
  &lt;/p:choose&gt;

  &lt;p:xslt&gt;
    &lt;p:with-input port="stylesheet" href="stylesheet.xsl"/&gt;
  &lt;/p:xslt&gt;
&lt;/p:declare-step&gt;</code></pre></div></figure>

<p>This example, like the preceding, relies on XProc defaults for
simplicity. It is always valid to write the fully explicit form if you
prefer. This example also takes advantage of using the <code class="tag-attribute">href</code>
attribute directly on <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> as a shortcut for the
<a href="#p.document"><code class="tag-element">p:document</code></a> connection.</p>

</div></section>


  </div></section>

  <section id="pipeline-concepts" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>Pipeline Concepts<a aria-label="§" class="self-link" href="#pipeline-concepts"/></h2></div><div class="content">
    
    <p><span id="dt-pipeline" class="termdef">[Definition: A <em class="glossterm">pipeline</em> is a set of connected
        steps, with outputs of one step flowing into inputs of another.]</span> A pipeline is
      itself a <em class="glossterm"><a href="#dt-step">step</a></em> and must satisfy the constraints on steps. Connections
      between steps occur where the input of one step is connected to the output of another. </p>
    <p>The result of evaluating a pipeline (or <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>) is the result
      of evaluating the steps that it contains, in an order consistent with the connections between
      them. A pipeline must behave as if it evaluated each step each time it is encountered. Unless
      otherwise indicated, implementations <span class="rfc2119" id="pipeline-concepts.3.2">must not</span> assume that steps are

functional (that is, that their outputs depend only on their
<a href="#input-output">inputs</a> and
<em class="glossterm"><a href="#dt-option">options</a></em>) or side-effect
free.</p>

<p>The pattern of connections between steps will not always
completely determine their order of evaluation. <span id="impl-1">The evaluation
order of steps not connected to one another is
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>

<section id="step-concept" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.1. </bdi>Steps<a aria-label="§" class="self-link" href="#step-concept"/></h3></div><div class="content">


<p><span id="dt-step" class="termdef">[Definition: A <em class="glossterm">step</em> is the
basic computational unit of a pipeline.]</span> A typical step has
inputs, from which it receives documents to process, outputs, to which
it sends result documents, and options which influence its behavior.</p>

<p>There are two kinds of steps: atomic and compound:</p>
  
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>An atomic step is a step that performs a unit of processing on
        its input, such as validation or transformation, and has no internal
        subpipeline. Atomic steps carry out fundamental operations and can
        perform arbitrary amounts of computation, but they are
        indivisible.</p>
      <p>There are many <em>types</em> of atomic steps. The
        standard library of atomic steps is described in [<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>], but implementations <span class="rfc2119" id="step-concept.4.1.2.3">may</span>
        provide others as well. <span id="impl-2">It is
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what additional step
          types, if any, are provided. </span> Each use, or instance, of an
        atomic step invokes the processing defined by that type of step. A
        pipeline may contain instances of many types of steps and many
        instances of the same type of step.</p>
    </li><li>
      <p>Compound steps, on the other hand, control and organize the flow
        of documents through a pipeline, providing familiar programming
        language functionality such as conditionals, iterators and exception
        handling. They contain other steps, whose evaluation they
        control.</p>
    </li></ul></div>

<p><span id="dt-compound-step" class="termdef">[Definition: A <em class="glossterm">compound
step</em> is a step that contains one or more
<em class="glossterm"><a href="#dt-subpipeline">subpipelines</a></em>.]</span>
That is, a compound step differs from an atomic step in that its
semantics are at least partially determined by the steps that it
contains.</p>

<p>Compound steps either directly contain a single subpipeline or
contain several subpipelines and select one or more to evaluate
dynamically. In the latter case, alternate subpipelines are identified
by non-step wrapper elements that each contain a single subpipeline.
</p>

<p><span id="dt-container" class="termdef">[Definition: A <em class="glossterm">container</em>
is either a compound step or one
of the non-step wrapper elements in a compound step that contains
several subpipelines.]</span>
<span id="dt-contained-steps" class="termdef">[Definition: The steps that occur directly
within a container are called
that step’s <em class="glossterm">contained steps</em>. In other words,
“container” and “contained steps” are inverse relationships.]</span>
<span id="dt-ancestors" class="termdef">[Definition: The <em class="glossterm">ancestors</em> of
a step, if it has any, are its <em class="glossterm"><a href="#dt-container">container</a></em> and
the ancestors of its container.]</span>
</p>

<p><span id="dt-subpipeline" class="termdef">[Definition: Sibling steps and variables (and the
connections between them) form a
<em class="glossterm">subpipeline</em>.]</span> <span id="dt-last-step" class="termdef">[Definition: The <em class="glossterm">last step</em> in a
subpipeline is its last step in document order.]</span></p>

      <p id="p.subpipeline" class="element-syntax element-syntax-language-construct hanging-indent">
        <code class="code">subpipeline</code> = (<a href="#p.variable"><code class="tag-element">p:variable</code></a>|<a href="#p.for-each"><code class="tag-element">p:for-each</code></a>|<a href="#p.viewport"><code class="tag-element">p:viewport</code></a>|<a href="#p.choose"><code class="tag-element">p:choose</code></a>|<a href="#p.if"><code class="tag-element">p:if</code></a>|<a href="#p.group"><code class="tag-element">p:group</code></a>|<a href="#p.try"><code class="tag-element">p:try</code></a>|<code class="code"><a href="#p.atomic">p:<em class="replaceable"><code>standard-step</code></em></a></code>|<code class="code"><a href="#p.atomic"><em class="replaceable"><code>pfx:user-pipeline</code></em></a></code>)+ </p>

      <div id="note-udp" class="note admonition"><h3>Note</h3><div class="admonition-body">
        <p>When a user-defined pipeline is invoked, (identified with
              <code class="code"><em class="replaceable"><code>pfx:user-pipeline</code></em></code> in the preceding syntax
          summary) it appears as an atomic step. A pipeline <em>declaration</em> may
          contain a subpipeline, but the <em>invocation</em> of that pipeline is atomic
          and does not contain a subpipeline.</p>
      </div></div>
      <p>Steps have “ports” into which inputs and outputs are connected. Each step has a number
        of input ports and a number of output ports; a step can have zero input ports and/or zero
        output ports. The names of all ports on each step must be
        unique on that step (you can't have two input ports named “source”, nor can you have an
        input port named “schema” and an output port named “schema”). </p>
      <p>A step may have zero or more <a href="#options">options</a>, all with unique
        names.</p>
     
  
      <section id="step-names" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.1.1. </bdi>Step names<a aria-label="§" class="self-link" href="#step-names"/></h4></div><div class="content">
        
        <p>All of the different instances of steps (atomic or compound) in a pipeline can be
          distinguished from one another by <em>name</em>. Names can be specified using
          the (optional) <code class="tag-attribute">name</code> attribute. <span class="assert" id="unique-names">A specified step name <span class="rfc2119" id="unique-names.1">must</span> be unique within its scope, see <a href="#scoping" title="Scoping of Names">Section 14.2, “Scoping of Names”</a>.</span></p>

        <p>The main purpose of step names in a pipeline is to <em>explicitly</em>
          connect to port(s) of another step. This applies to <a href="#p.input"><code class="tag-element">p:input</code></a>,
            <a href="#p.output"><code class="tag-element">p:output</code></a>, <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>, <a href="#p.with-option"><code class="tag-element">p:with-option</code></a> and
            <a href="#p.variable"><code class="tag-element">p:variable</code></a>, using either a <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> child element or a <code class="tag-attribute">pipe</code> attribute.</p>
        
        <p>The following example uses the step names provided by the <code class="tag-attribute">name</code> attributes to explicitly connect ports, using <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> child elements. The
          document on the <code class="port">extra</code> port of the step gets an additional attribute and is
          subsequently inserted into the document on the <code class="port">source</code> port.</p>
        <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" version="3.0" 
    name="main-step"&gt;

  &lt;p:input port="source" primary="true"/&gt;
  &lt;p:input port="extra"/&gt;
  &lt;p:output port="result" primary="true"/&gt;

  &lt;p:add-attribute attribute-name="timestamp"
                   attribute-value="{current-dateTime()}" 
      name="add-timestamp"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="main-step" port="extra"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:add-attribute&gt;

  &lt;p:insert match="/*" position="first-child"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="main-step" port="source"/&gt;
    &lt;/p:with-input&gt;
    &lt;p:with-input port="insertion"&gt;
      &lt;p:pipe step="add-timestamp" port="result"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:insert&gt;

&lt;/p:declare-step&gt;</code></pre>
        
        <p>Alternatively, using <code class="tag-attribute">pipe</code> attributes to connect the
          ports, you could write this as:</p>
        <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" version="3.0" 
    name="main-step"&gt;

  &lt;p:input port="source" primary="true"/&gt;
  &lt;p:input port="extra"/&gt;
  &lt;p:output port="result" primary="true"/&gt;

  &lt;p:add-attribute attribute-name="timestamp"
                   attribute-value="{current-dateTime()}" 
      name="add-timestamp"&gt;
    &lt;p:with-input port="source" pipe="extra@main-step"/&gt;
  &lt;/p:add-attribute&gt;

  &lt;p:insert match="/*" position="first-child"&gt;
    &lt;p:with-input port="source" pipe="source@main-step"/&gt;
    &lt;p:with-input port="insertion" pipe="result@add-timestamp"/&gt;
  &lt;/p:insert&gt;

&lt;/p:declare-step&gt;</code></pre>
        
        <p>If the pipeline author does not provide an explicit name using the <code class="tag-attribute">name</code> attribute, the processor manufactures a default name. All
          default names are of the form
            “<code class="literal">!1</code><em class="replaceable"><code>.m</code></em><em class="replaceable"><code>.n</code></em>…” where
            “<em class="replaceable"><code>m</code></em>” is the position (in the sense of counting sibling
          elements) of the step’s highest ancestor element within the pipeline document or
          library which contains it, “<em class="replaceable"><code>n</code></em>” is the position of the
          next-highest ancestor, and so on, including all of the elements in the pipeline document
          (that were not <em class="glossterm"><a href="#dt-effectively-excluded">effectively excluded</a></em>). For example, consider the
          pipeline in <a href="#ex2" title="A validate and transform pipeline">Example 3, “A validate and transform pipeline”</a>. The <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> step has no name, so it
          gets the default name “<code class="literal">!1</code>”; the <a href="#p.choose"><code class="tag-element">p:choose</code></a> gets the name
            “<code class="literal">!1.1</code>”; the first <a href="#p.when"><code class="tag-element">p:when</code></a> gets the name
            “<code class="literal">!1.1.1</code>”; the <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> gets the name
            “<code class="literal">!1.1.2</code>”, etc. If the <a href="#p.choose"><code class="tag-element">p:choose</code></a> had a name, it would not
          have received a default name, but it would still have been counted and its first
            <a href="#p.when"><code class="tag-element">p:when</code></a> would still have been “<code class="literal">!1.1.1</code>”.</p>
        <p>Providing every step in the pipeline with an interoperable name has several
          benefits:</p>
        <div class="orderedlist">
          
          
        <ol style="list-style: decimal;"><li>
            <p>It allows implementers to refer to all steps in an interoperable fashion, for
              example, in error messages.</p>
          </li><li>
            <p>Pragmatically, we say that <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em> are identified by
              a step name/port name pair. By manufacturing names for otherwise anonymous steps, we
              include implicit connections without changing our model.</p>
          </li></ol></div>
        <p>In a valid pipeline that runs successfully to completion, the manufactured names
          aren't visible (except perhaps in debugging or logging output).</p>

        <div id="def-name-ncname" class="note admonition"><h3>Note</h3><div class="admonition-body">
          <p>The format for defaulted names does not conform to the requirements of an <a href="http://www.w3.org/TR/xml-names/#NT-NCName">NCName</a>. This is an
            explicit design decision; it prevents pipelines from using the defaulted names on
              <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> elements. If an explicit connection requires a step name, the
            pipeline author must name the step. </p>
        </div></div>

      </div></section>
  
      <section id="step-types" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.1.2. </bdi>Step types<a aria-label="§" class="self-link" href="#step-types"/></h4></div><div class="content">
        

        <p>A step can have a <em>type</em>. Step types are specified using the <code class="tag-attribute">type</code> attribute of the <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> element. Step
          types are used as the name of the element by which the step is invoked. <span class="assert" id="unique-types">A specified step type <span class="rfc2119" id="unique-types.1">must</span> be unique within its
            scope, see <a href="#scoping" title="Scoping of Names">Section 14.2, “Scoping of Names”</a>.</span></p>

        <p>Step types are QNames and <span class="rfc2119" id="step-types.3.1">must</span> be in namespace with a non-null
          namespace URI. Steps in the XProc standard and additional step libraries all have types in
          the XProc namespace: <code class="code">http://www.w3.org/ns/xproc</code>. When providing your own
          steps with a type, which is necessary to use/invoke them in another step, a different
          (non-null) namespace must be used.</p>

        <p>Step types play an important role in the modularization of pipelines. They allow steps
          to be re-used. The following example defines a local step with type
            <code class="code">mysteps:add-timestamp-attribute</code> and subsequently uses this twice somewhere inside
          its main step’s pipeline: </p>
        <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" version="3.0"
  xmlns:mysteps="http://.../ns/mysteps"&gt;

  &lt;p:input port="source"/&gt;
  &lt;p:output port="result"/&gt;

  &lt;p:declare-step type="mysteps:add-timestamp-attribute"&gt; 
    &lt;p:input port="source"/&gt;
    &lt;p:output port="result"/&gt;
    &lt;p:add-attribute attribute-name="timestamp"
                     attribute-value="{current-dateTime()}"/&gt;
  &lt;/p:declare-step&gt;
  
  ...
  &lt;mysteps:add-timestamp-attribute/&gt;
  ...
  &lt;mysteps:add-timestamp-attribute/&gt;
  ...

&lt;/p:declare-step&gt;</code></pre>

        <p>Another way of doing this would be to isolate the
            <code class="code">mysteps:add-timestamp-attribute</code> step as a separate, stand-alone,
          pipeline:</p>
        <pre class="programlisting language-markup xml"><code>&lt;p:declare-step type="mysteps:add-timestamp-attribute" version="3.0"
                xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:mysteps="http://.../ns/mysteps"&gt;
  &lt;p:input port="source"/&gt;
  &lt;p:output port="result"/&gt;
  &lt;p:add-attribute attribute-name="timestamp"
                   attribute-value="{current-dateTime()}"/&gt;
&lt;/p:declare-step&gt;</code></pre>

        <p>Assuming this is stored in a file called <code class="code">add-timestamp-attribute.xpl</code>, you
          can now use the <a href="#p.import"><code class="tag-element">p:import</code></a> element to get it on board:</p>
        <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" version="3.0"
  xmlns:mysteps="http://.../ns/mysteps"&gt;

  &lt;p:import href="add-timestamp-attribute.xpl"/&gt;

  &lt;p:input port="source"/&gt;
  &lt;p:output port="result"/&gt;

  ...
  &lt;mysteps:add-timestamp-attribute/&gt;
  ...

&lt;/p:declare-step&gt;</code></pre>

        <p>Yet another way of achieving the same result would be to add the
            <code class="code">mysteps:add-timestamp-attribute</code> step to an XProc
            <em>library</em>, using the <a href="#p.library"><code class="tag-element">p:library</code></a> root element:</p>
        <pre class="programlisting language-markup xml"><code>&lt;p:library version="3.0" xmlns:p="http://www.w3.org/ns/xproc" 
  xmlns:mysteps="http://.../ns/mysteps"&gt;

  &lt;p:declare-step type="mysteps:add-timestamp-attribute"&gt;
    &lt;p:input port="source"/&gt;
    &lt;p:output port="result"/&gt;
    &lt;p:add-attribute attribute-name="timestamp"
                     attribute-value="{current-dateTime()}"/&gt;
  &lt;/p:declare-step&gt;

  ... more library steps

&lt;/p:library&gt;</code></pre>

        <p>Importing a library is also done with the <a href="#p.import"><code class="tag-element">p:import</code></a> element. </p>

      </div></section>
    
    </div></section>
  </div></section>

<section id="documents" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>Documents<a aria-label="§" class="self-link" href="#documents"/></h2></div><div class="content">


    <p>An XProc pipeline processes documents. <span id="dt-document" class="termdef">[Definition: A
          <em class="glossterm">document</em> is a <em class="glossterm"><a href="#dt-representation">representation</a></em> and its
          <em class="glossterm"><a href="#dt-document-properties">document properties</a></em>.]</span>. <span id="dt-representation" class="termdef">[Definition: A <em class="glossterm">representation</em> is a data structure used by an XProc processor to
        refer to the actual document content.]</span></p>
  
  <p>An output port may have several connections. In this case the document(s) that
    appear on that port are sent to each of the connections. In principle, a distinct
    copy of each document is sent to each connection. Critically, any changes made to one
    copy <span class="rfc2119" id="documents.3.1">must not</span> be visible in any other copy. In the interest of efficiency,
    if an implementation can isolate such changes, it is not required to make actual copies.
  </p>

    <section id="document-properties" class="section"><div class="section-titlepage"><h3><bdi class="secno">3.1. </bdi>Document Properties<a aria-label="§" class="self-link" href="#document-properties"/></h3></div><div class="content">
      

<p>Documents have associated with them a set of properties.
<span id="dt-document-properties" class="termdef">[Definition: The <em class="glossterm">document
properties</em> are key/value pairs; they are exposed to the
XProc pipeline as a map (<code class="type">map(xs:QName, item()*)</code>).]</span></p>

      <p>Several properties are defined by this specification:</p>

      <div class="variablelist">
        
        
        
      <dl><dt><span class="term">
            <code class="code">content-type</code>
          </span></dt><dd>
            <p>The value of the “<code class="code">content-type</code>” property identifies the media type
                ([<a href="#rfc2046"><span class="abbrev">RFC 2046</span></a>]) of the representation. The
                “<code class="code">content-type</code>” <span class="rfc2119" id="document-properties.4.1.2.1.4">must</span> always be present. The processor
              is responsible for assuring that the <code class="code">content-type</code> property matches the
              content type of each document produced on every output port.</p>
          </dd><dt><span class="term">
            <code class="code">base-uri</code>
          </span></dt><dd>
<p>The value of the “<code class="code">base-uri</code>” property identifies the
base URI of the document; it will only be present if the document
has a base URI. For XML documents, HTML documents, and text
documents, the value of “<code class="code">base-uri</code>” is the base URI
property of the document node. For other document types it is a
property the processor keeps track of. If no such key is present, the
document has no base URI.</p>
          </dd><dt><span class="term">
            <code class="code">serialization</code>
          </span></dt><dd>
            <p>The value of the (optional) “<code class="code">serialization</code>” property holds serialization
              properties for the document. If present, it’s value <span class="rfc2119" id="document-properties.4.3.2.1.2">must</span> be of type
                <code class="type">map(xs:QName, item()*)</code>. <a id="err.inline.D0070"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
                  error</a></em> (<a href="#err.D0070"><code class="errqname">err:XD0070</code></a>) if a value is assigned to the <code class="code">serialization</code>
                document property that cannot be converted into <code class="type">map(xs:QName, item()*)</code> according
                  to the rules in <a href="#implicit-casting">Implicit Casting</a>.
              Serialization properties control XML serialization as defined by [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>]. See also <a href="#serialization" title="Serialization parameters">Section 16.3.1, “Serialization parameters”</a>. </p>
            <p>Some steps, like <code class="code">p:xslt</code> and <code class="code">p:xquery</code>, can specify
              serialization properties (for instance using an XSLT <code class="tag-element">xsl:output</code> element).
              If this is the case, the specified serialization properties <span class="rfc2119" id="document-properties.4.3.2.2.4">should</span>
              be returned in the result document(s) <code class="code">serialization</code> property, as an
              appropriate serialization properties map.</p>
            <p>If a step serializes a document whose document properties contain a
                <code class="code">serialization</code> property, it <span class="rfc2119" id="document-properties.4.3.2.3.2">must</span> use these
              serialization properties. If the step itself allows specification of serialization properties
              (usually by a <code class="option">serialization</code> option), both sets of serialization
              properties are merged. Serialization properties specified on the step itself have
              precedence over serialization properties specified with the <code class="code">serialization</code>
              document property.</p>
          </dd></dl></div>

      <p>Other property keys may also be present, including user defined properties.</p>

<p>Steps are responsible for describing how document properties are
transformed as documents flow through them. Many steps claim that the
specified properties are preserved. Generally, it is the
responsibility of the pipeline author to determine when this is
inappropriate and take corrective action. However, it is the
responsibility of the pipeline processor to assure that the
<code class="code">content-type</code> property is correct. If a step transforms a
document in a manner that is inconsistent with the
<code class="code">content-type</code> property (accepting an XML document on the
source port but producing a text document on the result, for example), the
processor must assure that the <code class="code">content-type</code> property is appropriate.
If a step changes the <code class="code">content-type</code> in this way, it <span class="rfc2119" id="document-properties.6.5">must</span> also
remove the <code class="code">serialization</code> property.</p>

    </div></section>

<section id="document-types" class="section"><div class="section-titlepage"><h3><bdi class="secno">3.2. </bdi>Document Types<a aria-label="§" class="self-link" href="#document-types"/></h3></div><div class="content">


<p>XProc 3.0 has been designed to make it possible to process any kind of
document. Each document has a representation in the [<a href="#xpath-datamodel"><span class="abbrev">XQuery and XPath Data Model 3.1</span></a>].
This is necessary so that any kind of document can be passed as an argument to XPath functions,
such as <a href="#f.document-properties"><code class="function">p:document-properties</code></a>.
Practically speaking, there are five kinds of documents:</p>

<div class="orderedlist">





<ol style="list-style: decimal;"><li>
<p><a href="#xml-documents">XML documents</a>
</p>
</li><li>
<p><a href="#html-documents">HTML documents</a>
</p>
</li><li>
<p><a href="#text-documents">Text documents</a>
</p>
</li><li>
<p><a href="#json-documents">JSON documents</a>
</p>
</li><li>
<p><a href="#other-documents">Other documents</a>
</p>
</li></ol></div>

<section id="xml-documents" class="section"><div class="section-titlepage"><h4><bdi class="secno">3.2.1. </bdi>XML Documents<a aria-label="§" class="self-link" href="#xml-documents"/></h4></div><div class="content">


<p>Representations of XML documents are general instances of the XDM.
They are documents that contain a mixture
of other node types (elements, text, comments, and processing
instructions). This definition is intentionally broader than the
definition of a well-formed XML document because it is often
convenient for intermediate stages in a pipeline to produce
more-or-less arbitrary fragments of XML that can be combined together
by later stages.
XML documents are identified by an XML media type.
<span id="dt-XML-media-type" class="termdef">[Definition: The
“<code class="literal">application/xml</code>” and “<code class="literal">text/xml</code>”
media types and all media types of the form
“<code class="literal"><em class="replaceable"><code>something</code></em>/<em class="replaceable"><code>something</code></em>+xml</code>”
(except for “<code class="literal">application/xhtml+xml</code>” which is explicitly
an <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>)
are <em class="glossterm">XML media types</em>.
]</span>
</p>

<p>In order to be consistent with the XPath data model, all general
and external parsed entities <span class="rfc2119" id="xml-documents.3.1">must</span> be fully expanded
in XML documents; they <span class="rfc2119" id="xml-documents.3.2">must not</span> contain any representation of
[<a href="#xml-infoset-rec"><span class="abbrev">Infoset</span></a>]
<code class="literal infoset-property">[unexpanded entity reference
information items]</code>.</p>

<p><span id="impl-3">The level of support for typed values in XDM instances
in an XProc pipeline is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>

<p>When an XML document is serialized, it <span class="rfc2119" id="xml-documents.5.1">should</span>
be serialized using the XML serializer (see [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>]) by default.
</p>
</div></section>

<section id="html-documents" class="section"><div class="section-titlepage"><h4><bdi class="secno">3.2.2. </bdi>HTML Documents<a aria-label="§" class="self-link" href="#html-documents"/></h4></div><div class="content">


<p>Representations of HTML documents are general instances of the XDM.
Within XProc, they are <a href="#xml-documents">XML documents</a>.
HTML documents are identified by an HTML media type.
<span id="dt-HTML-media-type" class="termdef">[Definition: The
  “<code class="literal">text/html</code>” and “<code class="literal">application/xhtml+xml</code>”
media types
are <em class="glossterm">HTML media types</em>.
]</span>
</p>

<p>The distinction between XML documents and HTML documents is apparent
in two places:</p>

<div class="orderedlist">


<ol style="list-style: decimal;"><li>
<p>When an HTML document is <em>parsed</em>, for example when it
is the result of querying a web service or is loaded from a file on disk, an
HTML parser <span class="rfc2119" id="html-documents.4.1.1.2">must</span> be used. An HTML parser will construct a
balanced tree even if the HTML document would not be seen as
well-formed XML if it was parsed by an XML parser.  An HTML parser may also
add elements not found in the original (for example table body elements inside tables).
</p>
<div id="inline-html" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>The HTML parsing rules only apply when the content is parsed. HTML content
in an unencoded <a href="#p.inline"><code class="tag-element">p:inline</code></a> must be well-formed XML (because it is literally
in the pipeline) and will not be transformed in any way.</p>
</div></div>
</li><li>
<p>When an HTML document is serialized, it <span class="rfc2119" id="html-documents.4.2.1.1">should</span> be serialized using the
  HTML serializer for documents with media type “<code class="literal">text/html</code>” and the
  XHTML serializer for those with media type “<code class="literal">application/xhtml+xml</code>” 
  (see [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>]) by default.
</p>
</li></ol></div>
</div></section>

<section id="text-documents" class="section"><div class="section-titlepage"><h4><bdi class="secno">3.2.3. </bdi>Text Documents<a aria-label="§" class="self-link" href="#text-documents"/></h4></div><div class="content">


<p>Text documents are identified by a
text media type.
<span id="dt-text-media-type" class="termdef">[Definition: Media types of the form
“<code class="literal">text/<em class="replaceable"><code>something</code></em></code>”
are <em class="glossterm">text media types</em> with the
exception of “<code class="literal">text/xml</code>” which is an XML media type,
and “<code class="literal">text/html</code>” which is an HTML media type. Additionally the
  media types “<code class="literal">application/javascript</code>”, 
“<code class="literal">application/relax-ng-compact-syntax</code>”, and
“<code class="literal">application/xquery</code>” are also text media types.
]</span> <span id="impl-4">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>
whether other media types not mentioned in this document are treated
as text media types as well.</span> A text document is represented by a document node containing 
a single text node or by an empty document node (for empty text documents).
  
</p>

<p>When a text document is serialized, it <span class="rfc2119" id="text-documents.3.1">should</span> be serialized using the
Text serializer (see [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>]) by default.</p>

</div></section>

<section id="json-documents" class="section"><div class="section-titlepage"><h4><bdi class="secno">3.2.4. </bdi>JSON Documents<a aria-label="§" class="self-link" href="#json-documents"/></h4></div><div class="content">


<p>Representations of JSON documents are instances of the XDM.
They are maps, arrays, or
atomic values.
JSON documents are identified by a
JSON media type.
<span id="dt-JSON-media-type" class="termdef">[Definition: The
“<code class="literal">application/json</code>”
media type and all media types of the form
“<code class="literal">application/<em class="replaceable"><code>something</code></em>+json</code>”
are <em class="glossterm">JSON media types</em>.
]</span>
</p>

<p>When a JSON document is serialized, it <span class="rfc2119" id="json-documents.3.1">should</span> be serialized using the
JSON serializer (see [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>]) by default.</p>
</div></section>

<section id="other-documents" class="section"><div class="section-titlepage"><h4><bdi class="secno">3.2.5. </bdi>Other documents<a aria-label="§" class="self-link" href="#other-documents"/></h4></div><div class="content">


<p>Representations of other kinds of documents are empty XDM documents.
<span id="impl-5">The <em>underlying</em> representations of other
kinds of documents are
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
Other kinds of documents are identified by media types that are not
<em class="glossterm"><a href="#dt-XML-media-type">XML media types</a></em>,
<em class="glossterm"><a href="#dt-HTML-media-type">HTML media types</a></em>,
<em class="glossterm"><a href="#dt-text-media-type">text media types</a></em>,
or
<em class="glossterm"><a href="#dt-JSON-media-type">JSON media types</a></em>.
</p>

<p><span id="impl-6">Serialization of other kinds of documents is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> The stored
sequence of octets <span class="rfc2119" id="other-documents.3.2">should</span> be consistent with the
media type: an <code class="code">image/png</code> image should be a PNG image,
etc.
</p>
</div></section>
</div></section>

    <section id="creating-documents-from-xdm-step-results" class="section"><div class="section-titlepage"><h3><bdi class="secno">3.3. </bdi>Creating documents from XDM step results<a aria-label="§" class="self-link" href="#creating-documents-from-xdm-step-results"/></h3></div><div class="content">
      
      <p>Some steps like <code class="tag-element">p:xslt</code>, <code class="tag-element">p:xquery</code> etc. create a sequence of new XDM
        instances. The same is true for the result of a <code class="code">select</code> expression on
          <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. Values in such a sequence can be of any XDM type (except
        attribute or function). Every item in such a sequence is converted into a <em>separate</em>
        document that will appear on the output port of that particular step or as the result of the 
        <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. The following rules
        apply to each of the items in the output sequence:</p>
      <div class="itemizedlist">
        
        
        
        
      <ul><li>
          <p>If the item is a text node, it is wrapped in a document node and the
            document’s content-type is <code class="literal">text/plain</code>.</p>
        </li><li>
          <p>If the item is an element, comment or processing-instruction node, a document node is
            wrapped around the node and the document’s content-type is set to
              <code class="literal">application/xml</code>.</p>
        </li><li>
          <p>If the item is a document node, content-type "application/xml" is used.</p>
        </li><li>
          <p>If the item is a <code class="code">map</code>, <code class="code">array</code> or any atomic value,
            content-type <code class="literal">application/json</code> is used.</p>
          <div class="note admonition"><h3>Note</h3><div class="admonition-body">
            <p>Setting the content-type to <code class="literal">application/json</code> for <em>any</em> map, array
              or atomic value means that a document with content-type
                <code class="literal">application/json</code> is <em>not</em> guaranteed
              serializable using the <code class="code">json</code> serialization method. For instance, a map
              with values that contain sequences cannot be serialized.</p>
          </div></div>
        </li></ul></div>
    </div></section>

<section id="specified-content-types" class="section"><div class="section-titlepage"><h3><bdi class="secno">3.4. </bdi>Specifying content types<a aria-label="§" class="self-link" href="#specified-content-types"/></h3></div><div class="content">


<p>In some contexts (step inputs, and step outputs, for example), 
XProc allows the pipeline author to specify a
list of content types to identify what kinds of documents are allowed.
Each content type in this list must have one of the following
forms:</p>

<div class="itemizedlist">



<ul><li>
<p>A fully qualified type of the form
“<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>”
where “<code class="literal">+<em class="replaceable"><code>ext</code></em></code>” is optional and any of <em class="replaceable"><code>type</code></em>,
<em class="replaceable"><code>subtype</code></em>, and <em class="replaceable"><code>ext</code></em>
can be specified as “<code class="literal">*</code>” meaning “any”.
For example:
<code class="literal">text/plain</code> (only plain text documents),
<code class="literal">text/*</code> (any “text” content type),
<code class="literal">*/*+xml</code> (any “+xml” content type),
and <code class="literal">*/*</code> (any content type).
</p>
</li><li>
<p>A fully qualified type preceded by a minus sign (“-”) indicates that the specified type is forbidden.
For example:
<code class="literal">-image/svg</code> forbids SVG images,
<code class="literal">-text/*</code> forbids “text” content types,
and <code class="literal">-text/html</code> forbids HTML documents.
</p>
</li><li>
<p>A single token (without a “/”), is considered a shortcut form.
The following shortcuts <span class="rfc2119" id="specified-content-types.3.3.1.1">must</span> be supported by the processor:</p>
<div class="variablelist">





<dl><dt><span class="term"><code class="literal">xml</code></span></dt><dd>
<p>Expands to “<code class="literal">application/xml text/xml */*+xml -application/xhtml+xml</code>”.
</p>
</dd><dt><span class="term"><code class="literal">html</code></span></dt><dd>
<p>Expands to “<code class="literal">text/html application/xhtml+xml</code>”.
</p>
</dd><dt><span class="term"><code class="literal">text</code></span></dt><dd>
<p>Expands to: “<code class="literal">text/* -text/html -text/xml</code>”.
</p>
</dd><dt><span class="term"><code class="literal">json</code></span></dt><dd>
<p>Expands to “<code class="literal">application/json</code>”.
</p>
</dd><dt><span class="term"><code class="literal">any</code></span></dt><dd>
<p>Expands to “<code class="literal">*/*</code>”.
</p>
</dd></dl></div>
</li></ul></div>

  <p><a id="err.inline.D0079"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
    a valid media type of the form 
    “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
    or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.
  <span id="impl-7">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> if a processor accepts any other content type shortcuts.</span>
<a id="err.inline.S0111"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0111"><code class="errqname">err:XS0111</code></a>) if an unrecognized content type shortcut is specified.
</p>

<p>To determine if a document is acceptable, the (expanded) list of
content types is considered from left to right. If the actual content
type matches an acceptable content type, the document is acceptable.
If it matches a forbidden content type, then it is not. A content type
that isn’t matched is ignored. The document is considered acceptable
if and only if it matches at least one acceptable content type
and the last content type that matched was not forbidden.</p>

<p>For example: a document with the content type “<code class="literal">image/svg</code>” is acceptable if the content type list expands
to “<code class="literal">image/* application/xml</code>” but it is not acceptable if the content type list expands
to “<code class="literal">image/* -image/svg</code>”. (Note that order matters; the document would be considered acceptable
if the content type list expands to “<code class="literal">-image/svg image/*</code>”.)
</p>

<p>In the particular case of shortcut values, note that “<code class="literal">application/xhtml+xml</code>” is acceptable if the
content type list is “<code class="literal">xml html</code>” but not if it is “<code class="literal">html xml</code>”.</p>
<p><a id="err.inline.D0038"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0038"><code class="errqname">err:XD0038</code></a>)
if an input document arrives on a port and it does not match the
allowed content types.</p>

</div></section>

</div></section>

<section id="input-output" class="section"><div class="section-titlepage"><h2><bdi class="secno">4. </bdi>Inputs and Outputs<a aria-label="§" class="self-link" href="#input-output"/></h2></div><div class="content">


<p>Most steps have one or more inputs and one
or more outputs. <a href="#fig-atomic-step" title="An atomic step">Figure 3, “An atomic step”</a> illustrates
symbolically an <em class="glossterm"><a href="#dt-atomic-step">atomic step</a></em> with two inputs and
one output.</p>

      <figure id="fig-atomic-step" class="figure-wrapper"><div class="figure"><div id="fig-atomic-step.2" title="An atomic step with two inputs and one output" class="mediaobject"><img src="graphics/atomic-step.png" alt="An atomic step with two inputs and one output"/></div></div><div class="title">Figure 3. An atomic step</div></figure>

<p>All atomic steps are defined by a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>. The
declaration of an atomic step type defines the input ports, output
ports, and options of all steps of that type. For example, every
<code class="tag-element">p:validate-with-xml-schema</code> step has two inputs, named
“<code class="literal">source</code>” and “<code class="literal">schema</code>”, one
output named “<code class="literal">result</code>”, and the same set of options.
</p>
      <p>Like atomic steps, top level, user-defined pipelines also have declarations.</p>

<p>The
        situation is slightly more complicated for the other compound steps because they don't have
        separate declarations; each instance of the compound step serves as its own declaration. On
        these compound steps, the number and names of the outputs can be different on each instance
        of the step.</p>
      <p><a href="#fig-compound-step" title="A compound step">Figure 4, “A compound step”</a> illustrates symbolically a compound step with a
        subpipeline with one output. As you can see from the diagram, the output from the compound
        step comes from one of the outputs of the subpipeline within the step.</p>
      <figure id="fig-compound-step" class="figure-wrapper"><div class="figure"><div id="fig-compound-step.2" title="A compound step with two inputs and one output" class="mediaobject"><img src="graphics/compound-step.png" alt="A compound step with two inputs and one output"/></div></div><div class="title">Figure 4. A compound step</div></figure>
      <p><span id="dt-declared-inputs" class="termdef">[Definition: The input ports declared on a step are its
            <em class="glossterm">declared inputs</em>.]</span>
        <span id="dt-declared-outputs" class="termdef">[Definition: The output ports declared on a step are its
            <em class="glossterm">declared outputs</em>.]</span> When a step is used in a pipeline, it
        is connected to other steps through its inputs and outputs. </p>
  
    <p><span id="dt-anonymous-input" class="termdef">[Definition: The <em class="glossterm"><a href="#dt-compound-step">compound steps</a></em> 
      <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> and <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> each declare
        a single primary input without a port name. Such an input is called an 
      <em class="glossterm">anonymous input</em>.]</span></p>

         <p>When a step is used, all of the <em class="glossterm"><a href="#dt-declared-inputs">declared inputs</a></em> of the step
               <span class="rfc2119" id="input-output.11.2">must</span> be connected. Each connection binds the input to a data
            source (see <a href="#connections" title="Connections">Section 6, “Connections”</a>). <a id="err.inline.S0003"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0003"><code class="errqname">err:XS0003</code></a>) if any declared input is not
               connected.</p>
         <p>The <em class="glossterm"><a href="#dt-declared-outputs">declared outputs</a></em> of a step are only connected when they
            are used by another step or expression. 
Any documents produced on an unconnected output port are discarded.</p>

<p>Primary input and primary output ports may be implicitly
connected if no explicit connection is given, see <a href="#primary-input-output" title="Primary Inputs and Outputs">Section 5, “Primary Inputs and Outputs”</a>.</p>

<p>Output ports on compound steps have a dual nature: from the
perspective of the compound step’s siblings, its outputs are just
ordinary outputs and can be connected the same as other
<em class="glossterm"><a href="#dt-declared-outputs">declared outputs</a></em>. From the perspective of the
subpipeline inside the compound step, they behave like inputs and can
be connected just like other inputs.</p>

<p>Within a compound step, the <em class="glossterm"><a href="#dt-declared-outputs">declared
outputs</a></em> of the step can be connected to any of the various
available outputs of <em class="glossterm"><a href="#dt-contained-steps">contained
steps</a></em> as well as other data sources
(see <a href="#connections" title="Connections">Section 6, “Connections”</a>). If a (non-primary)
output port of a compound step is left unconnected, it produces an
empty sequence of documents from the perspective of its
siblings.</p>

      <p>Each input and output on a step is declared to accept or produce either a single
        document or a sequence of documents. It <em>is not</em> an error to connect a
        port that is declared to produce a sequence of documents to a port that is declared to
        accept only a single document. It is, however, an error if the former step does not
        produce exactly one document at run time.</p>
      <p>It is also not an error to connect a port that is declared to produce a single document
        to a port that is declared to accept a sequence. A single document is the same as a sequence
        of one document.</p>
      <p>An output port may have more than one connection: it may be connected to more than one
        input port, more than one of its container’s output ports, or both. At runtime this will
        result in the outputs being sent to each of those places.</p>
      <p><span id="dt-signature" class="termdef">[Definition: The <em class="glossterm">signature</em> of a step is the set
          of inputs, outputs, and options that it is declared to accept.]</span> The declaration
        for a step provides a fixed signature which all its instances share.</p>

<div class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>Within the context of what can be defined by XProc pipelines,
step signatures are fixed and shared by all instances. There is no
mechanism for a pipeline author to declare that an atomic step has a
signature that varies. However, implementors may provide such
mechanisms and other specifications may depend upon them.
Such steps are “magic” and XProc 3.0 makes no effort to provide
a mechanism to define them.</p>
</div></div>

      <p><span id="dt-matches" class="termdef">[Definition: A step <em class="glossterm">matches</em> its signature if and
          only if it specifies an input for each declared input, it specifies no inputs that are not
          declared, it specifies an option for each option that is declared to be required, and it
          specifies no options that are not declared.]</span> In other words, every input and
        required option <span class="rfc2119" id="input-output.21.2">must</span> be specified and only inputs and options that are
        declared <span class="rfc2119" id="input-output.21.3">may</span> be specified. Options that aren't required do not have to be
        specified.</p>
      <p>Steps <span class="rfc2119" id="input-output.22.1">may</span> also produce error, warning, and informative messages.
        These messages are captured and provided on the <code class="port">error</code> port inside of a
          <a href="#p.catch"><code class="tag-element">p:catch</code></a>. <span id="impl-8">Outside of a <a href="#p.try">try/catch</a>, the
          disposition of error messages is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></span>. </p>

<p><span id="impl-9">How inputs are connected to documents outside the pipeline
is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p><span id="impl-10">How pipeline outputs are connected to documents outside
the pipeline is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>Input ports <span class="rfc2119" id="input-output.25.1">may</span> specify a content type, or list of
content types, that they accept, see <a href="#specified-content-types" title="Specifying content types">Section 3.4, “Specifying content types”</a>.</p>

<section id="external-docs" class="section"><div class="section-titlepage"><h3><bdi class="secno">4.1. </bdi>External Documents<a aria-label="§" class="self-link" href="#external-docs"/></h3></div><div class="content">
        
        <p>It’s common for some of the documents used in processing a pipeline to be read from
          URIs. Sometimes this occurs directly, for example with a <a href="#p.document"><code class="tag-element">p:document</code></a> element.
          Sometimes it occurs indirectly, for example if an implementation allows the URI of a
          pipeline input to be specified on the command line or if an <code class="tag-element">p:xslt</code> step
          encounters an <code class="tag-element">xsl:import</code> in the stylesheet that it is processing. It’s also
          common for some of the documents produced in processing a pipeline to be written to
          locations which have, or at least could have, a URI. </p>
        <p>The process of dereferencing a URI to retrieve a document is often more interesting
          than it seems at first. On the web, it may involve caches, proxies, and various forms of
          indirection. <span id="impl-11">Resolving a URI locally may involve resolvers of various sorts and
            possibly appeal to <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> mechanisms such as
            catalog files.</span></p>
        <p>In XProc, the situation is made even more interesting by the fact that many
          intermediate results produced by steps in the pipeline have base URIs. <span id="impl-12">Whether (and
            when and how) or not the intermediate results that pass between steps are ever written
            to a filesystem is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
        <p><span id="impl-13">In Version 3.0 of XProc, how (or if) implementers provide local resolution
            mechanisms and how (or if) they provide access to intermediate results by URI is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
        </p>
        <p>Version 3.0 of XProc does not require implementations to guarantee that multiple
          attempts to dereference the same URI always produce the same results.</p>
        <div id="note-unsatisfying" class="note admonition"><h3>Note</h3><div class="admonition-body">
          <p>On the one hand, this is a somewhat unsatisfying state of affairs because it leaves
            room for interoperability problems. On the other, it is not expected to cause such
            problems very often in practice. </p>
          <p>If these problems arise in practice, implementers are encouraged to use the existing
            extension mechanisms to give users the control needed to circumvent them. Should such
            mechanisms become widespread, a standard mechanism could be added in some future version
            of the language.</p>
        </div></div>
      </div></section>
    </div></section>
    <section id="primary-input-output" class="section"><div class="section-titlepage"><h2><bdi class="secno">5. </bdi>Primary Inputs and Outputs<a aria-label="§" class="self-link" href="#primary-input-output"/></h2></div><div class="content">
      
      <p>Each step may have one input port designated as
        the primary input port and one output port designated as the primary output port.</p>
      <p><span id="dt-primary-input-port" class="termdef">[Definition: If a step has an input port which is
          explicitly marked “<code class="code">primary='true'</code>”, or if it has exactly one document input
          port and that port is <em>not</em> explicitly marked
            “<code class="code">primary='false'</code>”, then that input port is the <em class="glossterm">primary input
            port</em> of the step.]</span> If a step has a single input port and that port
        is explicitly marked “<code class="code">primary='false'</code>”, or if a step has more than one input
        port and none is explicitly marked as the primary, then the primary input port of that step
        is undefined. A step can have at most one primary input port.</p>
      <p><span id="dt-primary-output-port" class="termdef">[Definition: If a step has an output port which is
          explicitly marked “<code class="code">primary='true'</code>”, or if it has exactly one document output
          port and that port is <em>not</em> explicitly marked
            “<code class="code">primary='false'</code>”, then that output port is the <em class="glossterm">primary output
            port</em> of the step.]</span> If a step has a single output port and that port
        is explicitly marked “<code class="code">primary='false'</code>”, or if a step has more than one output
        port and none is explicitly marked as the primary, then the primary output port of that step
        is undefined. A step can have at most one primary output port.</p>
      <p>The special significance of primary input and output ports is that they are connected
        automatically by the processor if no explicit connection is given. Generally speaking, if
        two steps appear sequentially in a subpipeline, then the primary output of the first step
        will automatically be connected to the primary input of the second.</p>

<p>Additionally, if a container, that can have
declared outputs, has no declared outputs and the
<em class="glossterm"><a href="#dt-last-step">last step</a></em> in its subpipeline has an unconnected
primary output, then an implicit primary output port will be added to
the compound step (and consequently the last step’s primary output
will be connected to it). This implicit output port has no name. It
inherits the <code class="tag-attribute">sequence</code> and the <code class="tag-attribute">content-types</code> properties of the port connected
to it. This rule does not apply to <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>; step
declarations must provide explicit names for all of their
outputs.</p>

</div></section>

<section id="connections" class="section"><div class="section-titlepage"><h2><bdi class="secno">6. </bdi>Connections<a aria-label="§" class="self-link" href="#connections"/></h2></div><div class="content">


<p>Steps are connected together by their input ports, output
ports, and bindings to variables and options. Variables and options
also behave something like steps, connected together by the
input on which they receive their context and by references to them
by name elsewhere.
<a id="err.inline.S0001"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0001"><code class="errqname">err:XS0001</code></a>)
if there are any loops in the connections between steps, variables,
and options: no step, variable, or option can be connected to itself
nor can there be any sequence of connections through other steps that
leads back to itself.</p>

<p>Consider <a href="#fig-depends" title="Dependencies between steps, variables, and options">Figure 5, “Dependencies between steps, variables, and options”</a>.</p>

<figure id="fig-depends" class="figure-wrapper"><div class="figure"><div id="fig-depends.2" title="Dependencies between steps, variables, and options" class="mediaobject"><img src="graphics/depends.png" alt="Dependencies between steps, variables, and options"/></div></div><div class="title">Figure 5. Dependencies between steps, variables, and options</div></figure>

<div class="itemizedlist">






<ul><li>
<p>Step1 has no connections.
</p>
</li><li>
<p>Step2 is connected to Step1 by an explicit dependency, see <a href="#depends" title="Additional dependent connections">Section 14.9.3, “Additional dependent connections”</a>.
</p>
</li><li>
<p>Step3 is connected to Step2 because it reads from the output of Step2. It is also
transitively connected to Step1 because Step2 is connected to it.
</p>
</li><li>
<p>Step4 has no connections. In principle, Step1 and Step4 can be evaluated in parallel
or in either order.
</p>
</li><li>
<p>Step5 is connected to Step3 because it reads from the output of Step3. It is also
transitively connected to Step2 and the connections that Step2 has. Step5 is also connected
to Step4 because it’s option “<code class="literal">option1</code>” is connected to “<code class="literal">someVar</code>”
which is connected to “<code class="literal">ecount</code>” which reads its context from Step4.
</p>
</li><li>
<p>Step6 is connected to Step5 because it reads from the output of Step5. It is also
transitively connected to all of the other steps.
</p>
</li></ul></div>

         <p><span id="dt-connection" class="termdef">[Definition: A <em class="glossterm">connection</em> associates an
               input or output port with some data source.]</span>  Such a connection represents a
            binding between the port’s name and the data source as described by various locations,
            inline expressions, or readable ports.</p>
         <p>An input port can be connected to:</p>
         <div class="itemizedlist">
            
            
            
            
         <ul><li>
               <p>The output port of some other step.</p>
            </li><li>
               <p>A fixed, inline document.</p>
            </li><li>
               <p>A document read from a URI.</p>
            </li><li>
               <p>One of the inputs declared on one of its
                  <em class="glossterm"><a href="#dt-ancestors">ancestors</a></em> or
               a special port provided by an ancestor compound step, for example,
                     “<code class="port">current</code>” in a <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> or <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>.
               </p>
            </li></ul></div>

<p>When an input accepts a sequence of documents, the documents can
come from any combination of these locations.</p>

<p>In contrast, output ports are connected when they are referenced
by another input port, <em class="glossterm"><a href="#dt-declared-outputs">declared
output</a></em> or other expression and may be connected to:</p>

<div class="itemizedlist">




<ul><li>
  <p>The input port or input context of some other step.</p>
</li><li>
  <p>An option assigned with <a href="#p.with-option"><code class="tag-element">p:with-option</code></a> or a
<a href="#p.variable"><code class="tag-element">p:variable</code></a> in a compound step.</p>
</li><li>
  <p>A <em class="glossterm"><a href="#dt-value-template">value template</a></em> in an immediately following step.
This can be an AVT in an
<a href="#option-shortcut">option shortcut</a>,
an AVT on a <a href="#p.document"><code class="tag-element">p:document</code></a> element, or a
value template in a <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
  </p>
</li><li>
  <p>One of the outputs declared on its container. </p>
</li></ul></div>

         <p>As with an input, the output can be a sequence of documents constructed from any
            combination of the above.</p>
         <p>Within the context of a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em>, the <em class="glossterm"><a href="#dt-declared-outputs">declared
               outputs</a></em> of the compound step must describe their connections.  The set of
            possibilities for this connection is exactly the same set as for any other input port
            within the current <em class="glossterm"><a href="#dt-environment">environment</a></em>.</p>

   <section id="connecting-the-drp" class="section"><div class="section-titlepage"><h3><bdi class="secno">6.1. </bdi>Connections and the Default Readable Port<a aria-label="§" class="self-link" href="#connecting-the-drp"/></h3></div><div class="content">


<p>The <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is a
convenience for pipeline authors. In the document which
describes a pipeline, steps are sequential
elements and it is very common for the output of one step to form the
natural input to the step described by its immediately following
sibling. Consider the following fragment:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:add-xml-base/&gt;

&lt;p:add-attribute attribute-name="element-count"
                 attribute-value="{count(/*/*)}"/&gt;</code></pre>

<p>The output from the add XML base step is the natural input to the
add-attribute step. The add XML base step is the source for both the document that will
be processed by the add-attribute step and the document that will be used as the
context item for the expression in the
<code class="tag-attribute">attribute-value</code> attribute.</p>

<p>The fact that the output of the default readable port is used by the following
step establishes a connection between the add XML base step and the
add-attribute step.</p>

<p>However, unlike an explicit binding which
<em>always</em> forms a connection, the default readable port
<em>only</em> forms a connection if it is used.
If the
processor determines that the default readable port is not used,
then it must forgo the connection and the steps can run in parallel.</p>

<p>Consider the following fragment:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:add-xml-base/&gt;

&lt;p:add-attribute attribute-name="class"
                 attribute-value="homepage"&gt;
  &lt;p:with-input port="source"&gt;
    &lt;p:document href="http://example.com/"/&gt;
  &lt;/p:with-input&gt;</code></pre>

<p>The output of the add XML base step is still the default
readable port, but it isn’t the source for the add-attribute step nor
is the context item used in evaluating the
<code class="tag-attribute">attribute-value</code> option (or any other option,
including the default values of unspecified options), so the processor must
omit the connection. This leads to increased parallelism and possibly
improved performance.</p>

<p>However, it can cause unexpected results when steps have
side-effects. Consider this slightly contrived pipeline
fragment:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:file-touch href="tempdoc.stamp"/&gt;

&lt;p:file-copy href="tempdoc.stamp" target="time.stamp"/&gt;

&lt;p:file-delete href="tempdoc.stamp"/&gt;</code></pre>

<p>Each of the file steps has a primary output port and
consequently provides a <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>
to the following step. Even though the file steps don’t have input
ports, the document on the default readable port is the context item
for evaluating the options on each step.</p>

<p>However, an implementation will observe that none
of the options use the context item (and there are no inputs).
Consequently, there are no connections between these steps and they can be
run in an arbitrary order, or even in parallel. Running delete,
followed by copy, followed by touch would be perfectly correct but
would not have the side-effects expected by the pipeline
author.</p>

<p>There’s a trade-off here between giving implementations the
freedom to execute pipelines more efficiently and not violating user
expectations. In practice, this problem only arises when scheduling
steps that have side effects, steps with side effects are (relatively)
uncommon, and by their nature are impossible for the processor to
schedule with complete confidence.</p>

<p>The pipeline author can make the dependencies explicit in the
pipeline, which will ensure that the processor schedules the steps in
an order that has the desired the side-effects:
</p>

<pre class="programlisting language-markup xml"><code>&lt;p:file-touch name="touchstamp" href="tempdoc.stamp"/&gt;

&lt;p:file-copy name="copystamp" depends="touchstamp"
             href="tempdoc.stamp" target="time.stamp"/&gt;

&lt;p:file-delete depends="copystamp"
               href="tempdoc.stamp"/&gt;</code></pre>

<p>Explicitly marking the dependencies between steps that have side effects
is good practice.</p>

   </div></section>

      <section id="namespace-fixup" class="section"><div class="section-titlepage"><h3><bdi class="secno">6.2. </bdi>Namespace Fixup on XML Outputs<a aria-label="§" class="self-link" href="#namespace-fixup"/></h3></div><div class="content">
        
        <p>XProc processors are expected, and sometimes required, to perform <em class="glossterm"><a href="#dt-namespace-fixup">namespace
            fixup</a></em> on XML outputs. Unless the semantics of a step explicitly says otherwise:</p>
        <div class="itemizedlist">
          
          
        <ul><li>
            <p>The in-scope namespaces associated with a node (even those that are inherited from
              namespace bindings that appear among its ancestors in the document in which it appears
              initially) are assumed to travel with that node.</p>
          </li><li>
            <p>Changes to one part of a tree (wrapping or unwrapping a node or renaming an
              element, for example) do not change the in-scope namespaces associated with the
              descendants of the node so changed.</p>
          </li></ul></div>
        <p>As a result, some steps can produce XML documents which have no direct serialization
          (because they include nodes with conflicting or missing namespace declarations, for
          example). <span id="dt-namespace-fixup" class="termdef">[Definition: To produce a serializable
              <em class="glossterm"><a href="#dt-XML">XML</a></em> document, the XProc processor must sometimes add additional
            namespace nodes, perhaps even renaming prefixes, to satisfy the constraints of
              <em class="glossterm"><a href="#dt-Namespaces-in-XML">Namespaces in XML</a></em>. This process is referred to as
              <em class="glossterm">namespace fixup</em>.]</span>
        </p>
        <p>Implementors are encouraged to perform <em class="glossterm"><a href="#dt-namespace-fixup">namespace fixup</a></em> before
          passing documents between steps, but they are not required to do so. Conversely, an
          implementation which <em>does</em> serialize between steps and therefore must
          perform such fixups, or reject documents that cannot be serialized, is also
          conformant.</p>
        <p>Except where the semantics of a step explicitly require changes, processors are
          required to preserve the information in the documents and fragments they manipulate. In
          particular, the information corresponding to the [<a href="#xml-infoset-rec"><span class="abbrev">Infoset</span></a>]
          properties <code class="literal infoset-property">[attributes]</code>, <code class="literal infoset-property">[base URI]</code>, <code class="literal infoset-property">[children]</code>, <code class="literal infoset-property">[local name]</code>, <code class="literal infoset-property">[namespace name]</code>, <code class="literal infoset-property">[normalized value]</code>, <code class="literal infoset-property">[owner]</code>, and
            <code class="literal infoset-property">[parent]</code>
          <span class="rfc2119" id="namespace-fixup.6.10">must</span> be preserved.</p>
        <p>The information corresponding to <code class="literal infoset-property">[prefix]</code>,
            <code class="literal infoset-property">[in-scope namespaces]</code>, <code class="literal infoset-property">[namespace attributes]</code>, and <code class="literal infoset-property">[attribute type]</code>
          <span class="rfc2119" id="namespace-fixup.7.5">should</span> be preserved, with changes to the first three only as required
          for <em class="glossterm"><a href="#dt-namespace-fixup">namespace fixup</a></em>. In particular, processors are encouraged to
          take account of prefix information in creating new namespace bindings, to minimize
          negative impact on prefixed names in content.</p>
        <p><span id="impl-14">Except for cases which are specifically called out in [<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>], the extent to which namespace fixup, and other checks for
            outputs which cannot be serialized, are performed on intermediate outputs is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
        <p>Whenever an implementation serializes XML, for example for pipeline
          outputs, logging, or as part of steps such as <code class="tag-element">p:store</code> or
            <code class="tag-element">p:http-request</code>, it is a dynamic error if
          that serialization can not be done so as to produce a document which is both well-formed
          and namespace-well-formed, as specified in <em class="glossterm"><a href="#dt-XML">XML</a></em> and
            <em class="glossterm"><a href="#dt-Namespaces-in-XML">Namespaces in XML</a></em>.</p>
      </div></section>
    </div></section>

<section id="initiating" class="section"><div class="section-titlepage"><h2><bdi class="secno">7. </bdi>Initiating a pipeline<a aria-label="§" class="self-link" href="#initiating"/></h2></div><div class="content">


<p>Initiating a pipeline necessarily involves two activities:
static analysis and dynamic evaluation.
<span id="dt-static-analysis" class="termdef">[Definition: <em class="glossterm">Static
analysis</em>
consists of
those tasks that can be performed by inspection of the pipeline
alone, including the binding of
<a href="#statics">static options</a>,
computation of serialization properties and document-properties,
<a href="#use-when">evaluation of <code class="code">use-when</code> expressions</a>,
performing a static analysis of all XPath expressions, and detecting static errors.]</span>
<span id="dt-dynamic-evaluation" class="termdef">[Definition: <em class="glossterm">Dynamic
evaluation</em> consists of tasks which, in general,
cannot be performed out until a source document is available.]</span></p>

<p><a id="err.inline.S0107"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0107"><code class="errqname">err:XS0107</code></a>) in XProc
if any XPath expression or the XSLT <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> 
in option <code class="option">match</code>
on <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> contains a static error (error in expression syntax,
references to unknown variables or functions, etc.).
Type errors, even if they are determined during static
analysis, <span class="rfc2119" id="initiating.3.2">must not</span> be raised statically by
the XProc processor.
</p>

<p><span id="impl-15">There may be an <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>
mechanism for providing default values for static
<a href="#p.option"><code class="tag-element">p:option</code></a>s. If such a mechanism exists, the values provided
must match the sequence type declared for the option, if such a
declaration exists.</span></p>

<section id="static-expressions" class="section"><div class="section-titlepage"><h3><bdi class="secno">7.1. </bdi>Evaluating expressions during static analysis<a aria-label="§" class="self-link" href="#static-expressions"/></h3></div><div class="content">


<p>Several kinds of expressions are evaluated during static analysis:</p>

<div class="orderedlist">



<ol style="list-style: decimal;"><li>
<p>The <code class="tag-attribute">select</code> expressions on static
options.</p>
</li><li>
<p>
<a href="#value-templates">Value templates</a> in the attributes
or descendants of <a href="#p.input"><code class="tag-element">p:input</code></a> and <a href="#p.output"><code class="tag-element">p:output</code></a>
and map attributes on those descendants.
</p>
</li><li>
<p>Expressions in <code class="tag-attribute">use-when</code> attributes used
for <a href="#use-when">conditional element exclusion</a>.</p>
</li></ol></div>

<p>For the purposes of evaluating a these expressions,
the initial context node, position, and size are all undefined. The
<em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> are limited to the lexically preceding,
statically declared options. There are no available collections.</p>

<p>Options declared as the direct children of <a href="#p.library"><code class="tag-element">p:library</code></a> in imported libraries
are considered in-scope for the declarations that follow.</p>

<p>The entire expression must be evaluated without reference to the
non-static inputs to the pipeline. Expressions can access documents as long
as they are available statically.</p>

<p>Consider:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:declare-step version="3.0"
                xmlns:p="http://www.w3.org/ns/xproc"&gt;
  &lt;p:input port="source"/&gt;
  &lt;p:option name="A" static="true"
            select="5"/&gt;
  &lt;p:option name="B" static="true"
            select="$A + count(doc('doc.xml')//*)" /&gt;
  &lt;p:variable name="D" select="count(//*)"/&gt;

  …
&lt;/p:declare-step&gt;</code></pre>

<p>The value of <code class="code">$A</code> will be 5, unless a different
value is provided before static analysis. The value of <code class="code">$B</code> will
be the value of <code class="code">$A</code> plus the number of elements in
<code class="uri">doc.xml</code> <em>which must be successfully resolved during
static analysis</em>. Although <code class="code">$D</code> can reference
the document provided dynamically on the <code class="port">source</code> port,
neither <code class="code">$A</code> nor <code class="code">$B</code> may.</p>

<div class="note admonition"><h3>Note</h3><div class="admonition-body">

<p>There is no guarantee that the document read from <code class="uri">doc.xml</code> during
static analysis will be the same as the document read later during dynamic evaluation.
See <a href="#external-docs" title="External Documents">Section 4.1, “External Documents”</a> for further discussion.</p>
</div></div>

<p>The results of XProc extension functions may differ during static analysis,
as described in the description of each function.</p>

<p>Any errors that occur while evaluating expressions during static analysis will
be raised statically.</p>

</div></section>

<section id="dynamic-evaluation" class="section"><div class="section-titlepage"><h3><bdi class="secno">7.2. </bdi>Dynamic evaluation of the pipeline<a aria-label="§" class="self-link" href="#dynamic-evaluation"/></h3></div><div class="content">


<p>Dynamic evaluation of the pipeline occurs when it begins to
process documents. The processor evaluates any expressions necessary
to provide all of the input documents and options required. The step
processes the input documents and produces outputs which flow through
the pipeline.</p>

<p>Unless otherwise specified, expressions that appear in
attribute values
(<em class="glossterm"><a href="#dt-attribute-value-template">attribute value
templates</a></em>,
map and array initializers that are always
<a href="#syntax-summaries">treated as expressions</a>,
etc.) get their context item from
the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>. If there is no
default readable port, the context item is undefined.</p>

    <section id="environment" class="section"><div class="section-titlepage"><h4><bdi class="secno">7.2.1. </bdi>Environment<a aria-label="§" class="self-link" href="#environment"/></h4></div><div class="content">
      
      <p><span id="dt-environment" class="termdef">[Definition: The <em class="glossterm">environment</em> is a
          context-dependent collection of information available within subpipelines.]</span>
</p>
      <p>The environment consists of:</p>
      <div class="orderedlist">
        
        
        
      <ol style="list-style: decimal;"><li>
          <p>A set of readable ports. <span id="dt-readable-ports" class="termdef">[Definition: The <em class="glossterm">readable
                ports</em> are a set of step name/port name pairs.]</span> Inputs and
            outputs can only be connected to readable ports.</p>
        </li><li>
          <p>A default readable port. <span id="dt-default-readable-port" class="termdef">[Definition: The
                <em class="glossterm">default readable port</em>, which may be undefined, is a specific
              step name/port name pair from the set of readable ports.]</span></p>
        </li><li>
          <p>A set of in-scope bindings. <span id="dt-in-scope-bindings" class="termdef">[Definition: The
                <em class="glossterm">in-scope bindings</em> are a set of name-value pairs, based on
                <em class="glossterm"><a href="#dt-option">option</a></em> and <em class="glossterm"><a href="#dt-variable">variable</a></em>
              bindings.]</span></p>
        </li></ol></div>
      <p><span id="dt-empty-environment" class="termdef">[Definition: The <em class="glossterm">empty environment</em>
          contains no readable ports, an undefined default readable port, and no in-scope
          bindings.]</span>
      </p>
      <p>Unless otherwise specified, the environment of a <em class="glossterm"><a href="#dt-contained-steps">contained step</a></em> is its <em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em>. <span id="dt-inherited-environment" class="termdef">[Definition: The <em class="glossterm">inherited environment</em> of a
            <em class="glossterm"><a href="#dt-contained-steps">contained step</a></em> is an environment that
          is the same as the environment of its <em class="glossterm"><a href="#dt-container">container</a></em> with the <a href="#dt-standard-modifications">standard modifications</a>. ]</span></p>
      <p>The <span id="dt-standard-modifications">standard modifications</span> made to
        an inherited environment are:</p>
      <div class="orderedlist">
        
        
        
        
      <ol style="list-style: decimal;"><li>
          <p>The declared inputs of the container are added to the <em class="glossterm"><a href="#dt-readable-ports">readable
              ports</a></em>.</p>
          <p>In other words, contained steps can see the inputs to their container.</p>
        </li><li>
          <p>The union of all the declared outputs of all of the step’s sibling steps are added
            to the <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>.</p>
          <p>In other words, sibling steps can see each other’s outputs in addition to the
            outputs visible to their container.</p>
        </li><li>
          <p>If there is a preceding sibling step element:</p>
          <div class="itemizedlist">
            
            
          <ul><li>
              <p>If that preceding sibling has a <em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em>, then
                that output port becomes the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>.</p>
            </li><li>
              <p>Otherwise, the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is undefined.</p>
            </li></ul></div>
        </li><li>
          <p>If there <em>is not</em> a preceding sibling step element: </p>
          <div class="itemizedlist">
            
            
          <ul><li>
              <p>If the container has a <em class="glossterm"><a href="#dt-primary-input-port">primary input port</a></em>, the
                  <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is that <em class="glossterm"><a href="#dt-primary-input-port">primary input
                  port</a></em>.</p>
            </li><li>
              <p>Otherwise, the default readable port is unchanged.</p>
            </li></ul></div>
        </li></ol></div>

<p>A step with no parent inherits the <em class="glossterm"><a href="#dt-empty-environment">empty
environment</a></em>. </p>

<p>Variables and options are lexically scoped. The environment of a step
also includes the <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> for all of
the variables and options “visible” from its lexical position. Variables
and options can shadow each other; only the lexically most recent bindings
are visible.</p>

         <section id="initial-environment" class="section"><div class="section-titlepage"><h5><bdi class="secno">7.2.1.1. </bdi>Initial Environment<a aria-label="§" class="self-link" href="#initial-environment"/></h5></div><div class="content">
            
            <p>When a pipeline is invoked by a processor, an initial environment is constructed.
                  <span id="dt-initial-environment" class="termdef">[Definition: An <em class="glossterm">initial
                     environment</em> is a <em class="glossterm"><a href="#dt-connection">connection</a></em> for each of the
                     <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em> and a set of option bindings used to
                  construct the initial <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em>.]</span> This environment
               is used in place of the <em class="glossterm"><a href="#dt-empty-environment">empty environment</a></em> that might have
               otherwise been provided.</p>
            <p>An invoked pipeline’s <em class="glossterm"><a href="#dt-initial-environment">initial environment</a></em> is different from
               the environment constructed for the sub-pipeline of a declared step.  The initial
               environment is constructed for the initial invocation of the pipeline by the
               processor outside the application.  Steps that are subsequently invoked construct
               an environment as specified in <a href="#declare-pipelines" title="Declaring pipelines">Section 16.5.1, “Declaring pipelines”</a>.</p>
            <p>When constructing an <em class="glossterm"><a href="#dt-initial-environment">initial environment</a></em>, an implementation
               is free to provide any set of mechanisms to construct connections for the input ports
               of the invoked step. These mechanisms are not limited to the variety of mechanisms
               described within this specification. Any extensions are implementation
               defined.</p>
            <p>The set of <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> are constructed from a set of
               option name/value pairs.  Each option value can be a simple string value, a specific
               data type instance (e.g. xs:dateTime), or a more complex value like a map item.  How
               these values are specified is implementation defined.</p>
         </div></section>

    </div></section>

    <section id="xpath-context" class="section"><div class="section-titlepage"><h4><bdi class="secno">7.2.2. </bdi>XPath in XProc<a aria-label="§" class="self-link" href="#xpath-context"/></h4></div><div class="content">
      

<p>XProc uses XPath 3.1 as an expression language. XPath expressions
are evaluated by the XProc processor in several places: on compound
steps, to compute the default values of options and the values of
variables; on atomic steps, to compute the actual values of options.
</p>

      <p>XPath expressions are also passed to some steps. These expressions are evaluated by the
        implementations of the individual steps.</p>
      <p>This distinction can be seen in the following example:</p>
      <pre class="programlisting language-markup xml"><code>&lt;p:variable name="home" select="'http://example.com/docs'"/&gt;

&lt;p:load name="read-from-home"&gt;
  &lt;p:with-option name="href" select="concat($home,'/document.xml')"/&gt;
&lt;/p:load&gt;

&lt;p:split-sequence name="select-chapters" test="@role='chapter'"&gt;
  &lt;p:with-input port="source" select="//section"/&gt;
&lt;/p:split-sequence&gt;</code></pre>
      <p>The select expression on the variable “<code class="varname">home</code>” is evaluated by the
        XProc processor. The value of the variable is “<code class="uri">http://example.com/docs</code>”.</p>
      <p>The <code class="option">href</code> option of the <code class="tag-element">p:load</code> step is evaluated by the XProc
        processor. The actual <code class="literal">href</code> option received by the step is simply the
        string literal “<code class="uri">http://example.com/docs/document.xml</code>”. (The select expression on
        the <code class="literal">source</code> input of the <code class="tag-element">p:split-sequence</code> step is also
        evaluated by the XProc processor.) </p>
      <p>The XPath expression “<code class="literal">@role='chapter'</code>” is passed literally to the
          <code class="literal">test</code> option on the <code class="tag-element">p:split-sequence</code> step. That’s because the
        nature of the <code class="tag-element">p:split-sequence</code> is that <em>it evaluates</em> the
        expression. Only some options on some steps expect XPath expressions. </p>

<p>The XProc processor evaluates all of the XPath expressions in
<code class="tag-attribute">select</code> attributes on variables, options,
and inputs, in <code class="tag-attribute">match</code> attributes on
<a href="#p.viewport"><code class="tag-element">p:viewport</code></a>, and in <code class="tag-attribute">test</code>
attributes on <a href="#p.when"><code class="tag-element">p:when</code></a> and <a href="#p.if"><code class="tag-element">p:if</code></a> steps.</p>

<p>See <a href="#xproc-and-step-xpath-context" title="XPath contexts in XProc">Appendix B, <i>XPath contexts in XProc</i></a> for a detailed description of the context.</p>
    </div></section>
  </div></section>
</div></section>

<section id="xpath-extension-functions" class="section"><div class="section-titlepage"><h2><bdi class="secno">8. </bdi>XPath Extension Functions<a aria-label="§" class="self-link" href="#xpath-extension-functions"/></h2></div><div class="content">


<p>The XProc processor <span class="rfc2119" id="xpath-extension-functions.2.1">must</span> support the
additional functions described in this section in XPath expressions
evaluated by the processor.</p>

<p>These functions <span class="rfc2119" id="xpath-extension-functions.3.1">must not</span> be supported in
XPath expressions evaluated by a step. In the interest of
interoperability and to avoid imposing unnecessary constraints on
implementors, XPath expressions inside, for example, a template in an
XSLT step, cannot be aware of the XProc-defined functions.
</p>

      <section id="f.system-property" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.1. </bdi>System Properties<a aria-label="§" class="self-link" href="#f.system-property"/></h3></div><div class="content">
        
        <p>XPath expressions within a pipeline document can interrogate the processor for
          information about the current state of the pipeline. Various aspects of the processor are
          exposed through the <a href="#f.system-property"><code class="function">p:system-property</code></a> function:</p>

<div class="funcsynopsis"><span class="funcname">p:system-property</span><span class="funcparen">(</span><span class="paramname">$property</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:string</span></div>

<p>The <code class="varname">$property</code> string <span class="rfc2119" id="f.system-property.4.2">must</span> have the form of an
<a href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</a>.
If it is a QName, it is expanded using the namespace declarations in
scope for the expression. <a id="err.inline.D0015"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0015"><code class="errqname">err:XD0015</code></a>) if a QName is specified and it cannot be
resolved with the in-scope namespace declarations. The
<a href="#f.system-property"><code class="function">p:system-property</code></a> function returns the string
representing the value of the system property identified by the EQName.
If there is no such property, the empty string <span class="rfc2119" id="f.system-property.4.6">must</span>
be returned.</p>

<p>Implementations <span class="rfc2119" id="f.system-property.5.1">must</span> provide the following
system properties, which are all in the XProc namespace:</p>

        <div class="variablelist">
          
          
          
          
          
          
          
          
          
        <dl><dt><span class="term"><code class="varname">p:episode</code></span></dt><dd>
              <p>Returns a string which <span class="rfc2119" id="f.system-property.6.1.2.1.1">should</span> be unique for each invocation
                of the pipeline processor. In other words, if a processor is run several times in
                succession, or if several processors are running simultaneously, each invocation of
                each processor should get a distinct value from <code class="varname">p:episode</code>.</p>
              <p>The unique identifier must be a valid <a href="http://www.w3.org/TR/xml/#NT-Name">XML name</a>. </p>
            </dd><dt><span class="term"><code class="varname">p:locale</code></span></dt><dd>
              <p>Returns a string which identifies the current environment (usually the OS)
                language. This is useful for, for example, message
                localization purposes. <span id="impl-16">The exact format of the language string is
                    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> but <span class="rfc2119" id="f.system-property.6.2.2.1.1.2">should</span> be
                  consistent with the <code class="tag-attribute">xml:lang</code> attribute.</span></p>
            </dd><dt><span class="term"><code class="varname">p:product-name</code></span></dt><dd>
              <p>Returns a string containing the name of the implementation, as defined by the
                implementer. This should normally remain constant from one release of the product to
                the next. It should also be constant across platforms in cases where the same source
                code is used to produce compatible products for multiple execution platforms.</p>
            </dd><dt><span class="term"><code class="varname">p:product-version</code></span></dt><dd>
              <p>Returns a string identifying the version of the implementation, as defined by
                the implementer. This should normally vary from one release of the product to the
                next, and at the discretion of the implementer it may also vary across different
                execution platforms. </p>
            </dd><dt><span class="term"><code class="varname">p:vendor</code></span></dt><dd>
              <p>Returns a string which identifies the vendor of the processor.</p>
            </dd><dt><span class="term"><code class="varname">p:vendor-uri</code></span></dt><dd>
              <p>Returns a URI which identifies the vendor of the processor. Often, this is the
                URI of the vendor’s web site.</p>
            </dd><dt><span class="term"><code class="varname">p:version</code></span></dt><dd>
              <p>Returns the version(s) of XProc implemented by the processor
                as a space-separated list. For example, a processor that
                supports XProc 1.0 would return “1.0”; a processor that supports
                XProc 1.0 and 3.0 would return “1.0 3.0”; a processor that
                supports only XProc 3.0 would return “3.0”.</p>
            </dd><dt><span class="term"><code class="varname">p:xpath-version</code></span></dt><dd>
              <p>Returns the version(s) of XPath implemented by the processor
                for evaluating XPath expressions on XProc elements. The result
                is a space-separated list of versions supported. For example, a
                processor that only supports XPath 3.1 would return “3.1”; a
                processor that supports XPath 3.1 and XPath 3.2 could return
                “3.1 3.2”.</p>
            </dd><dt><span class="term"><code class="varname">p:psvi-supported</code></span></dt><dd>
              <p>Returns true if the implementation supports passing PSVI annotations between
                steps, false otherwise.</p>
            </dd></dl></div>

<p>Implementations may support additional system properties but such properties
<span class="rfc2119" id="f.system-property.7.1">must</span> be in a namespace and <span class="rfc2119" id="f.system-property.7.2">must not</span> be
in the XProc namespace.</p>

<p>The <a href="#f.system-property"><code class="function">p:system-property</code></a> function behaves normally during static 
analysis. <span id="impl-17">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> which additional
system properties are available during static analysis.</span> If an additional system
property is not available during static analysis, an empty string <span class="rfc2119" id="f.system-property.8.3">must</span>
be returned.</p>

      </div></section>
      <section id="f.step-available" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.2. </bdi>Step Available<a aria-label="§" class="self-link" href="#f.step-available"/></h3></div><div class="content">
        
        <p>The <a href="#f.step-available"><code class="function">p:step-available</code></a> function reports whether or not a particular
          type of step is understood by the processor and in scope where the function is called.</p>

<div class="funcsynopsis"><span class="funcname">p:step-available</span><span class="funcparen">(</span><span class="paramname">$step-type</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:boolean</span></div>

<p>The <code class="varname">$step-type</code> string <span class="rfc2119" id="f.step-available.4.2">must</span>
have the form of an
<a href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</a>.
If it is a QName, it is expanded using the namespace declarations in
scope for the expression. <a id="err.inline.D0015.1"/>It is a
  <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0015"><code class="errqname">err:XD0015</code></a>) if a QName is specified and it cannot be
  resolved with the in-scope namespace declarations. The
<a href="#f.step-available"><code class="function">p:step-available</code></a> function returns <code class="code">true</code> if and
only if the processor knows how to evaluate a step of the specified
type where the function is called.</p>

      <p>In case the argument of <a href="#f.step-available"><code class="function">p:step-available</code></a> refers to a step that is
        currently being defined, the function returns <code class="code">false</code>. In practice this occurs
        only if:</p>
      <div class="itemizedlist">
        
        
      <ul><li>
          <p><a href="#f.step-available"><code class="function">p:step-available</code></a> is used in a <code class="code">use-when</code> expression
            on or within the <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> that defines the step to which it
            refers.</p>
        </li><li>
          <p><a href="#f.step-available"><code class="function">p:step-available</code></a> is used in a <code class="code">use-when</code> expression
            on a <a href="#p.library"><code class="tag-element">p:library</code></a> that contains the declaration of the step to which it
            refers.</p>
        </li></ul></div>
        
<p>The <a href="#f.step-available"><code class="function">p:step-available</code></a> behaves normally during static analysis.</p>
</div></section>

<section id="f.iteration-position" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.3. </bdi>Iteration Position<a aria-label="§" class="self-link" href="#f.iteration-position"/></h3></div><div class="content">


<p>Some compound steps, such as <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> and <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>, process a
sequence of documents. The iteration position is the position of the
current document in that sequence: the first document has position 1, the
second 2, etc. The <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a> function
returns the iteration position of the nearest compound step that processes
a sequence of documents.</p>

<div class="funcsynopsis"><span class="funcname">p:iteration-position</span><span class="funcparen">(</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:integer</span></div>

<p>If there is no compound step that processes a sequence of documents
among the ancestors of the element on which the expression involving
<a href="#f.iteration-position"><code class="function">p:iteration-position</code></a> occurs, it returns 1.</p>

<p>The value of the <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a> function during
static analysis is 1.</p>
</div></section>

<section id="f.iteration-size" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.4. </bdi>Iteration Size<a aria-label="§" class="self-link" href="#f.iteration-size"/></h3></div><div class="content">


<p>Both <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> and <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> process a
sequence of documents. The iteration size is the total number of documents
in that sequence. The <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a> function
returns the iteration size of the nearest
ancestor
compound step that processes a sequence of documents.</p>

<div class="funcsynopsis"><span class="funcname">p:iteration-size</span><span class="funcparen">(</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:integer</span></div>

<p>If there is no <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> or <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>
among the ancestors of the element on which the expression involving
<a href="#f.iteration-size"><code class="function">p:iteration-size</code></a> occurs, it returns 1.</p>

<p>The value of the <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a> function during
static analysis is 1.</p>
</div></section>

<section id="f.version-available" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.5. </bdi>Version Available<a aria-label="§" class="self-link" href="#f.version-available"/></h3></div><div class="content">


  <p>Returns true if and only if the processor supports the XProc version
specified.</p>

<div class="funcsynopsis"><span class="funcname">p:version-available</span><span class="funcparen">(</span><span class="paramname">$version</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:boolean</span></div>

<p>A version 3.0 processor will return <code class="literal">true()</code> when
<code class="code">p:version-available('3.0')</code> is evaluated.</p>

<p>The <a href="#f.version-available"><code class="function">p:version-available</code></a> function behaves
normally during static analysis.</p>
</div></section>

<section id="f.xpath-version-available" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.6. </bdi>XPath Version Available<a aria-label="§" class="self-link" href="#f.xpath-version-available"/></h3></div><div class="content">


<p>Returns true if and only if the processor supports the XPath version
specified.</p>

<div class="funcsynopsis"><span class="funcname">p:xpath-version-available</span><span class="funcparen">(</span><span class="paramname">$version</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:boolean</span></div>

<p>A processor that supports XPath 3.1 will return <code class="literal">true()</code> when
<code class="code">p:xpath-version-available('3.1')</code> is evaluated.</p>

<p>The <a href="#f.xpath-version-available"><code class="function">p:xpath-version-available</code></a> function behaves
normally during static analysis.</p>
</div></section>

<section id="f.document-properties" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.7. </bdi>Document properties<a aria-label="§" class="self-link" href="#f.document-properties"/></h3></div><div class="content">


<p>This function retrieves the <em class="glossterm"><a href="#dt-document-properties">document properties</a></em>
of a document as a map.</p>

<div class="funcsynopsis"><span class="funcname">p:document-properties</span><span class="funcparen">(</span><span class="paramname">$doc</span><span class="typeas"> as </span><span class="type">item()</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">map(xs:QName,item()*)</span></div>

<p>The map returned contains (exclusively) the document properties
associated with the <em class="parameter"><code>$doc</code></em> specified. If the item
is not associated with a document, the resulting map will be empty.</p>

<p>Document properties are associated with documents that flow out
of steps. Documents loaded with XPath functions or through other
out-of-band means may not have properties associated with them. In
order to provide a consistent interface for pipeline authors, the
base URI of a node is always returned in the <code class="code">base-uri</code>
property and the <code class="code">content-type</code> property always contains at
least the most general appropriate content type: If the document node
has a single text node child, <code class="code">text/plain</code> is used, 
<code class="code">application/xml</code> otherwise.</p>

<p>The <a href="#f.document-properties"><code class="function">p:document-properties</code></a> function behaves
normally during static analysis.</p>
</div></section>

<section id="f.document-property" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.8. </bdi>Document property<a aria-label="§" class="self-link" href="#f.document-property"/></h3></div><div class="content">


<p>This function retrieves a single value from the
<em class="glossterm"><a href="#dt-document-properties">document properties</a></em> of a document.</p>

<div class="funcsynopsis"><span class="funcname">p:document-property</span><span class="funcparen">(</span><span class="paramname">$doc</span><span class="typeas"> as </span><span class="type">item()</span><span class="funccomma">, </span><span class="paramname">$key</span><span class="typeas"> as </span><span class="type">item()</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">item()*</span></div>

  <p>The item returned is the value of the property named <code class="code">$key</code> 
in the document properties. An empty sequence is returned if <code class="code">$doc</code> is
not associated with a document or no such key exists. <code class="code">$key</code> is 
interpreted as follows:</p>
  
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>If <code class="code">$key</code> is of type <code class="type">xs:QName</code>, its value is used unchanged.</p>
    </li><li>
      <p>If <code class="code">$key</code> is an instance of type <code class="type">xs:string</code> (or a type derived from
        <code class="type">xs:string</code>) its value is transformed into a <code class="type">xs:QName</code> using the <a href="https://www.w3.org/TR/xpath-31/#doc-xpath31-EQName">XPath EQName production rules</a>. That is, it can be written
        as a local-name only, as a prefix plus local-name or as a URI plus
        local-name (using the <code class="code">Q{}</code> syntax).</p>
      <p>
        <a id="err.inline.D0061"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0061"><code class="errqname">err:XD0061</code></a>)
          if <code class="code">$key</code> is of type <code class="type">xs:string</code> and cannot be converted into a <code class="type">xs:QName</code>.
      </p>
    </li><li>
      <p>If <code class="code">$key</code> is of any other type, the function returns the empty sequence.</p>
    </li></ul></div>

<p>The <a href="#f.document-property"><code class="function">p:document-property</code></a> function behaves
normally during static analysis.</p>
</div></section>
  
<section id="f.urify" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.9. </bdi>Transform file system paths into URIs and normalize URIs<a aria-label="§" class="self-link" href="#f.urify"/></h3></div><div class="content">


<p>Most web technologies identify resources with URIs, but XProc
must also operate with resources that are identified with strings
encoded in other ways, for example, file system paths and the names of
resources in archive files.</p>

<p>The <a href="#f.urify"><code class="function">p:urify</code></a> function attempts to
transform file system paths into file URIs ([<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]). If a presumptive yet not fully compliant URI is
given as an argument, <a href="#f.urify"><code class="function">p:urify</code></a> attempts to
resolve the string into a URI.</p>

<p>The <a href="#f.urify"><code class="function">p:urify</code></a> function resolves a string into
a URI by employing a series of heuristics. These have been selected so
that <code class="tag-element">p:urify</code> will not corrupt any actual, valid URIs and
with the goal that it will return the least surprising result for any
other string. If a pipeline author has more context to determine how
a string should be transformed into a URI, writing the conversion
process “by hand” in the pipeline may achieve better results.</p>

<div class="funcsynopsis"><span class="funcname">p:urify</span><span class="funcparen">(</span><span class="paramname">$filepath</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funccomma">, </span><span class="paramname">$basedir</span><span class="typeas"> as </span><span class="type">xs:string?</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:string</span></div>

<div class="funcsynopsis"><span class="funcname">p:urify</span><span class="funcparen">(</span><span class="paramname">$filepath</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:string</span></div>

<p>If the single-argument version of the function is used, the
result is the same as calling the two-argument version with
<em class="parameter"><code>$basedir</code></em> set to the empty sequence.</p>

<p>The <a href="#f.urify"><code class="function">p:urify</code></a> function behaves normally during static
analysis.</p>

<p>The heuristics that <a href="#f.urify"><code class="function">p:urify</code></a> performs occur
in two stages: first, the input string is analyzed to identify its
features, then these features are used to construct a final URI
string. An additional “fixup” process may be performed on the path
portion of the URI.</p>

<p>To make the operation of the <a href="#f.urify"><code class="function">p:urify</code></a>
function easier to understand, the description that follows is
presented as an algorithm with regular expressions. Implementors
are not required to implement it this way, any implementation that
achieves the correct results can be used.</p>

<p>The function may be implemented as an operation on strings; it
need not try to determine the existence of a file or directory, and it
<span class="rfc2119" id="f.urify.11.1">should not</span> follow symbolic links. However, two
pieces of information need to be known from the environment: Whether
the operating system identifies as “Windows” and the value of the file
separator. More precisely, the operating system identifies as Windows
if the <code class="literal">os-name</code> property as returned by the
<code class="tag-element">p:os-info</code> steps starts with the string
“<code class="literal">Windows</code>”. The file separator is what
<code class="tag-element">p:os-info</code> returns as the <code class="literal">file-separator</code>
property. If either of them are not known, it is assumed that the
operating system is not Windows and the file separator is the forward
slash, “<code class="literal">/</code>”.</p>

<p>The comparisons and regular expressions that follow are
presented in lower case, but all of the operations performed are case
blind: “file”, “FILE”, “File”, and “FiLe” are all identical.
</p>

<section id="urify-normalize" class="section"><div class="section-titlepage"><h4><bdi class="secno">8.9.1. </bdi>Normalize file separators<a aria-label="§" class="self-link" href="#urify-normalize"/></h4></div><div class="content">


<p>Before beginning analysis, if the system file separator is not
“/”, then all occurrences of the file separator in filenames
must be replaced by “/”. (If the file separator
<em>is</em> “/”, this section does not apply.)</p>

<p>Replacing file separators with “/” simplifies the
analysis that follows and assures that the resulting URI will be
syntactically correct. However, it must only be done when it
is determined that the <em class="parameter"><code>$filepath</code></em> will become
part of a file: URI.</p>

<p>To determine if the path will become part of a file: URI,
consider the following cases in turn, stopping at the first which
applies:</p>

<div class="itemizedlist">





<ul><li>
<p>If the <em class="parameter"><code>$filepath</code></em> begins with “file:” or,
on Windows, if it begins with a single letter followed by a colon, it will
be part of a file: URI.
</p>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> begins with an explicit scheme
other than “file”, it will not be part of a file: URI.</p>
</li><li>
<p>If the <em class="parameter"><code>$basedir</code></em> is absent or the empty
string, it will be part of a file: URI.</p>
</li><li>
<p>If the
<em class="parameter"><code>$basedir</code></em> begins with an explicit scheme other
than “file”, it will not be part of a file: URI.
</p>
</li><li>
<p>If none of the preceding cases applies, it will be part of a file: URI.
</p>
</li></ul></div>

<p>If it has been determined that the path
will become part of a file: URI, replace each occurrence of the
file separator character in <em class="parameter"><code>$filepath</code></em> with a “/”.
</p>
</div></section>

<section id="urify-analysis" class="section"><div class="section-titlepage"><h4><bdi class="secno">8.9.2. </bdi>Analysis<a aria-label="§" class="self-link" href="#urify-analysis"/></h4></div><div class="content">


<p>The <em class="parameter"><code>$filepath</code></em> presented is analyzed to identify the
following features:</p>

<div class="itemizedlist">





<ul><li>
<p>The <em>scheme</em>, which may be absent or
implicitly known or explicitly known.</p>
</li><li>
<p>Whether or not the string can be interpreted as
<em>hierarchical</em>.</p>
</li><li>
<p>The <em>authority</em>, which may be absent.</p>
</li><li>
<p>The <em>drive letter</em>, which may be absent.</p>
</li><li>
<p>And the <em>path</em>, which may be <em>absolute</em>
or <em>relative</em>.</p>
</li></ul></div>

<p>The analysis proceeds along the following lines, stopping as
soon as the features have been identified.</p>

<div class="orderedlist">













<ol style="list-style: decimal;"><li>
<p>If the <em class="parameter"><code>$filepath</code></em> is the empty string, it has no
scheme, no authority, and no drive letter. Its path is the empty
string and it is relative and hierarchical.</p>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> is the string “//”, it has no
scheme, no authority, and no drive letter. Its path is the
string “/” and it is absolute and hierarchical.</p>
</li><li>
<p>On a Windows system, if the <em class="parameter"><code>$filepath</code></em> matches the
regular expression “<code class="code">^(file:/*)?([a-z]):(.*)</code>”, it is a
“file” scheme URI. If the first match group begins with “file:”, it is an
explicit file scheme URI, otherwise it is an implicit file scheme URI.
The drive letter is the second match group.
If the third match group begins with a “/”, the path is absolute and
consists of the third match group with all but one leading “/”
removed. Otherwise, the path is relative and consists of the entire
third match group, or the empty string if the third match group is empty.
</p>
<p>In all cases, the scheme is hierarchical and the authority is absent.</p>
<p>For example:</p>
<div class="itemizedlist">








<ul><li><p><code class="code">C:Users/Jane/Documents and Files/Thing</code>, an implicit file URI
on drive C with the relative path “Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">C:/Users/Jane/Documents and Files/Thing</code> an implicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">C://Users/Jane/Documents and Files/Thing</code> an implicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">C:///Users/Jane/Documents and Files/Thing</code> an implicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">file:C:Users/Jane/Documents and Files/Thing</code> an explicit file URI
on drive C with the relative path “Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">file:C:/Users/Jane/Documents and Files/Thing</code> an explicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">file:C://Users/Jane/Documents and Files/Thing</code> an explicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li><li><p><code class="code">file:C:///Users/Jane/Documents and Files/Thing</code> an explicit file URI
on drive C with the absolute path “/Users/Jane/Documents and Files/Thing”.
</p>
</li></ul></div>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> matches the regular expression
“<code class="code">^file://([^/]+)(/.*)?$</code>”, it is an explicit “file” scheme
URI. The first match group is the authority.
If the second match group begins with a “/”, the path is absolute and
consists of the second match group with all but one leading “/”
removed. Otherwise, the path is the empty string and is relative.
</p>
<p>In all cases, the scheme is hierarchical and the drive letter is absent.</p>
<p>For example:</p>
<div class="itemizedlist">






<ul><li>
<p><code class="code">file://authority.com</code> an explicit file URI with the authority
“authority.com” and the relative path “”.
</p>
</li><li>
<p><code class="code">file://authority.com/</code> an explicit file URI with the authority
“authority.com” and the absolute path “/”.
</p>
</li><li>
<p><code class="code">file://authority.com/path/to/thing</code> an explicit file URI with the authority
“authority.com” and the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">file://authority.com//path/to/thing</code> an explicit file URI with the authority
“authority.com” and the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">file://authority.com///path/to/thing</code> an explicit file URI with the authority
“authority.com” and the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">file://authority.com:8080/path/to/thing</code> an explicit file URI with the authority
“authority.com:8080” and the absolute path “/path/to/thing”.
</p>
</li></ul></div>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> matches the regular expression
“<code class="code">^file:(.*)$</code>”, it is an explicit “file” scheme URI.
If the first match group begins with a “/”, the path is absolute and
consists of the first match group with all but one leading “/”
removed. Otherwise, the path is relative and consists of the entire
first match group, or the empty string if the first match group is empty.
</p>
<p>In all cases, the scheme is hierarchical and the drive letter and authority are absent.</p>
<p>For example:</p>
<div class="itemizedlist">





<ul><li><p><code class="code">file:</code> is an explicit file URI with the relative path “”.
</p>
</li><li><p><code class="code">file:path/to/thing</code>  is an explicit file URI with the relative
path “path/to/thing”.
</p>
</li><li><p><code class="code">file:/path/to/thing</code> is an explicit file URI with the absolute
path “/path/to/thing”.
</p>
</li><li><p><code class="code">file://path/to/thing</code> does not apply.
It matches the preceding case; “path” is the authority.
</p>
</li><li><p><code class="code">file:///path/to/thing</code> is an explicit file URI with the absolute
path “/path/to/thing”.
</p>
</li></ul></div>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> matches the regular expression
“<code class="code">^([a-z]+):(.*)$</code>”, it is an explicit URI in the scheme identified
by the first match group. The path is the second match group. (In the terms of [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>], it may have an authority component, but that’s
not relevant to <a href="#f.urify"><code class="function">p:urify</code></a>.) If the implementation
does not know if the scheme is hierarchical, it is considered
hierarchical if the path contains a “/”, otherwise it is considered
non-hierarchical.
(The “http”, “https”, and “ftp” schemes are hierarchical, for
example; the “mailto”, “urn” and “doi” schemes are not.)</p>
<p>In all cases, the drive letter and authority are absent.</p>
<p>For example:</p>
<div class="itemizedlist">







<ul><li>
<p><code class="code">urn:publicid:ISO+8879%3A1986:ENTITIES+Added+Latin+1:EN</code> is
a non-hierarchical “urn” URI. By the heuristic applied, the path is
“publicid:ISO+8879%3A1986:ENTITIES+Added+Latin+1:EN”, but this will never
be relevant as relative and absolute path resolution is never applied to non-hierarchical
schemes.
</p>
</li><li>
<p><code class="code">https:</code> is a hierarchical “https” URI with the relative path “”.
</p>
</li><li>
<p><code class="code">https://example.com</code> is a hierarchical “https” URI with the
absolute path “//example.com”.
</p>
</li><li>
<p><code class="code">https://example.com/</code> is a hierarchical “https” URI with the
absolute path “//example.com/”.
</p>
</li><li>
<p><code class="code">https://example.com/path/to/thing</code> is a hierarchical “https” URI with the
absolute path “//example.com/path/to/thing”.
</p>
</li><li>
<p><code class="code">https://example.com//path/to/thing</code> is a hierarchical “https” URI with the
absolute path “//example.com//path/to/thing”.
</p>
</li><li>
<p><code class="code">https://example.com:9000/path/to/thing</code> is a hierarchical “https” URI with the
absolute path “//example.com:9000/path/to/thing”.
</p>
</li></ul></div>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> matches the regular expression
“<code class="code">^//([^/]+)(/.*)?$</code>”, it has no scheme. The first match
group is the authority.
If the second match group begins with a “/”, the path is absolute and
consists of the second match group with all but one leading “/”
removed. Otherwise, the path is the empty string and is relative.
It has no drive letter.
</p>
<p>In all cases, the URI is hierarchical and the drive letter is absent.</p>
<p>For example:</p>
<div class="itemizedlist">







<ul><li>
<p><code class="code">//authority</code> has the authority “authority” and the relative path “”.
</p>
</li><li>
<p><code class="code">//authority/</code> has the authority “authority” and the absolute path “/”.
</p>
</li><li>
<p><code class="code">//authority/path/to/thing</code> has the authority “authority” and
the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">//authority//path/to/thing</code> has the authority “authority” and
the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">//authority///path/to/thing</code> has the authority “authority” and
the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">//authority:8080/path/to/thing</code> has the authority “authority:8080” and
the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">//authority/Documents and Files/thing</code> has the authority “authority” and
the absolute path “/Documents and Files/thing”.
</p>
</li></ul></div>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> begins with a “/”, the
path is absolute and consists of <em class="parameter"><code>$filepath</code></em> with all but
one leading “/” removed. Otherwise, the path is relative and consists
of the entire <em class="parameter"><code>$filepath</code></em>. It is hierarchical and has no scheme, no authority and no drive
letter. (This condition always applies if no preceding condition does.)</p>
<p>For example:</p>
<div class="itemizedlist">






<ul><li>
<p><code class="code">path/to/thing</code> has the relative path “path/to/thing”.
</p>
</li><li>
<p><code class="code">/path/to/thing</code> has the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">//path/to/thing</code> does not apply.
It matches the preceding case; “path” is the authority.
</p>
</li><li>
<p><code class="code">///path/to/thing</code> has the absolute path “/path/to/thing”.
</p>
</li><li>
<p><code class="code">Documents and Files/thing</code> has the relative path
“/Documents and Files/thing”.
</p>
</li><li>
<p><code class="code">/Documents and Files/thing</code> has the absolute path
“/Documents and Files/thing”.
</p>
</li></ul></div>
</li></ol></div>

<p>If the analysis determines that the string represents a
non-hierarchical URI, the <em class="parameter"><code>$filepath</code></em> is returned
unchanged.</p>

<p>If the analysis determines that the scheme is known
and the path is absolute, a URI is constructed from the features,
see below. Otherwise, the URI must be made absolute with respect to the
<em class="parameter"><code>$basedir</code></em> provided.</p>

<p>If the <em class="parameter"><code>$basedir</code></em> is the empty sequence, construct a
presumptive URI string from the string that represents the current
working directory. If this presumptive URI does not end with the file
separator, append the file separator. If the implementation is running
in an environment where the concept of “current working directory”
does not apply, the presumptive URI is the empty string. This
presumptive URI becomes the <em class="parameter"><code>$basedir</code></em>.</p>

<p>Analyze the features of the <em class="parameter"><code>$basedir</code></em>.</p>

<p>If the <em class="parameter"><code>$basedir</code></em> has no scheme, it’s implicitly a
“file” URI.</p>

<p>If the <em class="parameter"><code>$basedir</code></em> path is relative, the
<em class="parameter"><code>$filepath</code></em> cannot be made absolute. <a id="err.inline.D0074"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0074"><code class="errqname">err:XD0074</code></a>) if no absolute base URI is
supplied to <a href="#f.urify"><code class="function">p:urify</code></a> and none can be inferred from
the current working directory.</p>

<p>The following additional constraints apply.</p>

<div class="itemizedlist">




<ul><li>
<p><a id="err.inline.D0075"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0075"><code class="errqname">err:XD0075</code></a>) if
the relative path has a drive letter and the base URI has a different drive letter
or does not have a drive letter.</p>
</li><li>
<p><a id="err.inline.D0076"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0076"><code class="errqname">err:XD0076</code></a>) if
the relative path has a drive letter and the base URI has an authority or
if the relative path has an authority and the base URI has a drive letter.
</p>
</li><li>
<p><a id="err.inline.D0077"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0077"><code class="errqname">err:XD0077</code></a>) if
the relative path has a scheme that differs from the scheme of the base URI.
</p>
</li><li>
<p><a id="err.inline.D0080"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0080"><code class="errqname">err:XD0080</code></a>) if
the <em class="parameter"><code>$basedir</code></em> has a non-hierarchical scheme.
</p>
</li></ul></div>

<p>Combine the features of the <em class="parameter"><code>$filepath</code></em> with the
features of the <em class="parameter"><code>$basedir</code></em> to obtain a set of features to
use to construct the result.</p>

<p>If the <em class="parameter"><code>$filepath</code></em> has no scheme or an implicit file
scheme, perform fixup on the path, as described below. If the
<em class="parameter"><code>$basedir</code></em> is an implicit file URI, perform fixup on its
path.</p>

<div class="orderedlist">




<ol style="list-style: decimal;"><li>
<p>The scheme is the scheme of the <em class="parameter"><code>$basedir</code></em>.
</p>
</li><li>
<p>If the <em class="parameter"><code>$filepath</code></em> has an authority, use that authority,
otherwise use the authority of the <em class="parameter"><code>$basedir</code></em>, if it has one.</p>
</li><li>
<p>The drive letter is the drive letter of the <em class="parameter"><code>$basedir</code></em>.</p>
</li><li>
<p>If the path of the <em class="parameter"><code>$filepath</code></em> absolute, that’s the path. Otherwise
the path is the path of the <em class="parameter"><code>$filepath</code></em> resolved against the
<em class="parameter"><code>$basedir</code></em>.
</p>
<p>If the <em class="parameter"><code>$basedir</code></em> ends in “/”, the resolved path is the concatention
of the <em class="parameter"><code>$basedir</code></em> and <em class="parameter"><code>$filepath</code></em>’s path. Otherwise,
the resolved path is the concatentation of all the characters in <em class="parameter"><code>$basedir</code></em>
up to and including the last “/” it contains with the <em class="parameter"><code>$filepath</code></em>’s path.
</p>
<p>Path contraction for “.” and “..” is performed on the resolved path
according to Section 3.3 of [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
</li></ol></div>
</div></section>

<section id="urify-fixup" class="section"><div class="section-titlepage"><h4><bdi class="secno">8.9.3. </bdi>Path fixup<a aria-label="§" class="self-link" href="#urify-fixup"/></h4></div><div class="content">


<p>If fixup is performed, the characters “?”, “#”, “\” and “ ”
(space) are replaced by their percent-encoded forms, “%3F”, “%23”,
“%5C”, and “%20”, respectively.</p>

<p>Unreserved characters that are percent encoded in the path are decoded
per Section 2.4 of [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
</div></section>

<section id="urify-uri-construction" class="section"><div class="section-titlepage"><h4><bdi class="secno">8.9.4. </bdi>URI construction<a aria-label="§" class="self-link" href="#urify-uri-construction"/></h4></div><div class="content">


<p>The <a href="#f.urify"><code class="function">p:urify</code></a> result string is constructed from
the features of the path (or the features of the path as resolved against the
<em class="parameter"><code>$basedir</code></em>, if applicable) in the following way:</p>

<div class="orderedlist">






<ol style="list-style: decimal;"><li>
<p>Begin with an empty string.</p>
</li><li>
<p>If there is a scheme, append the scheme followed by a “:”.</p>
</li><li>
<p>If there is an authority, append “//” followed by the
authority.</p>
  <div class="itemizedlist">
  
  <ul><li>
  <p>On a Windows system, if the scheme is known to be <code class="code">file</code>
and the processor determines that the
authority component is accessible via the universal naming convention (UNC),
an additional “//” <span class="rfc2119" id="urify-uri-construction.3.3.2.1.1.2">may</span> be added before the authority. (In other words,
<code class="code">file:////uncserver</code> is allowed.)</p>
  </li></ul></div>
</li><li>
<p>If there is <em>not</em> an authority, but the scheme is “file”
and the path is absolute,</p>
<div class="itemizedlist">


<ul><li>
<p>Append “//”.</p>
</li><li>
<p>If there is a drive letter, append another “/”.</p>
</li></ul></div>
</li><li>
<p>If there is a drive letter, append the drive letter followed by a “:”.</p>
</li><li>
<p>Append the path.</p>
</li></ol></div>
<p>The string constructed is the <a href="#f.urify"><code class="function">p:urify</code></a> result.</p>
</div></section>
</div></section>

<section id="f.function-library-importable" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.10. </bdi>Function library importable<a aria-label="§" class="self-link" href="#f.function-library-importable"/></h3></div><div class="content">


<p>The <a href="#f.function-library-importable"><code class="function">p:function-library-importable</code></a> function
reports whether or not function libraries of a particular type can be imported.
</p>

<div class="funcsynopsis"><span class="funcname">p:function-library-importable</span><span class="funcparen">(</span><span class="paramname">$library-type</span><span class="typeas"> as </span><span class="type">xs:string</span><span class="funcparen">)</span><span class="typeas"> as </span><span class="type">xs:boolean</span></div>

<p>The <code class="varname">$library-type</code> string is interpreted as a content type.
If the processor understands
(<em class="foreignphrase">i.e.</em> if <a href="#p.import-functions"><code class="tag-element">p:import-functions</code></a> understands)
how to load function libraries of that type, this function returns
<code class="literal">true()</code>, otherwise it returns <code class="literal">false()</code>.
</p>

<p>The <a href="#f.function-library-importable"><code class="function">p:function-library-importable</code></a> function behaves
normally during static analysis.</p>
</div></section>

<section id="other-xpath-extension-functions" class="section"><div class="section-titlepage"><h3><bdi class="secno">8.11. </bdi>Other XPath Extension Functions<a aria-label="§" class="self-link" href="#other-xpath-extension-functions"/></h3></div><div class="content">
  
  <p><span id="impl-18">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> if the processor supports
  any other XPath extension functions.</span> Additional extension functions, if any,
  <span class="rfc2119" id="other-xpath-extension-functions.2.2">must not</span> use any of the XProc namespaces. </p>

<p><span id="impl-19">The value of the any other XPath extension functions during
static analysis is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
</div></section>
</div></section>

  <section id="psvi-support" class="section"><div class="section-titlepage"><h2><bdi class="secno">9. </bdi>PSVIs in XProc<a aria-label="§" class="self-link" href="#psvi-support"/></h2></div><div class="content">
      
      <p>XML documents flow between steps in an XProc pipeline. <a href="#infoset-conformance" title="Infoset Conformance">Section A.3, “Infoset Conformance”</a> identifies the properties of those documents that
          <span class="rfc2119" id="psvi-support.2.2">must</span> be available. Implementations <span class="rfc2119" id="psvi-support.2.3">may</span> also have the
        ability to pass PSVI annotations between steps.</p>
      <p><span id="impl-20">Whether or not the pipeline processor supports passing PSVI annotations between
          steps is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
        <span id="impl-21">The exact PSVI properties that are preserved when documents are passed between steps
          is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
      <p>A pipeline can use the <code class="varname">p:psvi-supported</code> system property to determine
        whether or not PSVI properties can be passed between steps.</p>
      <p>A pipeline can assert that PSVI support is required with the <code class="tag-attribute">psvi-required</code> attribute:</p>
      <div class="itemizedlist">
        
        
      <ul><li>
          <p>On a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, <code class="tag-attribute">psvi-required</code> indicates whether or not the declared step requires PSVI support.
              <a id="err.inline.D0022"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0022"><code class="errqname">err:XD0022</code></a>) if a processor that
              does not support PSVI annotations attempts to invoke a step which asserts that they
              are required.</p>
        </li><li>
          <p>On a <a href="#p.library"><code class="tag-element">p:library</code></a>, the <code class="tag-attribute">psvi-required</code> attribute
            provides a default value for all of its <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>
            <em>children</em> that do not specify a value themselves.</p>
        </li></ul></div>
      <p>Many of the steps that an XProc pipeline can use are transformative in nature. The
          <code class="tag-element">p:delete</code> step, for example, can remove elements and attributes; the
          <code class="tag-element">p:label-elements</code> step can add attributes; etc. If PSVI annotations were always
        preserved, the use of such steps could result in documents that were inconsistent with their
        schema annotations.</p>
      <p>In order to avoid these inconsistencies, most steps <span class="rfc2119" id="psvi-support.8.1">must not</span> produce
        PSVI annotated results even when PSVI passing is supported.</p>
      <p>If PSVI passing is supported, the following constraints apply:</p>
      <div class="orderedlist">
        
        
        
        
        
        
      <ol style="list-style: decimal;"><li>
          <p>Implementations <span class="rfc2119" id="psvi-support.10.1.1.1">must</span> faithfully transmit any PSVI properties
            produced on step outputs to the steps to which they are connected.</p>
        </li><li>
          <p>When only a subset of the input is processed by a step (because a <code class="tag-attribute">select</code> expression appears on an input port or a <code class="tag-attribute">match</code> expression is used to process only part of the input),
            any PSVI annotations that appear on the selected input <span class="rfc2119" id="psvi-support.10.2.1.3">must</span> be
            preserved in the resulting documents passed to the step.</p>
          <p>Note that ID/IDREF constraints, and any other whole-document constraints, may not be
            satisfied within the selected portion, irrespective of what its PSVI properties
            claim.</p>
        </li><li>
          <p>If an output of a compound step is connected to an output which includes PSVI
            properties, those properties <span class="rfc2119" id="psvi-support.10.3.1.1">must</span> be preserved on the output of the
            compound step, <em>except</em> for the output of <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> which
              <span class="rfc2119" id="psvi-support.10.3.1.4">must not</span> contain any PSVI properties.</p>
        </li><li>
          <p>If an implementation supports XPath 2.0 or later, the data model constructed with which to
            evaluate XPath expressions and <em class="glossterm"><a href="#dt-selection-pattern">selection patterns</a></em> <span class="rfc2119" id="psvi-support.10.4.1.2">should</span> take advantage
            of as much PSVI information as possible. </p>
          <p>
          <span id="dt-selection-pattern" class="termdef">[Definition: A <em class="glossterm">selection pattern</em> uses a
            subset of the syntax for path expressions, and is defined to match a node if the
            corresponding path expression would select the node. It is defined as in the 
            <a href="https://www.w3.org/TR/xslt-30/#dt-selection-pattern">XSLT 3.0
              specification</a>.]</span></p>
        </li><li>
          <p>All steps that explicitly behave like the <code class="tag-element">p:identity</code> step under
          some circumstances must preserve PSVI properties under those circumstances.
          In this specifications, those steps are <a href="#p.if"><code class="tag-element">p:if</code></a> when the condition is false
          and <a href="#p.choose"><code class="tag-element">p:choose</code></a> when no subpipline is selected.</p>
        </li><li>
          <p>Except as specified above, or in the descriptions of individual steps,
            implementations <span class="rfc2119" id="psvi-support.10.6.1.1">must not</span> include PSVI properties in the outputs of
            steps. 
            <span id="impl-22">It is
                <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what PSVI properties, if any, are
              produced by extension steps.</span></p>
        </li></ol></div>
      <div id="note-psvi" class="note admonition"><h3>Note</h3><div class="admonition-body">
        <p>A processor that supports passing PSVI properties between steps is always free to do
          so. Even if <code class="code">psvi-required="false"</code> is explicitly specified, it is not an error
          for a step to produce a result that includes additional PSVI properties, provide it does
          not violate the constraints above.</p>
      </div></div>
    </div></section>

<section id="value-templates" class="section"><div class="section-titlepage"><h2><bdi class="secno">10. </bdi>Value Templates<a aria-label="§" class="self-link" href="#value-templates"/></h2></div><div class="content">


<p>An attribute or text node in a pipeline may, in particular
circumstances, contain embedded expressions enclosed between curly
brackets. Attributes and text nodes that use (or are permitted to use)
this mechanism are referred to respectively as <em class="glossterm"><a href="#dt-attribute-value-template">attribute value
templates</a></em> (AVTs) and <em class="glossterm"><a href="#dt-text-value-template">text value templates.</a></em> (TVTs).</p>

<p><span id="dt-value-template" class="termdef">[Definition: Collectively,
attribute value templates and text value templates are referred to as
<em class="glossterm">value templates</em>.]</span>
</p>

<p>A value template is a string that contains zero or more
expressions delimited by curly brackets. Outside an expression, a
doubled left or right curly bracket (“<code class="literal">{{</code>” or
“<code class="literal">}}</code>”) represents a literal, single bracket and does
not start or end an expression. Once an expression begins, it extends
to the first unmatched right curly bracket that is not within a string
literal or comment.</p>

<p>Value templates are not recursive. Curly brackets inside an
expression are part of that expression and are not recognized as
nested value templates.</p>

<p>
<a id="err.inline.S0066"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0066"><code class="errqname">err:XS0066</code></a>) if
an expression does not have a closing right curly bracket or if an
unescaped right curly bracket occurs outside of an expression.

</p>

<p>It is a static error if the string contained between matching curly
brackets in a value template, when interpreted as an XPath expression,
contains errors. The error is signaled using the appropriate
XPath error code.</p>

<p>
<a id="err.inline.D0050"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0050"><code class="errqname">err:XD0050</code></a>) if the
XPath expression in a value template can not be evaluated.
</p>

<p>
<a id="err.inline.D0051"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0051"><code class="errqname">err:XD0051</code></a>) if the XPath
expression in an AVT or TVT evaluates to something to other than a sequence
containing atomic values or nodes. Function, array and map items are
explicitly excluded here because they do not have a string representation.
</p>

  <p>A value template that contains a reference to the context
    item reads that context item from the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>. 
    This establishes a connection between the two steps.
    <a id="err.inline.D0065"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0065"><code class="errqname">err:XD0065</code></a>)
      to refer to the context item, size, or position in a value template 
      if a sequence of documents appears on the default readable port. 
    Value templates that do not contain a reference to the context item
    do not establish a connection to another step and do not
    require that a <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is available.</p>

<section id="attribute-value-templates" class="section"><div class="section-titlepage"><h3><bdi class="secno">10.1. </bdi>Attribute Value Templates<a aria-label="§" class="self-link" href="#attribute-value-templates"/></h3></div><div class="content">


<p><span id="dt-attribute-value-template" class="termdef">[Definition: In an attribute
that is designated as an <em class="glossterm">attribute value
template</em>, an expression can be used by surrounding the
expression with curly brackets (<code class="code">{}</code>), following the
general rules for <em class="glossterm"><a href="#dt-value-template">value
templates</a></em>]</span>.</p>

<p>Curly brackets are not treated specially in an attribute value
in an XProc pipeline unless the attribute is specifically designated
as one that permits an attribute value template. Option shortcuts
permit attribute value templates.
<span id="impl-23">Whether or not an extension attribute permits attribute value
templates is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
In element
syntax summaries in this specification, the value of an attribute that allows attribute value
templates is surrounded by
curly brackets.</p>

<p>An attribute value template can be seen as an alternating
sequence of zero or more “fixed” (non-expression) parts and expression
parts.</p>

<p>The result of the attribute value template is the concatenation
of the fixed parts and the string-value of the result of evaluating
each expression part.</p>

<div id="note-dynerr" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>This process can generate dynamic errors, for example if the
sequence contains an element with a complex content type (which cannot
be atomized).</p>
</div></div>

<p>The value of an attribute that contains attribute value
templates is a single string (the concatenation of the string values
of the evaluated templates and non-template parts) as an
<code class="type">xs:untypedAtomic</code>.</p>
</div></section>

<section id="text-value-templates" class="section"><div class="section-titlepage"><h3><bdi class="secno">10.2. </bdi>Text Value Templates<a aria-label="§" class="self-link" href="#text-value-templates"/></h3></div><div class="content">


<p><span id="dt-text-value-template" class="termdef">[Definition: In a text node that is
designated as a <em class="glossterm">text value template</em>,
expressions can be used by surrounding each expression with curly
brackets (<code class="code">{}</code>), following the
general rules for <em class="glossterm"><a href="#dt-value-template">value
templates</a></em>.]</span>
</p>

<p>Text nodes that are descendants
of a <a href="#p.inline"><code class="tag-element">p:inline</code></a> and text nodes that are descendants of an
element node in an implicit inline may be text value templates. No
other text node is a text value template.</p>

<p>Whether or not a text node that may be a text value template is
designated one is determined by <code class="code">expand-text</code> and <code class="code">p:inline-expand-text</code> attributes,
see <a href="#expand-text-attribute" title="Expand text attributes">Section 14.9.1, “Expand text attributes”</a>.</p>

<p>A text value template can be seen as an alternating sequence of
zero or more “fixed” (non-expression) parts and expression parts.</p>

<p>This produces a sequence of strings (the fixed parts) and items
(the results of evaluating each expression). Any items that are
non-string atomic values are converted to strings by taking their
string value. Strings are converted into text nodes.</p>

<p>The result of the text value template is this sequence of nodes.</p>

<div id="unlike-xslt-tvts" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>Unlike XSLT, in XProc, text value templates are not atomized
and converted to single text nodes. It is possible to insert nodes with
text value templates in XProc, for example, if the XPath
expressions refer to variables that have node content.</p>
</div></div>

<p>If a node to be inserted with a text value template is a document
node, all the children of the document node are inserted.</p>

<p>How the nodes are inserted depends on the content type of the
<a href="#p.inline"><code class="tag-element">p:inline</code></a>.</p>

<div class="orderedlist">


<ol style="list-style: decimal;"><li>
<p>If the content type is an <em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em> or an
  <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>,
the nodes are added to the XML document where they occur. This is analogous
to the way element constructors work in [<a href="#xquery10"><span class="abbrev">XQuery 1.0</span></a>].
</p>
<p>If the node is an attribute
it is added to an element parent if and only if the attribute either has
no preceding nodes in the sequence of nodes or has only attributes as preceding nodes.
<a id="err.inline.D0052"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0052"><code class="errqname">err:XD0052</code></a>) if the XPath
expression in a TVT evaluates to an attribute and either the parent is not an
element or the attribute has a preceding node that it not an attribute.
</p>
</li><li>
<p>If the content type is not an <em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em> or an 
  <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>, each text value template is replaced by the
            concatenation of the serialization of the nodes that result from evaluating the template.</p>
<p>This serialization is performed with the following serialization parameters:</p>

<figure id="text-value-templates.11.2.3" class="informaltable-wrapper"><div class="informaltable"><table border="0" style="border-collapse: collapse;border-top: 1px solid ; border-bottom: 1px solid ; border-left: 1px solid ; border-right: 1px solid ; "><colgroup><col class="tcol1" width="50%"/><col class="tcol2" width="50%"/></colgroup><thead><tr><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Parameter</th><th style="border-bottom: 1px solid ; ">Value</th></tr></thead><tbody><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">byte-order-mark</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">cdata-section-elements</code></td><td style="border-bottom: 1px solid ; ">()</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">doctype-public</code></td><td style="border-bottom: 1px solid ; ">()</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">doctype-system</code></td><td style="border-bottom: 1px solid ; ">()</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">encoding</code></td><td style="border-bottom: 1px solid ; ">“utf-8”</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">escape-uri-attributes</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">include-content-type</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">indent</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">media-type</code></td><td style="border-bottom: 1px solid ; ">“application/xml”</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">method</code></td><td style="border-bottom: 1px solid ; ">“xml”</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">normalization-form</code></td><td style="border-bottom: 1px solid ; ">()</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">omit-xml-declaration</code></td><td style="border-bottom: 1px solid ; ">true</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">standalone</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">undeclare-prefixes</code></td><td style="border-bottom: 1px solid ; ">false</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="option">use-character-maps</code></td><td style="border-bottom: 1px solid ; ">()</td></tr><tr><td style="border-right: 1px solid ; "><code class="option">version</code></td><td>1.0</td></tr></tbody></table></div></figure>

</li></ol></div>

<p>Interpretation of the character content of the <a href="#p.inline"><code class="tag-element">p:inline</code></a>
according to the media type occurs after text value templates have been
replaced.</p>

<section id="text-value-templates.13" class="simplesect"><div class="section-titlepage"><h4>Examples</h4></div><div class="content">


<p>Consider the following examples. In each case:</p>

<div class="itemizedlist">


<ul><li>
<p>The variable <code class="code">$name</code>
is bound to the following XML element:</p>

<pre class="programlisting language-markup xml"><code>  &lt;name&gt;&lt;given&gt;Mary&lt;/given&gt; &lt;surname&gt;Smith&lt;/surname&gt;&lt;/name&gt;</code></pre>
</li><li>
<p>The result of evaluating the text value template
“<code class="code">{$name/node()}</code>” is a sequence of three nodes, the given
name element, a text node containing a single space, and the surname
element.</p>
</li></ul></div>

<p>If the media type is an XML media type:</p>

<pre class="programlisting language-markup xml"><code>  &lt;p:inline content-type="application/xml"&gt;
    &lt;attribution&gt;{$name/node()}&lt;/attribution&gt;
  &lt;/p:inline&gt;</code></pre>

<p>the result is that sequence of nodes:</p>

<pre class="programlisting language-markup xml"><code>  &lt;attribution&gt;&lt;given&gt;Mary&lt;/given&gt; &lt;surname&gt;Smith&lt;/surname&gt;&lt;/attribution&gt;</code></pre>

<p>If the media type is not an XML media type:</p>

<pre class="programlisting language-markup xml"><code>  &lt;p:inline content-type="application/json"&gt;
    {{ "name": "{$name/node()}" }}
  &lt;/p:inline&gt;</code></pre>

<p>the result is the concatenation of the serialization of the nodes:</p>

<pre class="programlisting language-javascript javascript"><code>  { "name": "&lt;given&gt;Mary&lt;/given&gt; &lt;surname&gt;Smith&lt;/surname&gt;" }</code></pre>

<p>If the string value is desired, instead of escaped markup, write the
expression such that it returns the string values:</p>

<pre class="programlisting language-markup xml"><code>  &lt;p:inline content-type="application/json"&gt;
    {{ "name": "{$name/node()/string()}" }}
  &lt;/p:inline&gt;</code></pre>

<p>To produce:</p>

<pre class="programlisting language-javascript javascript"><code>  { "name": "Mary Smith" }</code></pre>

</div></section>
</div></section>
</div></section>

  <section id="variables-options-background" class="section"><div class="section-titlepage"><h2><bdi class="secno">11. </bdi>Variables and Options<a aria-label="§" class="self-link" href="#variables-options-background"/></h2></div><div class="content">
    

    <section id="variables" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.1. </bdi>Variables<a aria-label="§" class="self-link" href="#variables"/></h3></div><div class="content">
      

      <p>Pipeline authors can create variables to hold computed values.</p>

      <p>
        <span id="dt-variable" class="termdef">[Definition: A <em class="glossterm">variable</em> is a name/value pair. The name
            <span class="rfc2119" id="dt-variable.2">must</span> be an <a href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
            name</a>. The value may be any XPath data model value.]</span>
Variable names are always expressed as
        literal values, pipelines cannot construct variable names dynamically.
      </p>

      <p>The names of variables and options are not distinct and are lexically scoped. <span id="dt-shadow" class="termdef">[Definition: We
          say that a variable <em class="glossterm">shadows</em> another variable (or option) if it has
          the same name and appears later in the same lexical scope.]</span></p>

      <p>Consider this pipeline:</p>

      <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema" version="3.0"&gt;
  
  &lt;p:option name="bname" as="xs:integer" select="1"/&gt;
  &lt;p:identity message="NAME1={$bname}"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:empty/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:identity&gt;
  
  
  &lt;p:variable name="bname" select="$bname + 1"/&gt;
  &lt;p:identity message="NAME2={$bname}"/&gt;
  
  &lt;p:variable name="bname" select="7"/&gt;
  &lt;p:identity message="NAME3={$bname}"/&gt;
  
&lt;/p:declare-step&gt;</code></pre>

      <p>If no overriding value is provided for <code class="varname">$bname</code> at runtime, the pipeline will produce three
        messages: “NAME1=1”, “NAME2=2”, and “NAME3=7”. (If an overriding value is provided at runtime, “NAME1” will have
        that value, “NAME2” will have one more than that value, and “NAME3” will have the value 7. </p>

    </div></section>

    <section id="options" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.2. </bdi>Options<a aria-label="§" class="self-link" href="#options"/></h3></div><div class="content">
      

      <p>Some steps accept options. The value of an option is the default value
        specified in its declaration, or a value provided by the caller of the step (overriding the default). If it has
        neither a default value nor a provided value, its value is the empty sequence.</p>

      <p><span id="dt-option" class="termdef">[Definition: An <em class="glossterm">option</em> is a name/value pair. The name
            <span class="rfc2119" id="dt-option.2">must</span> be an <a href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
            name</a>. The value may be any XPath data model value.]</span> Option names are always expressed as
        literal values, pipelines cannot construct option names dynamically. </p>

      <p><span id="impl-24">How outside values are specified for pipeline options on the pipeline initially invoked by the
          processor is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> In other words, the command line options,
        APIs, or other mechanisms available to specify such options values are outside the scope of this
        specification.</p>

      <p>Some steps require a set of name/value pairs for the operations they perform. For example, an XSLT
        stylesheet might have required parameters or an XQuery query might have external variables. In the XProc Step
        Library, the standard way to pass such values to the step is to use an option named
          “<code class="literal">parameters</code>” whose value is a map.</p>
    </div></section>

    <section id="statics" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.3. </bdi>Static Options<a aria-label="§" class="self-link" href="#statics"/></h3></div><div class="content">
      

      <p>A <a href="#p.option"><code class="tag-element">p:option</code></a> may be declared “static”; options declared within a <a href="#p.library"><code class="tag-element">p:library</code></a> <span class="rfc2119" id="statics.2.3">must</span>
      be static.</p>
      <p><a id="err.inline.S0109"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0109"><code class="errqname">err:XS0109</code></a>) if options that are the direct children of 
        <a href="#p.library"><code class="tag-element">p:library</code></a> are not declared “static”.</p>
      <p>The values of static options are computed during <a href="#initiating">static
          analysis</a>.</p>

      <p>XProc defines a single, global scope for static options. Every static option must have exactly one
      in-scope declaration.</p>
    </div></section>

    <section id="varopt-types" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.4. </bdi>Variable and option types<a aria-label="§" class="self-link" href="#varopt-types"/></h3></div><div class="content">
      

      <p>Variables and options may declare that they have a type using the <code class="tag-attribute">as</code> attribute.
        The attribute value <span class="rfc2119" id="varopt-types.2.2">must</span> be an [<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>]
        <a href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence type</a>. <a id="err.inline.S0096"/>It
          is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0096"><code class="errqname">err:XS0096</code></a>) if the sequence type is not syntactically valid. The sequence
        type <code class="literal">item()*</code> is assumed if no explicit type is provided. </p>

      <p>If a variable or option declares a type, the supplied value of the variable or option is converted to the
        required type, using the function conversion rules specified by XPath 3.1. <a id="err.inline.D0036"/>It is a
            <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0036"><code class="errqname">err:XD0036</code></a>) if the supplied or defaulted value of a variable or option cannot be converted to
          the required type.</p>
      
    </div></section>
    
    <section id="implicit-casting" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.5. </bdi>Implicit casting<a aria-label="§" class="self-link" href="#implicit-casting"/></h3></div><div class="content">
      

      <p>For the most part, the rules for casting between types in XPath work the way authors expect.
      You can type “3” for a decimal, you don’t have to type “3.0”, and an untyped atomic value, for example in
      an attribute such as <code class="code">limit="3"</code>, is implicitly cast to a number if that’s the required type.
      You don’t have to type <code class="code">limit="{xs:integer(3)}"</code>.</p>

      <p>Unfortunately, there are two common cases in XProc
      that are not handled by the XPath conversion rules: conversions
      from strings to QNames or URIs. (Technically, conversions
      from <code class="type">xs:untypedAtomic</code> or <code class="type">xs:string</code>, or from types
      derived from <code class="type">xs:string</code>, values to
      <code class="type">xs:QName</code> or <code class="type">xs:anyURI</code> values.) XProc
      defines additional implicit casting rules for the case where an expression is evaluated
      to provide the value of a variable or option. (These are not extensions to the XPath rules in the
      general case and do not apply in arbitrary expressions.)</p>

      <section id="qname-handling" class="section"><div class="section-titlepage"><h4><bdi class="secno">11.5.1. </bdi>Special rules for casting QNames<a aria-label="§" class="self-link" href="#qname-handling"/></h4></div><div class="content">
        
      
      <p>Some steps have options whose values are QNames, for example “<code class="tag-attribute">attribute-name</code>”
        on <code class="tag-element">p:add-attribute</code>. If the type <code class="type">xs:QName</code> was strictly enforced, they would be tedious to
        specify. As a convenience for pipeline authors, the values of variables or options declared with the type
        <code class="type">xs:QName</code> are processed specially. The type <code class="type">xs:QName</code> is treated as
        <code class="type">xs:anyAtomicType</code> for the purpose of atomization. The value (or values) are converted to
        <code class="type">xs:QName</code>s:</p>
      
      <div class="orderedlist">
        
        
        
      <ol style="list-style: decimal;"><li>
          <p>If the value supplied for the option is an instance of <code class="type">xs:QName</code> then that value is used.
          </p>
        </li><li>
          <p>If the value supplied for the option is an instance of <code class="type">xs:untypedAtomic</code> or
            <code class="type">xs:string</code> (or a type derived from
            <code class="type">xs:string</code>), the QName is constructed by following the <a href="https://www.w3.org/TR/xpath-31/#doc-xpath31-EQName">EQName production rules</a> in
            [<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>]. That is, it can be written as a local-name only, as a prefix plus
            local-name, or as a URI qualified name (using the <code class="code">Q{namespace}local-name</code> syntax). If it
            is written as local-name only, the constructed QName will not have a namespace URI, i.e. the default 
            namespace is not applied here. <a id="err.inline.D0061.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0061"><code class="errqname">err:XD0061</code></a>) if the string value is not syntactically an
              EQName.
            <a id="err.inline.D0069"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0069"><code class="errqname">err:XD0069</code></a>) if the string value contains a colon and
              the designated prefix is not declared in the in-scope namespaces.
          </p>
        </li><li>
          <p>
            <a id="err.inline.D0068"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0068"><code class="errqname">err:XD0068</code></a>) if the supplied value is not
              an instance of <code class="type">xs:QName</code>, <code class="type">xs:anyAtomicType</code>,  <code class="type">xs:string</code>
              or a type derived from <code class="type">xs:string</code>.
          </p>
        </li></ol></div>
      
      <p>As an additional convenience, if the specified sequence type of an option or a variable is a map with
        <code class="type">xs:QName</code> keys (<code class="type">map(xs:QName, …)</code>), the supplied map value is processed specially.
        This makes it possible to pass in maps using (easier to write) <code class="type">xs:string</code> type keys that are
        converted automatically into the required <code class="type">xs:QName</code> keys.</p>
      <p>Every key/value pair in a map supplied to a variable or an option with sequence type <code class="type">map(xs:QName,
        …)</code> is processed as follows:</p>
      <div class="itemizedlist">
        
        
        
      <ul><li>
          <p>If the entry’s key is of type <code class="type">xs:QName</code>, the entry is left unchanged.</p>
        </li><li>
          <p>If the entry’s key is an instance of type <code class="type">xs:untypedAtomic</code> or <code class="type">xs:string</code>
            (or a type derived from
            <code class="type">xs:string</code>) it is transformed into an <code class="type">xs:QName</code> using the <a href="https://www.w3.org/TR/xpath-31/#doc-xpath31-EQName">XPath EQName production rules</a> as
            described above.</p>
        </li><li>
          <p>If the entry’s key is of any other type, the entry is ignored and will be removed from the map.</p>
        </li></ul></div>
    </div></section>

    <section id="handling-uris" class="section"><div class="section-titlepage"><h4><bdi class="secno">11.5.2. </bdi>Special rules for casting URIs<a aria-label="§" class="self-link" href="#handling-uris"/></h4></div><div class="content">
      

      <p>Many steps have options whose values are <code class="type">xs:anyURI</code> values,
      for example “<code class="tag-attribute">href</code>”
        on <code class="tag-element">p:http-request</code>. If the type <code class="type">xs:anyURI</code> was strictly enforced, they would be tedious to
        specify. As a convenience for pipeline authors, the values of variables or options declared with the type
        <code class="type">xs:anyURI</code> are processed specially. The value (or values) are converted to
        <code class="type">xs:anyURI</code>s:</p>

      <div class="orderedlist">
        
        
      <ol style="list-style: decimal;"><li>
          <p>If the value supplied for the option is an instance of <code class="type">xs:anyURI</code> then that value is used.
          </p>
        </li><li>
          <p>If the value supplied for the option is an instance of <code class="type">xs:untypedAtomic</code> or
           <code class="type">xs:string</code> (or a type derived from
            <code class="type">xs:string</code>), the <code class="type">xs:anyURI</code> is constructed by casting the value
            to an <code class="type">xs:anyURI</code>.
          </p>
        </li></ol></div>

      <p>The XPath rules for casting string values to URIs apply:
      <span id="impl-25">The extent to which an implementation validates the lexical form of the
      <code class="type">xs:anyURI</code> is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
      </p>
    </div></section>
    </div></section>

    <section id="opt-bindings" class="section"><div class="section-titlepage"><h3><bdi class="secno">11.6. </bdi>Namespaces on variables and options<a aria-label="§" class="self-link" href="#opt-bindings"/></h3></div><div class="content">
      

      <p>Variable and option values carry with them not only their literal or computed value but also a set of
        namespaces. To see why this is necessary, consider the following step:</p>
      <pre class="programlisting language-markup xml"><code>&lt;p:delete xmlns:p="http://www.w3.org/ns/xproc"&gt;
  &lt;p:with-option name="match" select="'html:div'"
	         xmlns:html="http://www.w3.org/1999/xhtml"/&gt;
&lt;/p:delete&gt;</code></pre>
      <p>The <code class="tag-element">p:delete</code> step will delete elements that match the expression “<code class="literal">html:div</code>”,
        but that expression can only be correctly interpreted if there’s a namespace binding for the prefix
          “<code class="literal">html</code>” so that binding has to travel with the option.</p>

      <p>The default namespace bindings associated with a variable or option value are computed as follows:</p>
      <div class="orderedlist">

        
        
        
      <ol style="list-style: decimal;"><li>
          <p>If the <code class="tag-attribute">select</code> attribute was used to specify the value and it consisted of a
            single <code class="literal">VariableReference</code> (per [<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>]), then the namespace
            bindings from the referenced option or variable are used.</p>
        </li><li>
          <p>If the <code class="tag-attribute">select</code> attribute was used to specify the value and it evaluated to a
            node-set, then the in-scope namespaces from the first node in the selected node-set (or, if it’s not an
            element, its parent) are used.</p>
          <p>The expression is evaluated in the appropriate context, See <a href="#xpath-context" title="XPath in XProc">Section 7.2.2, “XPath in XProc”</a>.</p>
        </li><li>
          <p>Otherwise, the in-scope namespaces from the element providing the value are used. (For options specified
            using <a href="#option-shortcut">syntactic shortcuts</a>, the step element itself is providing the
            value.)</p>
        </li></ol></div>
      <p>The default namespace is never included in the namespace bindings for a variable or option value.
        Unqualified names are always in no-namespace.</p>
      <p>Unfortunately, in more complex situations, there may be no single variable or option that can reliably be
        expected to have the correct set of namespace bindings. Consider this pipeline:</p>
      <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
	        xmlns:ex="http://example.org/ns/ex"
	        xmlns:h="http://www.w3.org/1999/xhtml"
                type="ex:delete-in-div" version="3.0"&gt;
&lt;p:input port="source"/&gt;
&lt;p:output port="result"/&gt;
&lt;p:option name="divchild" required="true"/&gt;

&lt;p:delete&gt;
  &lt;p:with-option name="match" select="concat('h:div/',$divchild)"/&gt;
&lt;/p:delete&gt;

&lt;/p:declare-step&gt;</code></pre>
      <p>It defines an atomic step (“<code class="literal">ex:delete-in-div</code>”) that deletes elements that occur inside of
        XHTML div elements. It might be used as follows:</p>

      <pre class="programlisting language-markup xml"><code>&lt;ex:delete-in-div xmlns:p="http://www.w3.org/ns/xproc"
                  xmlns:ex="http://example.org/ns/ex"
		  xmlns:html="http://www.w3.org/1999/xhtml"
    divchild="html:p[@class='delete']"/&gt;</code></pre>

      <p>In this case, the <code class="varname">match</code> option passed to the <code class="tag-element">p:delete</code> step needs
          <em>both</em> the namespace binding of “<code class="literal">h</code>” specified in the
          <code class="tag-element">ex:delete-in-div</code> pipeline definition <em>and</em> the namespace binding of
          “<code class="literal">html</code>” specified in the <code class="varname">divchild</code> option on the call of that pipeline.
        It’s not sufficient to provide just one of the sets of bindings.</p>

      <p>If pipeline authors cannot arrange for all of the necessary namespace bindings to be in scope, then EQNames
        can be used to remove the dependency on namespace bindings:</p>

      <pre class="programlisting language-markup xml"><code>&lt;ex:delete-in-div xmlns:p="http://www.w3.org/ns/xproc"
                  xmlns:ex="http://example.org/ns/ex"
    divchild="q{http://www.w3.org/1999/xhtml}p[@class='delete']"/&gt;</code></pre>

      <p>In this example, the expression will match “<code class="literal">p</code>” elements in the XHTML namespace
        irrespective of any bindings that may or may not be in scope.</p>

    </div></section>

  </div></section>

    <section id="security-considerations" class="section"><div class="section-titlepage"><h2><bdi class="secno">12. </bdi>Security Considerations<a aria-label="§" class="self-link" href="#security-considerations"/></h2></div><div class="content">
      
      <p>An XProc pipeline may attempt to access arbitrary network resources: steps such as
          <code class="tag-element">p:load</code> and <code class="tag-element">p:http-request</code> can attempt to read from an arbitrary URI;
        steps such as <code class="tag-element">p:store</code> can attempt to write to an arbitrary location;
          <code class="tag-element">p:exec</code> can attempt to execute an arbitrary program. Note, also, that some
        steps, such as <code class="tag-element">p:xslt</code> and <code class="tag-element">p:xquery</code>, include extension mechanisms which
        may attempt to execute arbitrary code. </p>
      <p>In some environments, it may be inappropriate to provide the XProc pipeline with access
        to these resources. In a server environment, for example, it may be impractical to allow
        pipelines to store data. In environments where the pipeline cannot be trusted, allowing the
        pipeline to access arbitrary resources or execute arbitrary code may be a security
        risk.</p>
      <p><a id="err.inline.D0021"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0021"><code class="errqname">err:XD0021</code></a>) for a pipeline to
          attempt to access a resource for which it has insufficient privileges or perform a step
          which is forbidden.
        <span id="impl-26">Which steps are forbidden, what privileges are needed to access resources, and under
          what circumstances these security constraints apply is
            <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
      </p>
      <p>Steps in a pipeline may call themselves recursively which could result in pipelines
        which will never terminate.</p>
      <p>A conformant XProc processor may limit the resources available to any or all steps in a
        pipeline. A conformant implementation may raise dynamic errors, or take any other corrective
        action, for any security problems that it detects.</p>
    </div></section>

<section id="versioning-considerations" class="section"><div class="section-titlepage"><h2><bdi class="secno">13. </bdi>Versioning Considerations<a aria-label="§" class="self-link" href="#versioning-considerations"/></h2></div><div class="content">


<p>A pipeline author <span class="rfc2119" id="versioning-considerations.2.1">may</span> identify the version of XProc
for which a particular pipeline was authored by setting the
<code class="tag-attribute">version</code> attribute. The
<code class="tag-attribute">version</code> attribute can be specified on
<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> or <a href="#p.library"><code class="tag-element">p:library</code></a>.
If specified, the value of
the <code class="tag-attribute">version</code> attribute <span class="rfc2119" id="versioning-considerations.2.7">must</span> be a
<code class="type">xs:decimal</code>. <a id="err.inline.S0063"/>It is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0063"><code class="errqname">err:XS0063</code></a>) if the value of the
<code class="tag-attribute">version</code> attribute is not a
<code class="type">xs:decimal</code>.</p>

<p>The version of XProc defined
by this specification is “<code class="literal">3.0</code>”.</p>

<p>A pipeline author <span class="rfc2119" id="versioning-considerations.4.1">must</span> identify the version of XProc
on the document element of a pipeline document.
<a id="err.inline.S0062"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0062"><code class="errqname">err:XS0062</code></a>) if a
required
<code class="tag-attribute">version</code> attribute
is not present.</p>

<p>The version identified applies
to the element on which the
<code class="tag-attribute">version</code> attribute appears and all of its descendants,
unless or until another version is explicitly identified.</p>

<p>XProc 3.0 takes a draconian approach to versioning.
<a id="err.inline.S0060"/>It
is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0060"><code class="errqname">err:XS0060</code></a>) if the processor encounters
an explicit request for a version of the language other than “3.0”.
</p>
      </div></section>


  <section id="syntax" class="section"><div class="section-titlepage"><h2><bdi class="secno">14. </bdi>Syntax Overview<a aria-label="§" class="self-link" href="#syntax"/></h2></div><div class="content">
    
    <p>This section describes the normative XML syntax of XProc. This syntax is sufficient to
      represent all the aspects of a pipeline, as set out in the preceding sections. <span id="dt-XML" class="termdef">[Definition: XProc is intended to work equally well with [<a href="#xml10"><span class="abbrev">XML 1.0</span></a>] and
          [<a href="#xml11"><span class="abbrev">XML 1.1</span></a>]. Unless otherwise noted, the term
        “<em class="glossterm">XML</em>” refers equally to both versions.]</span>
      <span id="dt-Namespaces-in-XML" class="termdef">[Definition: Unless otherwise noted, the term <em class="glossterm">Namespaces
          in XML</em> refers equally to [<a href="#xmlns10"><span class="abbrev">Namespaces 1.0</span></a>] and [<a href="#xmlns11"><span class="abbrev">Namespaces 1.1</span></a>].]</span>
      <span id="impl-27">Support for pipeline documents written in XML 1.1 and pipeline inputs and outputs that
        use XML 1.1 is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
    </p>
    <p>Elements in a pipeline document represent the pipeline, the steps it contains, the
      connections between those steps, the steps and connections contained within them, and so on.
      Each step is represented by an element; a combination of elements and attributes specify how
      the inputs and outputs of each step are connected and how options are
      passed. Outside of inline documents (<a href="#p.inline"><code class="tag-element">p:inline</code></a> elements explicitly or implicitly),
text nodes that consist entirely of whitespace and XML comments are ignored. XML processing instructions are
also generally ignored. <span id="impl-28">It is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> if any processing instructions are significant
to an implementation.</span> In an inline document, all markup is treated as if it was a quoted
part of the inline document and no special semantics apply except as noted elsewhere in this
specification.</p>
    <p>Conceptually, we can speak of steps as objects that have inputs and outputs, that are
      connected together and which may contain additional steps. Syntactically, we need a mechanism
      for specifying these relationships.</p>
    <p><em class="glossterm"><a href="#dt-container">Containment</a></em> is represented naturally using
      nesting of XML elements. If a particular element identifies a <em class="glossterm"><a href="#dt-compound-step">compound
        step</a></em> then the step elements that are its immediate children form its
        <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>.</p>
    <p>The connections between steps are expressed using names and references to those
      names.</p>
    <section id="namespaces" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.1. </bdi>XProc Namespaces<a aria-label="§" class="self-link" href="#namespaces"/></h3></div><div class="content">
      
      <p>There are three namespaces associated with XProc:</p>
      <div class="variablelist">
        
        
        
      <dl><dt><span class="term"><code class="uri">http://www.w3.org/ns/xproc</code></span></dt><dd>
            <p>The namespace of the XProc XML vocabulary described by this specification; by
              convention, the namespace prefix “<code class="literal">p:</code>” is used for this
              namespace.</p>
          </dd><dt><span class="term"><code class="uri">http://www.w3.org/ns/xproc-step</code></span></dt><dd>
            <p>The namespace used for documents that are inputs to and outputs from several
              standard and optional steps described in this specification. Some steps, such as
                <code class="tag-element">p:http-request</code> and <code class="tag-element">p:store</code>, have defined input or output
              vocabularies. We use this namespace for all of those documents. The conventional
              prefix “<code class="literal">c:</code>” is used for this namespace.</p>
          </dd><dt><span class="term"><code class="uri">http://www.w3.org/ns/xproc-error</code></span></dt><dd>
            <p>The namespace used for errors. The conventional prefix “<code class="literal">err:</code>”
              is used for this namespace. </p>
          </dd></dl></div>
      <p>This specification also makes use of the prefix “<code class="literal">xs:</code>” to refer to the
          [<a href="#xmlschema-1"><span class="abbrev">W3C XML Schema: Part 1</span></a>] namespace <code class="uri">http://www.w3.org/2001/XMLSchema</code> and the prefix “<code class="literal">xsi:</code>”
          to refer to the namespace <code class="uri">http://www.w3.org/2001/XMLSchema-instance</code>
      </p>
    </div></section>
    <section id="scoping" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.2. </bdi>Scoping of Names<a aria-label="§" class="self-link" href="#scoping"/></h3></div><div class="content">
      

<p>Names are used to identify step types, steps, ports, options and
variables. Step types, options, and variables are named with EQNames.
Steps and ports are named with NCNames. The scope of a name is a
measure of where it is available in a pipeline. <span id="dt-visible" class="termdef">[Definition: If two names are in the same scope, we say that
they are <em class="glossterm">visible</em> to each other.]</span></p>

<p>Within a <a href="#p.library"><code class="tag-element">p:library</code></a>, declaring that the
<code class="tag-attribute">visibility</code> of a step or static option is
“<code class="code">private</code>” limits its visibility outside of the library.
Note, however, that if other declarations of the same name are visible
from the point where the private declaration occurs, that is still
an error.</p>

<section id="scoping.4" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.2.1. </bdi>Scoping of step type names<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
  
      <p>The scope of the names of the step types is the pipeline in which they are declared,
        including any declarations imported from libraries via <a href="#p.import"><code class="tag-element">p:import</code></a>. Nested pipelines
        inherit the step types in scope for their parent.</p>
      <p>In other words, the step types that are in scope in a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> are:</p>
      <div class="itemizedlist">
        
        
        
        
        
        
        
      <ul><li>
          <p>The standard, built-in types (<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, <a href="#p.choose"><code class="tag-element">p:choose</code></a>, etc.).
          </p>
        </li><li>
          <p>Any implementation-provided types. </p>
        </li><li>
          <p>Any step types declared in the <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> children of the pipeline element. </p>
        </li><li>
          <p>The types of any <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>s that are
            imported. </p>
        </li><li>
          <p>Any public types that are in the scope of any <a href="#p.library"><code class="tag-element">p:library</code></a> that is imported.
          </p>
        </li><li>
          <p>Any step types that are in scope for the pipeline’s parent
              <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, if it has one. </p>
        </li><li>
          <p>The type of the pipeline itself, if it has one. </p>
        </li></ul></div>
      <p>The step types that are in scope in a <a href="#p.library"><code class="tag-element">p:library</code></a> are:</p>
      <div class="itemizedlist">
        
        
        
        
        
      <ul><li>
          <p>The standard, built-in types (<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, <a href="#p.choose"><code class="tag-element">p:choose</code></a>, etc.).
          </p>
        </li><li>
          <p>Any implementation-provided types. </p>
        </li><li>
          <p>Any step types declared in the library (the
              <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> children of the <a href="#p.library"><code class="tag-element">p:library</code></a> element). </p>
        </li><li>
          <p>The types of <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>s that are imported
            into the library.</p>
        </li><li>
          <p>Any public types that are in the scope of any <a href="#p.library"><code class="tag-element">p:library</code></a> that is imported.
          </p>
        </li></ul></div>
      <p><a id="err.inline.S0036"/>All the step types in a pipeline or library <span class="rfc2119" id="scoping.4.7.1.1">must</span>
          have unique names: it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0036"><code class="errqname">err:XS0036</code></a>) if any step type name is
          built-in and/or declared or defined more than once in the same scope.</p>
</div></section>
      
<section id="scoping.5" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.2.2. </bdi>Scoping of step names<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
  
<p>The scope of the names of the steps (the values of the step’s <code class="code">name</code> attributes) is determined by
the <em class="glossterm"><a href="#dt-environment">environment</a></em> of each step. In general, the
name of a step, the names of its sibling steps, the names of any steps
that it contains directly, the names of its ancestors, and the names
of the siblings of its ancestors are all in a common scope. <a id="err.inline.S0002"/>All steps in the same scope <span class="rfc2119" id="scoping.5.2.3.1">must</span> have
unique names: it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0002"><code class="errqname">err:XS0002</code></a>) if two steps
with the same name appear in the same scope.</p>
</div></section>
<section id="scoping.6" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.2.3. </bdi>Scoping of port names<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
  
<p>The scope of an input or output port name is the step on which
it is defined. The names of all the ports on any step
<span class="rfc2119" id="scoping.6.2.1">must</span> be unique.</p>
      
<p>Taken together with the scoping of step names, these uniqueness constraints guarantee that the
combination of a step name and a port name uniquely identifies exactly
one port on exactly one in-scope step.</p>
</div></section>
      
<section id="scoping.7" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.2.4. </bdi>Scoping of non-static options and variables<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
  
<p>The scope of non-static option and variable names is determined by where
they are declared. Their scope consists of the sibling elements that follow its
declaration and the descendants of those siblings.
</p>
<p>Non-static options and variables declared in parent step declarations are not visible in child step declarations.</p>
</div></section>
      
<section id="scoping.8" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.2.5. </bdi>Scoping of static option names<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
  

<p>The scope of the names of static options is the pipeline in
which they are declared, including any declarations imported from
libraries via <a href="#p.import"><code class="tag-element">p:import</code></a>. Nested pipelines inherit the static
options in scope for their parent.</p>

<p>In other words, the step options that are in scope in a
<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> are:</p>

<div class="itemizedlist">
  
  
  
<ul><li>
    <p>Any static options declared in the step.</p>
  </li><li>
    <p>Any public static options that are in the scope of any
    <a href="#p.library"><code class="tag-element">p:library</code></a> that is imported.
    </p>
  </li><li>
    <p>Any static options that are in scope for the pipeline’s parent
    <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, if it has one.</p>
  </li></ul></div>

<p>The static options that are in scope in a <a href="#p.library"><code class="tag-element">p:library</code></a>
are:</p>

<div class="itemizedlist">
  
  
<ul><li>
    <p>Any static options declared in the library (the
    <a href="#p.option"><code class="tag-element">p:option</code></a> children of the <a href="#p.library"><code class="tag-element">p:library</code></a>
    element).</p>
  </li><li>
    <p>Any public static options that are in the scope of any
    <a href="#p.library"><code class="tag-element">p:library</code></a> that is imported.
    </p>
  </li></ul></div>

<p><a id="err.inline.S0071"/>All the static options in a pipeline or
library <span class="rfc2119" id="scoping.8.7.1.1">must</span> have unique names: it is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0071"><code class="errqname">err:XS0071</code></a>) if any static option name is
declared more than once in the same scope.</p>
</div></section>
      
</div></section>
    
  
  
    <section id="xml-base-attribute" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.3. </bdi>Base URIs and xml:base<a aria-label="§" class="self-link" href="#xml-base-attribute"/></h3></div><div class="content">
      

<p>If a relative URI appears in an option of type <code class="type">xs:anyURI</code>,
the base URI against which it <span class="rfc2119" id="xml-base-attribute.2.2">must</span> be made absolute is the base
URI of the <a href="#p.option"><code class="tag-element">p:option</code></a> element. If the option value is
specified using a <a href="#option-shortcut">syntactic
shortcut</a>, the base URI of the step element on which the shortcut
attribute appears <span class="rfc2119" id="xml-base-attribute.2.5">must</span> be used. In general,
whenever a relative URI appears in an <code class="type">xs:anyURI</code>,
its base URI is the base URI of the nearest ancestor element.</p>

<p>The pipeline author can control the base URIs of elements within
the pipeline document with the <code class="tag-attribute">xml:base</code>
attribute. The <code class="tag-attribute">xml:base</code> attribute
<span class="rfc2119" id="xml-base-attribute.3.3">may</span> appear on any element in a pipeline and has the
semantics outlined in [<a href="#xml-base"><span class="abbrev">XML Base</span></a>].</p>

<p>For XML documents, HTML documents, and text documents, the pipeline author 
can control the base URI of the document node by manipulating the document property 
“<code class="code">base-uri</code>”.</p>

</div></section>
    <section id="xml-id-attribute" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.4. </bdi>Unique identifiers<a aria-label="§" class="self-link" href="#xml-id-attribute"/></h3></div><div class="content">
      
      <p>A pipeline author can provide a globally unique identifier for any element in a pipeline
        with the <code class="tag-attribute">xml:id</code> attribute.</p>
      <p>The <code class="tag-attribute">xml:id</code> attribute <span class="rfc2119" id="xml-id-attribute.3.2">may</span> appear on any
        element in a pipeline and has the semantics outlined in [<a href="#xml-id"><span class="abbrev">xml:id</span></a>].</p>
    </div></section>

<section id="syntax-docs-ports" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.5. </bdi>Associating Documents with Ports<a aria-label="§" class="self-link" href="#syntax-docs-ports"/></h3></div><div class="content">


<p> A document or a sequence of documents can be connected to a
port in four ways: <em class="glossterm"><a href="#dt-by-source">by source</a></em>, <em class="glossterm"><a href="#dt-by-URI">by
URI</a></em>, by providing an <em class="glossterm"><a href="#dt-inline-document">inline
document</a></em>, or by making it
<em class="glossterm"><a href="#dt-empty-sequence">explicitly empty</a></em>.
Each of these mechanisms is allowed where connections may be made, except that
<a href="#p.input"><code class="tag-element">p:input</code></a> may not include a connection <em class="glossterm"><a href="#dt-by-source">by source</a></em>.</p>

<div class="variablelist">

        
        
        
      <dl><dt><span class="term">Specified by URI</span></dt><dd>
<p><span id="dt-by-URI" class="termdef">[Definition: A document is specified
<em class="glossterm">by URI</em> if it is referenced with a
URI.]</span> The <code class="tag-attribute">href</code> attribute on the
<a href="#p.document"><code class="tag-element">p:document</code></a> element is used to refer to
documents by URI.</p>
            <p>In this example, the input to the <code class="tag-element">p:identity</code> step named
                “<code class="literal">otherstep</code>” comes from “<code class="uri">http://example.com/input.xml</code>”. </p>
            <pre class="programlisting language-markup xml"><code>&lt;p:output port="result"/&gt;

&lt;p:identity name="otherstep"&gt;
  &lt;p:with-input port="source"&gt;
    &lt;p:document href="http://example.com/input.xml"/&gt;
  &lt;/p:with-input&gt;
&lt;/p:identity&gt;</code></pre>

            <p>See the description of <a href="#p.document"><code class="tag-element">p:document</code></a> for a complete description of how
            URIs may be specified.</p>
          </dd><dt><span class="term">Specified by source</span></dt><dd>
            <p><span id="dt-by-source" class="termdef">[Definition: A document is specified <em class="glossterm">by
                  source</em> if it references a specific port on another step.]</span> The
                <code class="tag-attribute">step</code> and <code class="tag-attribute">port</code> attributes
              on the <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> element are used for this purpose. </p>
            <p>In this example, the “<code class="literal">source</code>” input to the
                <code class="tag-element">p:xinclude</code> step named “<code class="literal">expand</code>” comes from the
                “<code class="literal">result</code>” port of the step named
              “<code class="literal">otherstep</code>”.</p>
            <pre class="programlisting language-markup xml"><code>&lt;!-- there's no otherstep so this isn't expected to work... --&gt;
&lt;p:xinclude name="expand"&gt;
  &lt;p:with-input port="source"&gt;
    &lt;p:pipe step="otherstep" port="result"/&gt;
  &lt;/p:with-input&gt;
&lt;/p:xinclude&gt;</code></pre>
            <p>See the description of <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> for a complete description of the ports
              that can be connected.</p>
          </dd><dt><span class="term">Specified inline</span></dt><dd>
            <p><span id="dt-inline-document" class="termdef">[Definition: An <em class="glossterm">inline document</em> is
                specified directly in the body of the element to which it connects.]</span> The
              content of the <a href="#p.inline"><code class="tag-element">p:inline</code></a> element is used for this purpose. </p>
            <p>In this example, the “<code class="literal">stylesheet</code>” input to the XSLT step named
                “<code class="literal">xform</code>” comes from the content of the <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> element
              itself.</p>
            <pre class="programlisting language-markup xml"><code>&lt;p:xslt name="xform"&gt;
  &lt;p:with-input port="stylesheet"&gt;
    &lt;p:inline&gt;
      &lt;xsl:stylesheet version="1.0"&gt;
        ...
      &lt;/xsl:stylesheet&gt;
    &lt;/p:inline&gt;
  &lt;/p:with-input&gt;
&lt;/p:xslt&gt;</code></pre>
            <p>Inline documents are considered “quoted”. The pipeline processor passes them
              literally to the port, even if they contain elements from the XProc namespace or other
              namespaces that would have other semantics outside of the <a href="#p.inline"><code class="tag-element">p:inline</code></a>.</p>

            <p>See the description of <a href="#p.inline"><code class="tag-element">p:inline</code></a> for a complete description of how
            inline documents may be specified.</p>
          </dd><dt><span class="term">Specified explicitly empty</span></dt><dd>
            <p><span id="dt-empty-sequence" class="termdef">[Definition: An <em class="glossterm">empty sequence</em> of
                documents is specified with the <a href="#p.empty"><code class="tag-element">p:empty</code></a> element.]</span>
            </p>
            <p>In this example, the “<code class="literal">source</code>” input to the XSLT 2.0 step named
                “<code class="literal">generate</code>” is explicitly empty:</p>
            <pre class="programlisting language-markup xml"><code>&lt;p:xslt name="generate" version="2.0"&gt;
  &lt;p:with-input port="source"&gt;
    &lt;p:empty/&gt;
  &lt;/p:with-input&gt;
  &lt;p:with-input port="stylesheet"&gt;
    &lt;p:inline&gt;
      &lt;xsl:stylesheet version="2.0"&gt;
        ...
      &lt;/xsl:stylesheet&gt;
    &lt;/p:inline&gt;
  &lt;/p:with-input&gt;
  &lt;p:with-option name="template-name" select="'someName'"/&gt;
&lt;/p:xslt&gt;</code></pre>
            <p>If you omit the connection on a primary input port, a connection to the
                <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> will be assumed. Making the connection
              explicitly empty guarantees that the connection will be to an empty sequence of
              documents.</p>
            <p>See the description of <a href="#p.empty"><code class="tag-element">p:empty</code></a> for a complete description of
            empty connections.</p>
          </dd></dl></div>
      <p>Note that a <a href="#p.input"><code class="tag-element">p:input</code></a>, <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>, or <a href="#p.output"><code class="tag-element">p:output</code></a> element may contain more than one
          <a href="#p.pipe"><code class="tag-element">p:pipe</code></a>, <a href="#p.document"><code class="tag-element">p:document</code></a>, or <a href="#p.inline"><code class="tag-element">p:inline</code></a>
        element. If more than one <em class="glossterm"><a href="#dt-connection">connection</a></em> is provided, then the specified
        sequence of documents is made available on that port in the same order as the
        connections.</p>
    </div></section>
    <section id="documentation" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.6. </bdi>Documentation<a aria-label="§" class="self-link" href="#documentation"/></h3></div><div class="content">
      
      <p>Pipeline authors may add documentation to their pipeline documents with the
          <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> element. Except when it appears as a descendant of
          <a href="#p.inline"><code class="tag-element">p:inline</code></a>, the <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> element is completely ignored by
        pipeline processors, it exists simply for documentation purposes. If a
          <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> is provided as a descendant of <a href="#p.inline"><code class="tag-element">p:inline</code></a>, it has no
        special semantics, it is treated literally as part of the document to be provided on that
        port. The <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> element has no special semantics when it appears in
        documents that flow through the pipeline.</p>
      <p>Pipeline processors that inspect the contents of <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> elements and
        behave differently on the basis of what they find are <em>not conformant</em>.
        Processor extensions <span class="rfc2119" id="documentation.3.3">must</span> be specified with <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a>.</p>
    </div></section>
    <section id="annotations" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.7. </bdi>Processor annotations<a aria-label="§" class="self-link" href="#annotations"/></h3></div><div class="content">
      
      <p>Pipeline authors may add annotations to their pipeline documents with the
          <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> element. <span id="impl-29">The semantics of <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> elements are
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> Processors
          <span class="rfc2119" id="annotations.2.3">should</span> specify a way for their annotations to be identified, perhaps
        with <a href="#extension-attributes">extension attributes</a>.</p>
      <p>Where <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> is intended for human consumption,
          <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> elements are intended for processor consumption. A processor might,
        for example, use annotations to identify some particular aspect of an implementation, to
        request additional, perhaps non-standard features, to describe parallelism constraints,
        etc.</p>
      <p>When a <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> appears as a descendant of <a href="#p.inline"><code class="tag-element">p:inline</code></a>, it has no
        special semantics; in that context it <span class="rfc2119" id="annotations.4.3">must</span> be treated literally as part
        of the document to be provided on that port. The <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> element has no
        special semantics when it appears in documents that flow through the pipeline. </p>
    </div></section>

    <section id="extension-attributes" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.8. </bdi>Extension attributes<a aria-label="§" class="self-link" href="#extension-attributes"/></h3></div><div class="content">
      
      <p><span id="dt-extension-attribute" class="termdef">[Definition: An element from the XProc namespace
            <span class="rfc2119" id="dt-extension-attribute.1">may</span> have any attribute not from the XProc namespace, provided that
          the expanded-QName of the attribute has a non-null namespace URI. Such an attribute is
          called an <em class="glossterm">extension attribute</em>.]</span>
      </p>
      <p>The presence of an extension attribute must not cause the connections between steps to
        differ from the connections that would arise in the absence of the attribute. They must not
        cause the processor to fail to signal an error that would be signaled in the absence of the
        attribute.</p>
      <p>A processor which encounters an extension attribute that it does not implement
          <span class="rfc2119" id="extension-attributes.4.1">must</span> behave as if the attribute was not present.</p>
    </div></section>

<section id="common-attr" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.9. </bdi>Common Attributes<a aria-label="§" class="self-link" href="#common-attr"/></h3></div><div class="content">


<p>Several attributes can be used on any XProc step, or even any element in a pipeline.
For convenience, they are all summarized here.</p>

<p>Attributes from the XML namespace are allowed anywhere. In particular:</p>

<div class="itemizedlist">




<ul><li>
  <p>An <code class="tag-attribute">xml:id</code> attribute is allowed on any element. It has
  the semantics of [<a href="#xml-id"><span class="abbrev">xml:id</span></a>].</p>
</li><li>
  <p>An <code class="tag-attribute">xml:base</code> attribute is allowed on any element. It has
  the semantics of [<a href="#xml-base"><span class="abbrev">XML Base</span></a>].</p>
</li><li>
  <p>An <code class="tag-attribute">xml:lang</code> attribute is allowed on any element. It has
  the semantics of [<a href="#xml10"><span class="abbrev">XML 1.0</span></a>].</p>
</li><li>
  <p>An <code class="tag-attribute">xml:space</code> attribute is allowed on any element. It has
    the semantics of [<a href="#xml10"><span class="abbrev">XML 1.0</span></a>].</p>
</li></ul></div>

<p>The remaining attributes are sometimes in no namespace and sometimes
explicitly in the XProc namespace. They are in no namespace when they
appear on an XProc element; they are in the XProc namespace when they
are on an element in any other namespace. In this way, they do not
conflict with the names used in other vocabularies.
<a id="err.inline.S0097"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0097"><code class="errqname">err:XS0097</code></a>) if an
attribute in the XProc namespace appears on an element in the XProc
namespace.
</p>

<section id="expand-text-attribute" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.9.1. </bdi>Expand text attributes<a aria-label="§" class="self-link" href="#expand-text-attribute"/></h4></div><div class="content">


<p>The <code class="tag-attribute">[p:]expand-text</code> and
<code class="tag-attribute">[p:]inline-expand-text</code> attributes control
whether or not text and attribute nodes in descendant
<a href="#p.inline"><code class="tag-element">p:inline</code></a> elements and implicit inlines are designated as
value templates. Note that they control both text
<em>and</em> attribute value templates.</p>
  
<p>The <code class="tag-attribute">[p:]expand-text</code> attribute can
appear on all elements in the pipeline. It controls whether or not
descendant inlines are designated as value templates. If the
attribute <em>itself</em> appears
among the descendants of a <a href="#p.inline"><code class="tag-element">p:inline</code></a> (or implicit inline), then
it is a regular attribute and has no special semantics. In this case,
the <code class="tag-attribute">[p:]inline-expand-text</code> attribute comes
into play.
</p>
  
<p>The <code class="tag-attribute">[p:]inline-expand-text</code> attribute
appearing as descendant of a <a href="#p.inline"><code class="tag-element">p:inline</code></a> or in an implicit
inline is treated as a special attribute, with the same semantics as
the <code class="tag-attribute">[p:]expand-text</code> attribute. The
attribute will not be part of the result of the <a href="#p.inline"><code class="tag-element">p:inline</code></a> or
implicit inline.</p>

<p>If the <code class="tag-attribute">[p:]expand-text</code> or
<code class="tag-attribute">[p:]inline-expand-text</code> attribute appears on more
than one element among the ancestors of a text or attribute node in a
<a href="#p.inline"><code class="tag-element">p:inline</code></a> element or implicit inline, only the value on the
nearest ancestor is considered.</p>

<p>If the nearest <code class="tag-attribute">[p:]expand-text</code> or
<code class="tag-attribute">[p:]inline-expand-text</code> attribute has the
value “<code class="code">false</code>”, then the text and attribute nodes in a
<a href="#p.inline"><code class="tag-element">p:inline</code></a> element or implicit inline are not value
templates. If it has the value “<code class="code">true</code>”, or if no such
attribute is present among ancestors, then the text and attribute
nodes <em>are</em> value templates.</p>

<p>Neither <code class="tag-attribute">[p:]expand-text</code> nor
<code class="tag-attribute">[p:]inline-expand-text</code> are attribute value
templates themselves. <a id="err.inline.S0113"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0113"><code class="errqname">err:XS0113</code></a>)
if either <code class="tag-attribute">[p:]expand-text</code> or
<code class="tag-attribute">[p:]inline-expand-text</code> is to be interpreted
by the processor and it does not have the value “<code class="code">true</code>”
or “<code class="code">false</code>”.
</p>

</div></section>

<section id="use-when" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.9.2. </bdi>Conditional Element Exclusion<a aria-label="§" class="self-link" href="#use-when"/></h4></div><div class="content">


<p id="p.use-when">The <code class="tag-attribute">[p:]use-when</code> attribute controls whether or not
an element (and its descendants) appear in the pipeline. The value of
the attribute <span class="rfc2119" id="p.use-when.2">must</span> contain an XPath expression that
can be evaluated statically (See <a href="#statics" title="Static Options">Section 11.3, “Static Options”</a>.) <span id="dt-effectively-excluded" class="termdef">[Definition: If the effective boolean value of the
<code class="tag-attribute">[p:]use-when</code> expression is false, then
the element and all of its descendants are <em class="glossterm">effectively
excluded</em> from the pipeline document.]</span> If a node is
effectively excluded, the processor <span class="rfc2119" id="p.use-when.5">must</span> behave as
if the element was not present in the document.
</p>

<p>Conditional element exclusion occurs during <a href="#initiating">static analysis</a> of the pipeline.</p>

<div id="note-excl-use-when" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>The effective exclusion of <code class="tag-attribute">[p:]use-when</code>
processing occurs after XML parsing and has no effect on well-formedness
or validation errors which will be reported in the usual way.</p>
</div></div>

<p>Deadlock situations can arise if two or more 
<code class="tag-attribute">[p:]use-when</code> expressions depend on each other.
Consider, for example:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:declare-step type="ex:A" use-when="p:step-available('ex:B')"&gt;
  …
&lt;/p:declare-step&gt;

&lt;p:declare-step type="ex:B" use-when="p:step-available('ex:A')"&gt;
  …
&lt;/p:declare-step&gt;</code></pre>

<p>It is not possible for the processor to determine if
<code class="code">ex:A</code> should be declared without first determining if
<code class="code">ex:B</code> should be declared, and vice versa.</p>

<p><a id="err.inline.S0115"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0115"><code class="errqname">err:XS0115</code></a>)
if two or more elements are contained within a deadlocked network of
<code class="tag-attribute">[p:]use-when</code> expressions. In
order to avoid deadlock, there must exist an order in which every
expression can be resolved without reference to an expression that
occurs after it in the ordering.</p>

<p>Processors may be required to evaluate expressions in an
arbitrary order, but they are not required to solve a set of linear
equations simultaneously. So, while “declare both <code class="code">ex:A</code> and
<code class="code">ex:B</code>” is a valid solution to the example above,
conformant processors are not required (or allowed) to find it
because neither the order “A then B” nor the order “B then A” is
sufficient to find the solution.
</p>

</div></section>

<section id="depends" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.9.3. </bdi>Additional dependent connections<a aria-label="§" class="self-link" href="#depends"/></h4></div><div class="content">


<p id="p.depends">The <code class="tag-attribute">[p:]depends</code>
attribute can appear on any step invocation <em>except</em>
<a href="#p.when"><code class="tag-element">p:when</code></a>, <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a>, <a href="#p.catch"><code class="tag-element">p:catch</code></a>, and
<a href="#p.finally"><code class="tag-element">p:finally</code></a>. It adds an explicit
dependency between steps. The value of the attribute is a space
separated list of step names. <a id="err.inline.S0073"/>It is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0073"><code class="errqname">err:XS0073</code></a>) if any specified name is not the
name of an in-scope step.</p>

<p>In most pipelines, the dependencies that arise naturally
from the connections between steps are sufficient. If step “B”
consumes the output of step “A”, then clearly “A” must run before “B”.
However, it is sometimes the case that one step depends on
another in ways that are not apparent in the connections. Consider,
for example, a pipeline that interacts with two different web
services. It may very well be the case that one web service has to run
before the other, even though the latter does not consume any output
from the former.</p>

<p>When <code class="tag-attribute">[p:]depends</code> is used, if step
“Y” depends on step “X”, then “X” must run before “Y”.
</p>

<p>The connections specified by the
<code class="tag-attribute">[p:]depends</code> attribute apply
<em>in addition to</em> the dependencies that arise
naturally from connections between steps. Taken together with the
input and output connections, the graph must not contain any loops.
</p>

<p>The <code class="tag-attribute">[p:]depends</code> attribute is
forbidden from several elements because they are only conditionally evaluated.
The semantics of dependency are ambiguous at best in this case. Moving the dependency
to the parent element resolves this ambiguity.</p>
</div></section>

<section id="timeout" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.9.4. </bdi>Controlling long running steps<a aria-label="§" class="self-link" href="#timeout"/></h4></div><div class="content">


<p id="p.timeout">The <code class="tag-attribute">[p:]timeout</code>
attribute allows a pipeline author to suggest a length of time beyond
which the pipeline processor should consider that a step has taken
an excessive amount of time.</p>

<p>The value of the <code class="option">[p:]timeout</code> option must be a
<code class="type">xs:nonNegativeInteger</code>. It is interpreted as a number of
seconds. The value zero may be used to indicate that no limit is
expressed (this is the same as omitting the attribute, but may
sometimes be more convenient for pipeline authors).
</p>

<p><a id="err.inline.D0053"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0053"><code class="errqname">err:XD0053</code></a>)
if a step runs longer than its timeout value.</p>

<p>The precise amount of time a step takes to perform its task
depends on many factors (the hardware running the processor, the
processor’s execution strategy, the system load etc.) This feature can
not be used as an exact timing tool in XProc. Developers are advised
to calculate the value for <code class="tag-attribute">[p:]timeout</code>
generously, so the dynamic error is raised only in extreme cases.</p>

<p><span id="impl-30">It is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> whether a processor
supports timeouts, and if it does, how precisely and precisely how the
execution time of a step is measured.</span>
</p>
</div></section>

<section id="messages" class="section"><div class="section-titlepage"><h4><bdi class="secno">14.9.5. </bdi>Status and debugging output<a aria-label="§" class="self-link" href="#messages"/></h4></div><div class="content">


<p id="p.message">The <code class="tag-attribute">[p:]message</code>
attribute can appear on any step invocation. It’s value is treated
as an attribute value template (irrespective of any enclosing
<code class="tag-attribute">[p:]expand-text</code> setting) and the
computed value is made available.</p>

<p><span id="impl-31">Precisely what “made available” means is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> It will often
be as simple as printing the message on some output channel. But for
embedded systems or other environments where “print it for the user”
is meaningless or inconvenient, some other mechanism may be used.
</p>

<p>If a processor can make the message available, it
<span class="rfc2119" id="messages.4.1">should</span> do so before execution of the step
begins.</p>
</div></section>
</div></section>

<section id="syntax-summaries" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.10. </bdi>Syntax Summaries<a aria-label="§" class="self-link" href="#syntax-summaries"/></h3></div><div class="content">

<p>The description of each element in the pipeline namespace is
accompanied by a syntactic summary that provides a quick overview of
the element’s syntax:</p>

      <p id="d2135e0" class="element-syntax element-syntax-language-example"><code>&lt;p:some-element<br/>  <strong>reqd-attribute</strong> = <var>some-type</var><br/>  some-attribute? = <var>some-type</var><br/>  avt-attribute? = { <var>some-type</var> }&gt;<br/>    (<var>some</var> | <br/>     <var>elements</var> | <br/>     <var>allowed</var>)*,<br/>    <var>other-elements?</var><br/>&lt;/p:some-element&gt;</code></p>

      <p>The content model fragments in these tableaux are presented in a simple, compact
        notation. In brief:</p>

<div class="variablelist">


<dl><dt><span class="term">Attributes</span></dt><dd>
<div class="itemizedlist">
        
        
          
<ul><li>
          <p>Required attributes are bold. Optional attributes are followed by a question mark.</p>
        </li><li>
          <p>If an attribute value may contain an attribute value template, its type is shown
          in curly brackets: “<code class="code">{ some-type }</code>”. If <code class="literal">some-type</code> is 
          <code class="type">xs:anyURI</code>, <code class="type">xs:QName</code>,
          or a map type with key type of <code class="type">xs:QName</code>, the conversions described in
            <a href="#implicit-casting" title="Implicit casting">Section 11.5, “Implicit casting”</a> apply.</p>
        </li><li>
            <p>An attribute value with a map type marks an <code class="type">XPathExpression</code> expected to
              deliver a map of the indicated type. If the map type has a key type of <code class="type">xs:QName</code>,
              the conversions described in <a href="#implicit-casting" title="Implicit casting">Section 11.5, “Implicit casting”</a> apply.</p>
          </li></ul></div>
</dd><dt><span class="term">Elements</span></dt><dd>
<div class="itemizedlist">
        
        
        
        
        
        
        
        

<ul><li>
          <p>A name represent exactly one occurrence of an element with that name.</p>
        </li><li>
          <p>Parentheses are used for grouping. </p>
        </li><li>
          <p>Elements or groups separated by a comma (“,”) represent an ordered sequence: a
            followed by b followed by c: (a,b,c).</p>
        </li><li>
          <p>Elements or groups separated by a vertical bar (“|”) represent a choice: a or b or
            c: (a | b | c).</p>
        </li><li>
          <p>Elements or groups separated by an ampersand (“&amp;”) represent an unordered
            sequence: a and b and c, in any order: (a &amp; b &amp; c).</p>
        </li><li>
          <p>An element or group followed by a question mark (“?”) is optional; it may or may not
            occur but if it occurs it can occur only once.</p>
        </li><li>
          <p>An element or group followed by an asterisk (“*”) is optional and may be repeated;
            it may or may not occur and if it occurs it can occur any number of times. </p>
        </li><li>
          <p>An element or group followed by a plus (“+”) is required and may be repeated; it
            must occur at least once, and it can occur any number of times. </p>
        </li></ul></div>
</dd></dl></div>

<p>For clarity of exposition, the common attributes (see <a href="#common-attr" title="Common Attributes">Section 14.9, “Common Attributes”</a>) are elided from the summaries as are the
<a href="#p.documentation"><code class="tag-element">p:documentation</code></a> and <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> elements, which
are allowed anywhere, and attributes that are
<a href="#option-shortcut">syntactic shortcuts for option values</a>.
</p>

<p>The types given for attributes should be understood as follows:</p>
<div class="itemizedlist">
  
  
  
  
  
  
  
<ul><li>
    <p><code class="type">ID</code>, <code class="type">NCName</code>, <code class="type">NMTOKEN</code>,
    <code class="type">NMTOKENS</code>, <code class="type">anyURI</code>, <code class="type">boolean</code>,
    <code class="type">integer</code>, <code class="type">string</code>: As per [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>] including whitespace normalization as
    appropriate.</p>
  </li><li>
    <p><code class="type">EQName</code>: With whitespace normalization as per
    [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>] for QNames. Note, however, that
    QNames that have no prefix are always in no-namespace, irrespective of the
    default namespace.
    </p>
  </li><li>
    <p><code class="type">EQNameList</code>: As a whitespace separated list of
    EQNames, per the definition above.
    </p>
  </li><li>
    <p><code class="type">PrefixList</code>: As a list with <code class="literal infoset-property">[item type]</code> <code class="type">NMTOKEN</code>,
    per [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>], including whitespace
    normalization.
    </p>
  </li><li>
    <p><code class="type">ExcludeInlinePrefixes</code>: As a <code class="type">PrefixList</code>
    per the definition above, with the following extensions: the tokens
    <code class="literal">#all</code> and <code class="literal">#default</code> may appear.
    </p>
  </li><li>
    <p><code class="type">XPathExpression</code>, <code class="type">XSLTSelectionPattern</code>:
    As a string per [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>], including
    whitespace normalization, and the further requirement to be a
    conformant Expression per [<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>] or 
            <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> per [<a href="#xslt30"><span class="abbrev">XSLT 3.0</span></a>].
    </p>
  </li><li>
    <p><code class="type">MediaTypes</code>:
    As a whitespace separated list of media types as defined in
    [<a href="#rfc2046"><span class="abbrev">RFC 2046</span></a>].
    </p>
  </li></ul></div>
</div></section>

    <section id="common-errors" class="section"><div class="section-titlepage"><h3><bdi class="secno">14.11. </bdi>Common errors<a aria-label="§" class="self-link" href="#common-errors"/></h3></div><div class="content">
      
      <p>A number of errors apply generally:</p>
      <div class="itemizedlist">
        
        
        
        
        
        
        
        
        
        
        
        
      <ul><li>
          <p><a id="err.inline.S0059"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0059"><code class="errqname">err:XS0059</code></a>) if the pipeline
              element is not <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> or
                <a href="#p.library"><code class="tag-element">p:library</code></a>.
          </p>
        </li><li>
          <p><a id="err.inline.S0008"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0008"><code class="errqname">err:XS0008</code></a>) if any element in
              the XProc namespace has attributes not defined by this specification unless they are
                <em class="glossterm"><a href="#dt-extension-attribute">extension attributes</a></em>.
          </p>
        </li><li>
          <p><a id="err.inline.S0038"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0038"><code class="errqname">err:XS0038</code></a>) if any required
              attribute is not provided.
          </p>
        </li><li>
          <p><a id="err.inline.S0077"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0077"><code class="errqname">err:XS0077</code></a>) if the value on an
            attribute of an XProc element does not satisfy the type required for that attribute.
          </p>
        </li><li>
          <p><a id="err.inline.D0028"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0028"><code class="errqname">err:XD0028</code></a>) if any attribute
              value does not satisfy the type required for that attribute.</p>
        </li><li>
          <p><a id="err.inline.S0044"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0044"><code class="errqname">err:XS0044</code></a>) if any step contains 
            an atomic step for which there is no visible declaration.</p>
        </li><li>
          <p><a id="err.inline.S0037"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0037"><code class="errqname">err:XS0037</code></a>) if any user extension 
            step or any element in the XProc namespace other than <a href="#p.inline"><code class="tag-element">p:inline</code></a> directly contains 
            text nodes that do not consist entirely of whitespace.
          </p>
        </li><li>
          <p><a id="err.inline.S0015"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0015"><code class="errqname">err:XS0015</code></a>) if a compound step
              has no <em class="glossterm"><a href="#dt-contained-steps">contained steps</a></em>.
          </p>
        </li><li>
          <p><a id="err.inline.D0012"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0012"><code class="errqname">err:XD0012</code></a>) if any attempt is
              made to dereference a URI where the scheme of the URI reference is not
              supported. Implementations are encouraged to support as many schemes as is
            practical and, in particular, they <span class="rfc2119" id="common-errors.3.9.1.2">should</span> support both the
              <code class="literal">file:</code> and <code class="literal">http(s):</code> schemes. <span id="impl-32">The set of URI
              schemes actually supported is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
          </p>
        </li><li>
          <p><a id="err.inline.D0030"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0030"><code class="errqname">err:XD0030</code></a>) if a step is unable
              or incapable of performing its function. This is a general error code for
            “step failed” (e.g., if the input isn't of the expected type or if attempting to process
            the input causes the implementation to abort). Users and implementers who create
            extension steps are encouraged to use this code for general failures.</p>
        </li><li>
          <p>In most steps which use a select expression or <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em>, any kind of node can
            be identified by the expression or pattern. However, some expressions and patterns on
            some steps are only applicable to some kinds of nodes (e.g., it doesn't make sense to
            speak of adding attributes to a comment!). </p>
          <p><a id="err.inline.C0023"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if a select
            expression or <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> returns a node type that is not allowed by the
              step.
          </p>
        </li><li>
          <p><a id="err.inline.S0100"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0100"><code class="errqname">err:XS0100</code></a>) if the pipeline
          document does not conform to the grammar for pipeline documents.
          This is a general error code indicating that the pipeline is syntactically incorrect
          in some way not identified more precisely in this specification.
          </p>
        </li></ul></div>
      <p>If an XProc processor can determine statically that a dynamic error will
          <em>always</em> occur, it <span class="rfc2119" id="common-errors.4.2">may</span> report that error statically
        provided that the error <em>does not</em> occur among the descendants of a
          <a href="#p.try"><code class="tag-element">p:try</code></a>. Dynamic errors inside a <a href="#p.try"><code class="tag-element">p:try</code></a>
        <span class="rfc2119" id="common-errors.4.6">must not</span> be reported statically. They must be raised dynamically so that
          <a href="#p.catch"><code class="tag-element">p:catch</code></a> processing can be performed on them. </p>
    </div></section>
  </div></section>
  <section id="steps" class="section"><div class="section-titlepage"><h2><bdi class="secno">15. </bdi>Steps<a aria-label="§" class="self-link" href="#steps"/></h2></div><div class="content">
    
    <p>This section describes the core language steps of XProc; the full
vocabulary of standard, atomic steps is described in
[<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>].</p>

<section id="pipelines" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.1. </bdi>Pipelines<a aria-label="§" class="self-link" href="#pipelines"/></h3></div><div class="content">


<p>The document element of a pipeline document is
<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> which declares a pipeline that can be
evaluated by an XProc processor.</p>

<p>It encapsulates the behavior of a
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. Its children declare inputs,
outputs, and options that the pipeline exposes and identify the steps
in its subpipeline.
</p>

<p>Viewed from the outside, a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> is a black
box which performs some calculation on its inputs and produces its
outputs. From the pipeline author’s perspective, the computation
performed by the pipeline is described in terms of
<em class="glossterm"><a href="#dt-contained-steps">contained steps</a></em> which read the pipeline’s
inputs and produce the pipeline’s outputs.</p>

<p>A <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> element can also be nested inside
other <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> or <a href="#p.library"><code class="tag-element">p:library</code></a> elements in
which case it simply declares a pipeline that will be run
elsewhere.</p>

<p>For more details, see <a href="#p.declare-step" title="p:declare-step">Section 16.5, “p:declare-step”</a>.</p>

<section id="example-pipeline" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.1.1. </bdi>Example<a aria-label="§" class="self-link" href="#example-pipeline"/></h4></div><div class="content">

<p>A pipeline might accept a document as input; perform XInclude, validation, and
transformation; and produce the transformed document as its output.</p>
<figure id="ex.p.pipeline" class="example-wrapper"><div class="title">Example 4. A Sample Pipeline Document</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                version="3.0"&gt;
&lt;p:input port="source"/&gt;
&lt;p:output port="result"/&gt;

&lt;p:xinclude/&gt;

&lt;p:validate-with-xml-schema&gt;
  &lt;p:with-input port="schema"&gt;
    &lt;p:document href="http://example.com/path/to/schema.xsd"/&gt;
  &lt;/p:with-input&gt;
&lt;/p:validate-with-xml-schema&gt;

&lt;p:xslt&gt;
  &lt;p:with-input port="stylesheet"&gt;
    &lt;p:document href="http://example.com/path/to/stylesheet.xsl"/&gt;
  &lt;/p:with-input&gt;
&lt;/p:xslt&gt;

&lt;/p:declare-step&gt;</code></pre></div></figure>
</div></section>
</div></section>

<section id="p.for-each" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.2. </bdi>p:for-each<a aria-label="§" class="self-link" href="#p.for-each"/></h3></div><div class="content">


<p>A for-each is specified by the <code class="tag-element">p:for-each</code> element. It
is a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em> that processes a sequence of
documents, applying its <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> to each
document in turn.</p>

<p id="d2270e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:for-each<br/>  name? = <var>NCName</var>&gt;<br/>    ((<a href="#p.with-input">p:with-input</a>? &amp; <br/>      <a href="#p.output">p:output</a>*),<br/>     <var>subpipeline</var>)<br/>&lt;/p:for-each&gt;</code></p>

<p>When a pipeline needs to process a sequence of documents using a
subpipeline that only processes a single document, the
<code class="tag-element">p:for-each</code> construct can be used as a wrapper around that
subpipeline. The <code class="tag-element">p:for-each</code> will apply that subpipeline to
each document in the sequence in turn.</p>
<p>The result of the <code class="tag-element">p:for-each</code> is a
        sequence of documents produced by processing each individual document in the input sequence.
        If the <code class="tag-element">p:for-each</code> has one or more output ports, what appears on each of those
        ports is the sequence of documents that is the concatenation of the sequence produced by
        each iteration of the loop on the port to which it is connected. If the iteration source for
        a <code class="tag-element">p:for-each</code> is an empty sequence, then the subpipeline is never run and an empty
        sequence is produced on all of the outputs. </p>

<p>The <code class="tag-element">p:for-each</code> has a single <em class="glossterm"><a href="#dt-anonymous-input">anonymous input</a></em>: its
<em class="glossterm"><a href="#dt-connection">connection</a></em> is provided by the
<a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. If no iteration sequence is explicitly provided,
then the iteration source is read from the <em class="glossterm"><a href="#dt-default-readable-port">default readable
port</a></em>.</p>

<p>The processor provides each document, one at a time, to the
          <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> represented by the children of the
          <code class="tag-element">p:for-each</code> on a port named <code class="port">current</code>.</p>
<p>For each declared
        output, the processor collects all the documents that are produced for that output from all
        the iterations, in order, into a sequence. The result of the <code class="tag-element">p:for-each</code> on that
        output is that sequence of documents.</p>
      <p>The environment inherited by the <em class="glossterm"><a href="#dt-contained-steps">contained steps</a></em> of a
          <code class="tag-element">p:for-each</code> is the <em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em> with these
        modifications:</p><div class="itemizedlist">
        
        
      <ul><li>
          <p>The port named “<code class="port">current</code>” on the <code class="tag-element">p:for-each</code> is added to the
              <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>.</p>
        </li><li>
          <p>The port named “<code class="port">current</code>” on the <code class="tag-element">p:for-each</code> is made the
              <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>.</p>
        </li></ul></div><p>If the <code class="tag-element">p:for-each</code> has a <em class="glossterm"><a href="#dt-primary-output-port">primary output
          port</a></em> (explicit or <a href="#primary-input-output">supplied by
          default</a>) and that port has no <em class="glossterm"><a href="#dt-connection">connection</a></em>, then it is
        connected to the <em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em> of the <em class="glossterm"><a href="#dt-last-step">last
          step</a></em> in the <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. <a id="err.inline.S0006"/>It is a
            <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0006"><code class="errqname">err:XS0006</code></a>) if the primary output port has no explicit
          connection and the <em class="glossterm"><a href="#dt-last-step">last step</a></em> in the subpipeline does not have a
          primary output port.</p>
<p>Note that outputs declared for a
          <code class="tag-element">p:for-each</code> serve a dual role. Inside the <code class="tag-element">p:for-each</code>, they are used
        to read results from the subpipeline. Outside the <code class="tag-element">p:for-each</code>, they provide the
        aggregated results.</p>
<p>The <code class="tag-attribute">sequence</code> attribute on a
          <a href="#p.output"><code class="tag-element">p:output</code></a> inside a <code class="tag-element">p:for-each</code> only applies inside the step. From the
        outside, all of the outputs produce sequences.</p><section id="for-each-xpath-context" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.2.1. </bdi>XPath Context<a aria-label="§" class="self-link" href="#for-each-xpath-context"/></h4></div><div class="content">
        
        <p>Within a <a href="#p.for-each"><code class="tag-element">p:for-each</code></a>, the <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a> and
            <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a> are taken from the sequence of documents that will
          be processed by the <a href="#p.for-each"><code class="tag-element">p:for-each</code></a>. The total number of documents is the
            <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a>; the ordinal value of the current document (the
          document appearing on the <code class="port">current</code> port) is the
            <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a>.</p>
        <div id="impl1" class="note admonition"><h3>Note to implementers</h3><div class="admonition-body">
          
          <p>In the case where no XPath expression that must be evaluated by the processor makes
            any reference to <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a>, its value does not actually have
            to be calculated (and the entire input sequence does not, therefore, need to be buffered
            so that its size can be calculated before processing begins).</p>
        </div></div>
      </div></section><section id="example-for-each" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.2.2. </bdi>Example<a aria-label="§" class="self-link" href="#example-for-each"/></h4></div><div class="content">
        
        <p>A <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> might accept a sequence of chapters as its input, process each
          chapter in turn with XSLT, a step that accepts only a single input document, and produce a
          sequence of formatted chapters as its output.</p>
        <figure id="ex.p.for-each" class="example-wrapper"><div class="title">Example 5. A Sample For-Each</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:for-each name="chapters"&gt;
  &lt;p:with-input select="//chapter"/&gt;
  &lt;p:output port="html-results"&gt;
    &lt;p:pipe step="make-html" port="result"/&gt;
  &lt;/p:output&gt;
  &lt;p:output port="fo-results"&gt;
    &lt;p:pipe step="make-fo" port="result"/&gt;
  &lt;/p:output&gt;

  &lt;p:xslt name="make-html"&gt;
    &lt;p:with-input port="stylesheet"
                  href="http://example.com/xsl/html.xsl"/&gt;
  &lt;/p:xslt&gt;

  &lt;p:xslt name="make-fo"&gt;
    &lt;p:with-input port="source" pipe="current@chapters"/&gt;
    &lt;p:with-input port="stylesheet"
                  href="http://example.com/xsl/fo.xsl"/&gt;
  &lt;/p:xslt&gt;
&lt;/p:for-each&gt;</code></pre></div></figure>
        <p>The <code class="code">//chapter</code> elements of the document are selected. Each chapter is
          transformed into HTML and XSL Formatting Objects using an XSLT step. The resulting HTML
          and FO documents are aggregated together and appear on the <code class="literal">html-results</code>
          and <code class="literal">fo-results</code> ports, respectively, of the <code class="literal">chapters</code>
          step itself.</p>
      </div></section></div></section>

<section id="p.viewport" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.3. </bdi>p:viewport<a aria-label="§" class="self-link" href="#p.viewport"/></h3></div><div class="content">


<p>A viewport is specified by the <code class="tag-element">p:viewport</code> element. It
is a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em> that processes single XML or 
HTML documents, applying its <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> to one or
more subtrees of each document in turn.</p>

<p id="d2342e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:viewport<br/>  name? = <var>NCName</var><br/>  <strong>match</strong> = <var>XSLTSelectionPattern</var>&gt;<br/>    ((<a href="#p.with-input">p:with-input</a>? &amp; <br/>      <a href="#p.output">p:output</a>?),<br/>     <var>subpipeline</var>)<br/>&lt;/p:viewport&gt;</code></p>

<p>The result of the <code class="tag-element">p:viewport</code> is a copy of the
original document where the selected subtrees have been replaced by
the results of applying the subpipeline to them.</p>

<p>The <code class="tag-element">p:viewport</code> has a single <em class="glossterm"><a href="#dt-anonymous-input">anonymous input</a></em>: its
<em class="glossterm"><a href="#dt-connection">connection</a></em> is provided by the
<a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. If no document is explicitly provided,
then the viewport source is read from the <em class="glossterm"><a href="#dt-default-readable-port">default readable
port</a></em>. If the <code class="tag-element">p:viewport</code> input is a sequence,
each document in the sequence is processed in turn producing a sequence
on the output. <a id="err.inline.D0072"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0072"><code class="errqname">err:XD0072</code></a>)
if a document appearing on the input port of <code class="tag-element">p:viewport</code> is neither 
an XML document nor an HTML document.</p>

<p>The <code class="tag-attribute">match</code> attribute specifies an
XSLT <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em>. Each matching node in
the source document is wrapped in a document node, as necessary, and
provided, one at a time, to the viewport’s
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> on a port named
<code class="port">current</code>. The base URI of the resulting document that is
passed to the subpipeline is the base URI of the matched node.
<a id="err.inline.D0010"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.D0010"><code class="errqname">err:XD0010</code></a>) if the <code class="tag-attribute">match</code> expression
on <code class="tag-element">p:viewport</code> matches an attribute or a namespace node.</p>

<div class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>The <code class="tag-attribute">match</code> attribute on
<code class="tag-element">p:viewport</code> is a selection pattern and may contain references
to in-scope variables and options, but it is
not an <em class="glossterm"><a href="#dt-attribute-value-template">attribute value template</a></em>.
</p>
</div></div>

<p>After a match is found, the entire subtree rooted at that match
is processed as a unit. No further attempts are made to match nodes
among the descendants of any matched node.</p>
<p>The environment inherited by the <em class="glossterm"><a href="#dt-contained-steps">contained steps</a></em> of
        a <code class="tag-element">p:viewport</code> is the <em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em> with these
        modifications:</p><div class="itemizedlist">
        
        
      <ul><li>
          <p>The port named “<code class="port">current</code>” on the <code class="tag-element">p:viewport</code> is added to the
              <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>.</p>
        </li><li>
          <p>The port named “<code class="port">current</code>” on the <code class="tag-element">p:viewport</code> is made the
              <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>.</p>
        </li></ul></div><p>The <code class="tag-element">p:viewport</code> must contain a single, <em class="glossterm"><a href="#dt-primary-output-port">primary
          output port</a></em> declared explicitly or <a href="#primary-input-output">supplied by default</a>. If that port has no <em class="glossterm"><a href="#dt-connection">connection</a></em>, then
        it is connected to the <em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em> of the <em class="glossterm"><a href="#dt-last-step">last
          step</a></em> in the <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. <a id="err.inline.S0006.1"/>It is a
            <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0006"><code class="errqname">err:XS0006</code></a>) if the primary output port is unconnected and the
            <em class="glossterm"><a href="#dt-last-step">last step</a></em> in the subpipeline does not have a primary output
          port.</p>
<p>What appears on the output from the <code class="tag-element">p:viewport</code> will
        be a copy of the input document where each matching node is replaced by the result of
        applying the subpipeline to the subtree rooted at that node. In other words, if the 
        <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> matches a particular node then that 
        node is wrapped in a document node and
        provided on the <code class="port">current</code> port, the subpipeline in the <code class="tag-element">p:viewport</code> is
        evaluated, and the result that appears on the <code class="port">output</code> port replaces the matched
        node.</p>
<p>If a document resulting from applying the subpipeline to the matched node is an XML document, 
an HTML document, or a text document, all child nodes of the document node will be used to replace 
the matched node. <a id="err.inline.D0073"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0073"><code class="errqname">err:XD0073</code></a>) if the document 
returned by applying the subpipeline to the matched node is not an XML document, an HTML document, 
or a text document.
</p>
<p>If no documents appear on the <code class="port">output</code> port, the matched
        node will effectively be deleted. If exactly one document appears, the contents of that
        document will replace the matched node. If a sequence of documents appears, then the
        contents of each document in that sequence (in the order it appears in the sequence) will
        replace the matched node.</p>
<p>The output of the <code class="tag-element">p:viewport</code> itself is a
        sequence of documents that appear on a port named “<code class="literal">result</code>”. Note that the
        semantics of <code class="tag-element">p:viewport</code> are special. The <code class="port">output</code> port in the
          <code class="tag-element">p:viewport</code> is used only to access the results of the subpipeline. The output of
        the step itself appears on a port with the fixed name “<code class="literal">result</code>” that is
        never explicitly declared.</p>
<p>For the documents appearing on port <code class="port">result</code> all document properties will be preserved,
except when option <code class="option">match</code> matches a document node and the result from applying the 
  subpipeline to the document node is a (sequence of) text document(s). In this case the content-type 
  property is changed  to “<code class="literal">text/plain</code>” and the serialization property is removed, 
  while all other document properties are preserved.</p>  
  <section id="viewport-xpath-context" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.3.1. </bdi>XPath Context<a aria-label="§" class="self-link" href="#viewport-xpath-context"/></h4></div><div class="content">
        
        <p>Within a <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>, the <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a> and
            <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a> are taken from the sequence of documents that will
          be processed by the <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>. The total number of documents is the
            <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a>; the ordinal value of the current document (the
          document appearing on the <code class="port">current</code> port) is the
            <a href="#f.iteration-position"><code class="function">p:iteration-position</code></a>.</p>
        <div id="impl2" class="note admonition"><h3>Note to implementers</h3><div class="admonition-body">
          
          <p>In the case where no XPath expression that must be evaluated by the processor makes
            any reference to <a href="#f.iteration-size"><code class="function">p:iteration-size</code></a>, its value does not actually have
            to be calculated (and the entire input sequence does not, therefore, need to be buffered
            so that its size can be calculated before processing begins).</p>
        </div></div>
      </div></section><section id="example-viewport" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.3.2. </bdi>Example<a aria-label="§" class="self-link" href="#example-viewport"/></h4></div><div class="content">
        
        <p>A <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> might accept an XHTML document as its input, add an
            <code class="tag-element">hr</code> element at the beginning of all <code class="tag-element">div</code> elements that have the
          class value “chapter”, and return an XHTML document that is the same as the original
          except for that change.</p>
        <figure id="ex.p.viewport" class="example-wrapper"><div class="title">Example 6. A Sample Viewport</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:viewport match="h:div[@class='chapter']"
            xmlns:h="http://www.w3.org/1999/xhtml"&gt;
  &lt;p:insert position="first-child"&gt;
    &lt;p:with-input port="insertion"&gt;
      &lt;hr xmlns="http://www.w3.org/1999/xhtml"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:insert&gt;
&lt;/p:viewport&gt;</code></pre></div></figure>
        <p>The nodes which match <code class="code">h:div[@class='chapter']</code> in the input document are
          selected. An <code class="code">hr</code> is inserted as the first child of each <code class="code">h:div</code> and
          the resulting version replaces the original <code class="code">h:div</code>. The result of the whole
          step is a copy of the input document with a horizontal rule as the first child of each
          selected <code class="code">h:div</code>.</p>
      </div></section></div></section>

<section id="p.choose" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.4. </bdi>p:choose<a aria-label="§" class="self-link" href="#p.choose"/></h3></div><div class="content">


<p>A choose step is specified by the <code class="tag-element">p:choose</code> element.
It is a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em> that contains several, alternate subpipelines. One
subpipeline is selected based on the evaluation of XPath
expressions.</p>

<p id="d2431e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:choose<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     ((<a href="#p.when">p:when</a>+,<br/>       <a href="#p.otherwise">p:otherwise</a>?) | <br/>      (<a href="#p.when">p:when</a>*,<br/>       <a href="#p.otherwise">p:otherwise</a>)))<br/>&lt;/p:choose&gt;</code></p>

<p>A <code class="tag-element">p:choose</code> contains an arbitrary number of
alternative <em class="glossterm"><a href="#dt-subpipeline">subpipelines</a></em>, at most one of which
will be evaluated. <a id="err.inline.S0074"/>It is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0074"><code class="errqname">err:XS0074</code></a>) if a <code class="tag-element">p:choose</code> has neither a
<a href="#p.when"><code class="tag-element">p:when</code></a> nor a <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a>.</p>

<p>The list of alternative subpipelines consists of zero or more
subpipelines guarded by an XPath expression, followed optionally by a
single default subpipeline.</p>

<p>The <code class="tag-element">p:choose</code> considers each subpipeline in turn and
selects the first (and only the first) subpipeline for which the guard
expression evaluates to true in its context. After a subpipeline is
selected, no further guard expressions are evaluated. If there are no
subpipelines for which the expression evaluates to true then,
if a default subpipeline was specified, it is selected, otherwise,
no subpipeline is selected.</p>

<p>After a <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> is selected, it is
evaluated as if only it had been present.</p>

<p>The outputs of the <code class="tag-element">p:choose</code> are taken from the
outputs of the selected <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. The
outputs <em>available</em> from the <code class="tag-element">p:choose</code>
are union of all of the outputs declared in any of its alternative
subpipelines. In order to maintain consistency with respect to the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>, if any subpipeline has a
<em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em>, even implicitly, then
<em>every</em> subpipline must have a primary output
port with the same name. In some cases, this may require making the implicit
primary output explicit in order to assure that it has the same name.
<a id="err.inline.S0102"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0102"><code class="errqname">err:XS0102</code></a>) if alternative
subpipelines have different primary output ports.
</p>

<p>Consider a <code class="tag-element">p:choose</code> that has two alternative
subpipelines where one declares output ports “A” and “B” and the other
declares output ports “B” and “C”. The outputs available from the
<code class="tag-element">p:choose</code> are “A”, “B”, and “C”. No documents appear on any
outputs not declared in the subpipline actually selected.</p>

<p>As a convenience to authors, it is not an error if some
subpipelines declare outputs that can produce sequences and some do
not. Each output of the <code class="tag-element">p:choose</code> is declared to produce a
sequence. The content types that can appear on the port are the union
of the content types that might be produced by any of the <a href="#p.when"><code class="tag-element">p:when</code></a> 
or the <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a>. If a primary output port is (explicitly or 
implicitly) defined and <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> is missing, documents 
with <em>any</em> content type can appear on that port.
</p>

<p>The <code class="tag-element">p:choose</code> can specify the context item against
which the XPath expressions that occur on each branch are evaluated.
The context item is specified as a <em class="glossterm"><a href="#dt-connection">connection</a></em>
in the <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. If no explicit connection is provided,
the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is used. If the
context item is connected to <a href="#p.empty"><code class="tag-element">p:empty</code></a>, or is connected to
more than one document, or is unconnected and the <em class="glossterm"><a href="#dt-default-readable-port">default
readable port</a></em> is undefined, the context item is undefined.
<a id="err.inline.D0001"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.
</p>

<p>Each conditional <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> is
represented by a <a href="#p.when"><code class="tag-element">p:when</code></a> element. The default branch is
represented by a <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> element. These elements are not
sibling steps in the usual sense, the names of sibling <a href="#p.when"><code class="tag-element">p:when</code></a>
elements and the <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> element are not in
<a href="#scoping">the same scope</a>.</p>
  
  <p>If the following conditions apply:</p>
      <div class="itemizedlist">
        
        
        

      <ul><li>
          <p>The <code class="tag-element">p:choose</code> does not contain a <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> child element</p>
        </li><li>
          <p>The <a href="#p.when"><code class="tag-element">p:when</code></a> branches all define a primary output port (either implicitly or explicitly)</p>
        </li><li>
          <p>None of the effective boolean values of the <a href="#p.when"><code class="tag-element">p:when</code></a> test expressions evaluates to
              <code class="code">true</code></p>
        </li></ul></div>
      <p>Then the <code class="tag-element">p:choose</code> copies any documents that appear on its default readable port to its primary output
        port. No documents will be written to the primary output port if there isn’t a default readable port, but that
        is not an error in this case. No documents will ever be written to any non-primary output ports in this case.</p>
      <p>Informally: the default sub-pipeline for a missing <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> is a <code class="tag-element">p:identity</code> step
        (with the additional feature that it isn’t an error if there’s no default readable port). If the <a href="#p.when"><code class="tag-element">p:when</code></a> branches do not have a primary output port, no output will be produced on any port.</p>
  
  

<section id="p.when" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.4.1. </bdi>p:when<a aria-label="§" class="self-link" href="#p.when"/></h4></div><div class="content"><p>A
          when specifies one subpipeline guarded by a test expression. </p>
        <p id="d2471e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:when<br/>  name? = <var>NCName</var><br/>  <strong>test</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     <a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:when&gt;</code></p>
        <p>Each <code class="tag-element">p:when</code> branch of the <a href="#p.choose"><code class="tag-element">p:choose</code></a> has a <code class="tag-attribute">test</code> attribute which <span class="rfc2119" id="p.when.4.4">must</span> contain an XPath expression. That
          XPath expression’s effective boolean value is the guard for the
            <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> contained within that
          <code class="tag-element">p:when</code>.</p>

<p>The <code class="tag-element">p:when</code> can specify a context item against which
its <code class="tag-attribute">test</code> expression is to be evaluated.
That context item is specified as a <em class="glossterm"><a href="#dt-connection">connection</a></em>
for the <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. If no context is specified on the
<code class="tag-element">p:when</code>, the context of the <a href="#p.choose"><code class="tag-element">p:choose</code></a> is
used. The context item is undefined if the connection or
the context of the <a href="#p.choose"><code class="tag-element">p:choose</code></a> provides no or more than one document.
<a id="err.inline.D0001.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.</p>
<p>If the <code class="tag-attribute">collection</code> attribute has the value true,
then the default collection will contain all of the documents that appeared
on that input and the context item will be undefined.
</p>
</div></section>

<section id="p.otherwise" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.4.2. </bdi>p:otherwise<a aria-label="§" class="self-link" href="#p.otherwise"/></h4></div><div class="content"><p>An otherwise specifies the default
branch; the subpipeline selected if no test expression on any
preceding <a href="#p.when"><code class="tag-element">p:when</code></a> evaluates to true.</p>

        <p id="d2491e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:otherwise<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:otherwise&gt;</code></p>
      </div></section><section id="example-choose" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.4.3. </bdi>Example<a aria-label="§" class="self-link" href="#example-choose"/></h4></div><div class="content">
        
        <p>A <a href="#p.choose"><code class="tag-element">p:choose</code></a> might test the version attribute of the document element and
          validate with an appropriate schema.</p>
        <figure id="ex.p.choose" class="example-wrapper"><div class="title">Example 7. A Sample Choose</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:choose name="version"&gt;
  &lt;p:when test="/*[@version = 2]"&gt;
    &lt;p:validate-with-xml-schema&gt;
      &lt;p:with-input port="schema" href="v2schema.xsd"/&gt;
    &lt;/p:validate-with-xml-schema&gt;
  &lt;/p:when&gt;

  &lt;p:when test="/*[@version = 1]"&gt;
    &lt;p:validate-with-xml-schema&gt;
      &lt;p:with-input port="schema" href="v1schema.xsd"/&gt;
    &lt;/p:validate-with-xml-schema&gt;
  &lt;/p:when&gt;

  &lt;p:when test="/*[@version]"&gt;
    &lt;p:identity/&gt;
  &lt;/p:when&gt;

  &lt;p:otherwise&gt;
    &lt;p:error code="NOVERSION"&gt;
      &lt;p:with-input port="source"&gt;
	&lt;p:inline&gt;
	  &lt;message&gt;Required version attribute missing.&lt;/message&gt;
	&lt;/p:inline&gt;
      &lt;/p:with-input&gt;
    &lt;/p:error&gt;
  &lt;/p:otherwise&gt;
&lt;/p:choose&gt;</code></pre></div></figure>
      </div></section></div></section>

<section id="p.if" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.5. </bdi>p:if<a aria-label="§" class="self-link" href="#p.if"/></h3></div><div class="content">


<p>A <code class="tag-element">p:if</code> specifies a single subpipeline guarded by a test expression.</p>

<p id="d2518e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:if<br/>  name? = <var>NCName</var><br/>  <strong>test</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     <a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:if&gt;</code></p>

<p>The <code class="tag-element">p:if</code> step has a <code class="tag-attribute">test</code>
attribute which <span class="rfc2119" id="p.if.4.3">must</span> contain an XPath expression.
That XPath expression’s effective boolean value is the guard for the
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> contained within it.
</p>

<p>The <code class="tag-element">p:if</code> step can specify a context item against which
its <code class="tag-attribute">test</code> expression is to be evaluated.
That context node is specified as a <em class="glossterm"><a href="#dt-connection">connection</a></em>
for the <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>. If no context is specified on the
<code class="tag-element">p:if</code>, the context comes from the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>. If no context is specified and
there is no default readable port, the context item is undefined. The context
item is also undefined, if no or more than one document is provided. 
<a id="err.inline.D0001.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.</p>

<p>If the <code class="tag-attribute">collection</code> attribute has the value true,
then the default collection will contain all of the documents that appeared
on that input and the context item will be undefined.
</p>

<p>The <code class="tag-element">p:if</code> must specify a primary output port (either implicitly
or explicitly). <a id="err.inline.S0108"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0108"><code class="errqname">err:XS0108</code></a>)
if the <code class="tag-element">p:if</code> step does not specify a primary output port.
</p>

<p>The requirement for a primary output port stems from the semantics of
<code class="tag-element">p:if</code>:</p>

<div class="itemizedlist">


<ul><li>
<p>If the effective boolean value of the test expression is true, then
the subpipline will be run. The output of the <code class="tag-element">p:if</code> in this case
is determined by the output ports of the step and what the subpipeline sends
to them.</p>
</li><li>
<p>If the effective boolean value of the test expression is false, then
<code class="tag-element">p:if</code> copies any documents that appear on its default readable port
to its primary output port. No documents will be written to the primary output port
if there isn’t a default readable port, but that is not an error in this case.
No documents will ever be written to any non-primary output
ports if the test expression is false.</p>
</li></ul></div>

<p>Informally, if the test expression is false, then
<code class="tag-element">p:if</code> acts like the identity step (with the additional
feature that it isn’t an error if there’s no default readable port). A
primary output port is required in order to make these semantics
meaningful and consistent.</p>
  
<p>The <code class="tag-attribute">sequence</code> attribute and
the <code class="tag-attribute">content-types</code> attribute of the primary output port 
only apply to the subpipeline of <code class="tag-element">p:if</code>. From the outside a primary output
port of a <code class="tag-element">p:if</code> produces sequences and allows documents of any content type. 
For all other output ports the <code class="tag-attribute">sequence</code> attribute only
applies to the subpipeline, while on the outside these ports may produce sequences.</p>
</div></section>

    <section id="p.group" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.6. </bdi>p:group<a aria-label="§" class="self-link" href="#p.group"/></h3></div><div class="content"><p>A group is specified by the
          <code class="tag-element">p:group</code> element. It is a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em> that
           encapsulates the behavior of its <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>.</p>
      <p id="d2546e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:group<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:group&gt;</code></p>
      <p>A <code class="tag-element">p:group</code> is a convenience wrapper for a collection of steps. </p><section id="example-group" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.6.1. </bdi>Example<a aria-label="§" class="self-link" href="#example-group"/></h4></div><div class="content">
        
        <figure id="ex.p.group" class="example-wrapper"><div class="title">Example 8. An Example Group</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:group&gt;
  &lt;p:variable name="db-key"
	      select="'some-long-string-of-nearly-random-characters'"/&gt;

  &lt;p:choose&gt;
    &lt;p:when test="/config/output = 'fo'"&gt;
      &lt;p:xslt&gt;
	&lt;p:with-option name="parameters" select="map {'key': $db-key }"/&gt;
	&lt;p:with-input port="stylesheet" href="fo.xsl"/&gt;
      &lt;/p:xslt&gt;
    &lt;/p:when&gt;
    &lt;p:when test="/config/output = 'svg'"&gt;
      &lt;p:xslt&gt;
	&lt;p:with-option name="parameters" select="map {'key': $db-key }"/&gt;
	&lt;p:with-input port="stylesheet" href="svg.xsl"/&gt;
      &lt;/p:xslt&gt;
    &lt;/p:when&gt;
    &lt;p:otherwise&gt;
      &lt;p:xslt&gt;
	&lt;p:with-option name="parameters" select="map {'key': $db-key }"/&gt;
	&lt;p:with-input port="stylesheet" href="html.xsl"/&gt;
      &lt;/p:xslt&gt;
    &lt;/p:otherwise&gt;
  &lt;/p:choose&gt;
&lt;/p:group&gt;</code></pre></div></figure>
      </div></section></div></section>

<section id="p.try" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.7. </bdi>p:try<a aria-label="§" class="self-link" href="#p.try"/></h3></div><div class="content">


<p>A try/catch step is specified by the <code class="tag-element">p:try</code> element.
It is a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em> that isolates its initial
subpipeline, preventing dynamic errors that arise within it from being
exposed to the rest of the pipeline.
The <code class="tag-element">p:try</code> includes alternate
recovery subpipelines, and may include a “finally”
subpipeline to perform post-processing irrespective of the outcome of
the <code class="tag-element">p:try</code>.</p>

<p id="d2576e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:try<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>,<br/>     ((<a href="#p.catch">p:catch</a>+,<br/>        <a href="#p.finally">p:finally</a>?) | <br/>       (<a href="#p.catch">p:catch</a>*,<br/>        <a href="#p.finally">p:finally</a>)))<br/>&lt;/p:try&gt;</code></p>

<p>The step begins with the initial subpipeline;
the recovery (or “catch”) pipelines are identified with
<a href="#p.catch"><code class="tag-element">p:catch</code></a> elements; a “finally” pipeline is identified with a
<a href="#p.finally"><code class="tag-element">p:finally</code></a> element.</p>

<p><a id="err.inline.S0075"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0075"><code class="errqname">err:XS0075</code></a>)
if a <code class="tag-element">p:try</code> does not have at least one subpipeline step,
at least one of <a href="#p.catch"><code class="tag-element">p:catch</code></a> or <a href="#p.finally"><code class="tag-element">p:finally</code></a>, and at most
one <a href="#p.finally"><code class="tag-element">p:finally</code></a>.</p>

<p>The <code class="tag-element">p:try</code> step evaluates the initial subpipeline and,
if no errors occur, the outputs of that pipeline are the outputs of
the <code class="tag-element">p:try</code> step. However, if any errors occur, the
<code class="tag-element">p:try</code> abandons the first subpipeline, discarding any output
that it might have generated, and considers the recovery
subpipelines.
If there is no matching recovery subpipeline, the <code class="tag-element">p:try</code> fails.
</p>

<div class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>If the initial subpipeline fails, none of its outputs will be
visible outside of the <code class="tag-element">p:try</code>, but it’s still possible for
steps in the partially evaluated pipeline to have side effects that
are visible outside the processor. For example, a web server might
record that some interaction was performed, or a file on the local
file system might have been modified.</p>
</div></div>

<p>If a recovery subpipeline is evaluated, the outputs of the
recovery subpipeline are the outputs of the <code class="tag-element">p:try</code> step. If
the recovery subpipeline is evaluated and a step within that
subpipeline fails, the <code class="tag-element">p:try</code> fails.</p>

<p>Irrespective of whether the initial subpipeline succeeds or fails,
if any recovery pipeline is selected, and whether it succeeds or fails,
the <a href="#p.finally"><code class="tag-element">p:finally</code></a> block is <em>always</em> run after
all other processing of the <code class="tag-element">p:try</code> has finished.</p>

<p>The outputs of the <code class="tag-element">p:try</code> are taken from the
outputs of the initial <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> or the recovery
subpipline if an error occurred in the initial subpipeline. The
outputs <em>available</em> from the <code class="tag-element">p:try</code>
are union of all of the outputs declared (explicitly or implicitly in the
absence of any <a href="#p.output"><code class="tag-element">p:output</code></a> elements if the <em class="glossterm"><a href="#dt-last-step">last step</a></em>
has a primary output port) in any of its alternative
subpipelines. In order to maintain consistency with respect to the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>, if any subpipeline has a
<em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em>, even implicitly, then
<em>every</em> subpipline must have a primary output
port with the same name. In some cases, this may require making the implicit
primary output explicit in order to assure that it has the same name.
<a id="err.inline.S0102.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0102"><code class="errqname">err:XS0102</code></a>) if alternative
subpipelines have different primary output ports.
</p>

<p>Consider a <code class="tag-element">p:try</code> that has an initial
subpipeline that declares output ports “A” and “B” and a recovery
subpipeline that
declares output ports “B” and “C”. The outputs available from the
<code class="tag-element">p:try</code> are “A”, “B”, and “C”. No documents appear on any
outputs not declared in the subpipeline whose results are actually
returned.</p>

<p>As a convenience to authors, it is not an error if an output
port can produce a sequence in the initial subpipeline but not in the
recovery subpipeline, or vice versa. Each output of the
<code class="tag-element">p:try</code> is declared to produce a sequence. The content types 
that can appear on the port are the union of the content types that 
might be produced by the initial subpipeline and any of the recovery subpipelines.
</p>

<p>A pipeline author can cause an error to occur with the
<a href="#cv.error"><code class="tag-element">p:error</code></a> step.</p>

<p>If we assume that an absent <a href="#p.finally"><code class="tag-element">p:finally</code></a> always succeeds, evaluation
of a <code class="tag-element">p:try</code> falls into one of these cases:</p>

<div class="itemizedlist">



<ul><li>
<p>If the initial pipeline succeeds:</p>
<div class="itemizedlist">


<ul><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> succeeds,
the <code class="tag-element">p:try</code> succeeds and the outputs of the initial subpipeline are
the outputs of the <code class="tag-element">p:try</code>.
</p>
</li><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> fails,
the <code class="tag-element">p:try</code> fails and the error raised by the <a href="#p.finally"><code class="tag-element">p:finally</code></a>
is reported as the cause of the failure.</p>
</li></ul></div>
</li><li>
<p>If the initial pipeline fails and a recovery subpipeline is selected:</p>
<div class="itemizedlist">


<ul><li>
<p>If the recovery pipeline succeeds:</p>
<div class="itemizedlist">


<ul><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> succeeds,
the <code class="tag-element">p:try</code> succeeds and the outputs of the recovery subpipeline are
the outputs of the <code class="tag-element">p:try</code>.
</p>
</li><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> fails,
the <code class="tag-element">p:try</code> fails and the error raised by the <a href="#p.finally"><code class="tag-element">p:finally</code></a>
is reported as the cause of the failure.</p>
</li></ul></div>
</li><li>
<p>If the recovery pipeline fails:</p>
<div class="itemizedlist">


<ul><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> succeeds,
the <code class="tag-element">p:try</code> fails and the error raised by the recovery subpipeline
is reported as the cause of the failure.</p>
</li><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> fails,
the <code class="tag-element">p:try</code> fails and the error raised by the <em>recovery subpipeline</em>
<span class="rfc2119" id="p.try.15.2.2.2.2.2.1.4">must</span> be reported as the cause of the failure. The error raised by
the finally pipeline <span class="rfc2119" id="p.try.15.2.2.2.2.2.1.5">may</span> also be reported in addition to the error
raised by the recovery pipeline.</p>
</li></ul></div>
</li></ul></div>
</li><li>
<p>If the initial pipeline fails and a recovery subpipeline is not selected:</p>
<div class="itemizedlist">


<ul><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> succeeds,
the <code class="tag-element">p:try</code> fails and the error raised by the initial subpipeline
is reported as the cause of the failure.</p>
</li><li>
<p>If the <a href="#p.finally"><code class="tag-element">p:finally</code></a> fails,
the <code class="tag-element">p:try</code> fails and the error raised by the <em>initial subpipeline</em>
<span class="rfc2119" id="p.try.15.3.2.2.1.4">must</span> be reported as the cause of the failure. The error raised by
the finally pipeline <span class="rfc2119" id="p.try.15.3.2.2.1.5">may</span> also be reported in addition to the error
raised by the initial subpipeline.</p>
</li></ul></div>
</li></ul></div>

<p>The <a href="#p.catch"><code class="tag-element">p:catch</code></a> and <a href="#p.finally"><code class="tag-element">p:finally</code></a> elements are not
sibling steps, the names of sibling <a href="#p.catch"><code class="tag-element">p:catch</code></a> elements and
the <a href="#p.finally"><code class="tag-element">p:finally</code></a> element are not in <a href="#scoping">the same scope</a>. The elements of the initial
subpipeline are also not in the same scope as the <a href="#p.catch"><code class="tag-element">p:catch</code></a>
and <a href="#p.finally"><code class="tag-element">p:finally</code></a> elements or their descendants.</p>

<section id="p.catch" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.7.1. </bdi>p:catch<a aria-label="§" class="self-link" href="#p.catch"/></h4></div><div class="content">


<p>A <code class="tag-element">p:catch</code> is a recovery subpipeline.</p>

<p id="d2648e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:catch<br/>  name? = <var>NCName</var><br/>  code? = <var>EQNameList</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:catch&gt;</code></p>

<p>The environment inherited by the <em class="glossterm"><a href="#dt-contained-steps">contained
steps</a></em> of the <code class="tag-element">p:catch</code> is the
<em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em> with these
modifications:</p>

<div class="itemizedlist">

  
<ul><li>
<p>A primary input port named “<code class="port">error</code>”
is added to the <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>
on the <code class="tag-element">p:catch</code>.</p>
</li><li>
    <p>Output ports and variables from the <a href="#p.try"><code class="tag-element">p:try</code></a>’s subpipeline are not available.</p>
  </li></ul></div>

<p>All except the last <code class="tag-element">p:catch</code> pipeline <span class="rfc2119" id="p.catch.6.2">must</span> 
have a <code class="tag-attribute">code</code> attribute.
<a id="err.inline.S0064"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0064"><code class="errqname">err:XS0064</code></a>)
if the <code class="tag-attribute">code</code> attribute is missing from
any but the last <code class="tag-element">p:catch</code> or if any error code occurs
in more than one <code class="tag-attribute">code</code> attribute among
sibling <code class="tag-element">p:catch</code> elements.
<a id="err.inline.S0083"/>It is a <em class="glossterm"><a href="#dt-static-error">static 
error</a></em> (<a href="#err.S0083"><code class="errqname">err:XS0083</code></a>) if the value of the <code class="tag-attribute">code</code>
attribute is not a whitespace separated list of EQNames.</p>

<p>When a <a href="#p.try"><code class="tag-element">p:try</code></a> considers the recovery subpipelines,
if any of the specified error codes in a <code class="tag-element">p:catch</code> match
the error that was raised in the initial subpipeline, then
that <code class="tag-element">p:catch</code> is selected as the recovery pipeline.
If the last <code class="tag-element">p:catch</code> does not have a <code class="tag-attribute">code</code>
attribute, it is selected if no other <code class="tag-element">p:catch</code> has a
matching error code.
</p>

<p>What appears on the <code class="port">error</code> input port is an <a href="#err-vocab">error document</a>. The error document may
contain messages generated by steps that were part of the initial
subpipeline. Not all messages that appear are indicative of errors;
for example, it is common for all <code class="tag-element">xsl:message</code> output from
the XSLT component to appear on the <code class="port">error</code> input port. It
is possible that the component which fails may not produce any
messages at all. It is also possible that the failure of one component
may cause others to fail so that there may be multiple failure
messages in the document.</p>

</div></section>
<section id="p.finally" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.7.2. </bdi>p:finally<a aria-label="§" class="self-link" href="#p.finally"/></h4></div><div class="content">


<p>The last thing that the <a href="#p.try"><code class="tag-element">p:try</code></a> step does is evaluate
the <code class="tag-element">p:finally</code> pipeline.</p>

<p id="d2679e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:finally<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:finally&gt;</code></p>

<p>The environment inherited by the <em class="glossterm"><a href="#dt-contained-steps">contained
steps</a></em> of the <code class="tag-element">p:finally</code> is the
<em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em> with these
modifications:</p>

<div class="itemizedlist">

  
<ul><li>
<p>A primary input port named “<code class="port">error</code>”
is added to the <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>
on the <code class="tag-element">p:finally</code>.</p>
</li><li>
    <p>Output ports and variables from the <a href="#p.try"><code class="tag-element">p:try</code></a>’s subpipeline are not available.</p>
  </li></ul></div>

<p>If no error occurred, there will be no documents on the
<code class="port">error</code> port.
</p>

<p>The <code class="tag-element">p:finally</code> exists only to handle recovery and
resource cleanup tasks. Because the <code class="tag-element">p:finally</code> will always
be evaluated, it must not have output ports that might conflict with
the output ports of either the initial subpipline or any <a href="#p.catch"><code class="tag-element">p:catch</code></a>.
<a id="err.inline.S0072"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0072"><code class="errqname">err:XS0072</code></a>)
if the name of any output port on the <code class="tag-element">p:finally</code> is the same
as the name of any other output port in the <a href="#p.try"><code class="tag-element">p:try</code></a> or any
of its sibling <a href="#p.catch"><code class="tag-element">p:catch</code></a> elements.
<a id="err.inline.S0112"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0112"><code class="errqname">err:XS0112</code></a>) if
<code class="tag-element">p:finally</code> declares a primary output port either explicitly
or implicitly.
</p>
</div></section>

<section id="err-vocab" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.7.3. </bdi>The Error Vocabulary<a aria-label="§" class="self-link" href="#err-vocab"/></h4></div><div class="content">


<p>In general, it is very difficult to predict error behavior. Step
failure may be catastrophic (programmer error), or it may be the
result of user error, resource failures, etc. Steps may detect more
than one error, and the failure of one step may cause other steps to
fail as well.</p>

<p>The <a href="#p.try"><code class="tag-element">p:try</code></a>/<a href="#p.catch"><code class="tag-element">p:catch</code></a> mechanism gives pipeline
authors the opportunity to process the errors that caused the
<a href="#p.try"><code class="tag-element">p:try</code></a> to fail. In order to facilitate some modicum of
interoperability among processors, errors that are reported on the
<code class="literal">error</code> input port of a <a href="#p.catch"><code class="tag-element">p:catch</code></a>
<span class="rfc2119" id="err-vocab.3.6">should</span> conform to the format described here.
</p>

<section id="cv.errors" class="section"><div class="section-titlepage"><h5><bdi class="secno">15.7.3.1. </bdi>c:errors<a aria-label="§" class="self-link" href="#cv.errors"/></h5></div><div class="content">


<p>The error vocabulary consists of a root element,
<code class="tag-element">c:errors</code> which contains zero or more <a href="#cv.error"><code class="tag-element">c:error</code></a>
elements.</p>

<p id="d2709e0" class="element-syntax element-syntax-error-vocabulary"><code>&lt;c:errors&gt;<br/>    <a href="#cv.error">c:error</a>*<br/>&lt;/c:errors&gt;</code></p>

</div></section>

<section id="cv.error" class="section"><div class="section-titlepage"><h5><bdi class="secno">15.7.3.2. </bdi>c:error<a aria-label="§" class="self-link" href="#cv.error"/></h5></div><div class="content">


<p>Each specific error is represented by an <code class="tag-element">c:error</code>
element:</p>

<p id="d2724e0" class="element-syntax element-syntax-error-vocabulary"><code>&lt;c:error<br/>  name? = <var>NCName</var><br/>  type? = <var>EQName</var><br/>  code? = <var>EQName</var><br/>  cause? = <var>EQName</var><br/>  href? = <var>anyURI</var><br/>  line? = <var>integer</var><br/>  column? = <var>integer</var><br/>  offset? = <var>integer</var>&gt;<br/>    <var>anyNode</var>*<br/>&lt;/c:error&gt;</code></p>

<p>The <code class="tag-attribute">name</code> and <code class="tag-attribute">type</code> attributes identify the name and type,
respectively, of the step which failed.</p>

<p>The <code class="tag-attribute">code</code> is an EQName which
identifies the error. For steps which have defined error codes, this
is an opportunity for the step to identify the error in a
machine-processable fashion. Many steps omit this because they do not
include the concept of errors identified by EQNames.</p>

<p>The <code class="tag-attribute">cause</code> is an EQName which
identifies an underlying error, if applicable. As an aide to
interoperability, this specification mandates particular error codes
for conditions that can arise in a variety of ways. For example,
<code class="code">err:XD0050</code> is raised for all errors in XPath expressions
in value templates. The implementation may use
<code class="tag-attribute">cause</code> to record an underlying error (for
example, the XPath error code).
<span id="impl-33">The error codes that appear in <code class="tag-attribute">cause</code>
are
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>

<p>If the error was caused by a specific document, or by the
location of some erroneous construction in a specific document, the
<code class="tag-attribute">href</code>, <code class="tag-attribute">line</code>,
<code class="tag-attribute">column</code>, and <code class="tag-attribute">offset</code> attributes identify this location. Generally, the error
location is identified either with line and column numbers or with an
offset from the beginning of the document, but not usually
both.</p>

<p>The content of the <code class="tag-element">c:error</code> element is any well-formed
XML. Specific steps, or specific implementations, may provide more
detail about the format of the content of an error
message.</p>

</div></section>
<section id="error-example" class="section"><div class="section-titlepage"><h5><bdi class="secno">15.7.3.3. </bdi>Error Example<a aria-label="§" class="self-link" href="#error-example"/></h5></div><div class="content">


<p>Consider the following XSLT stylesheet:</p>

<pre class="programlisting language-markup xml"><code>&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                version="1.0"&gt;

&lt;xsl:template match="/"&gt;
  &lt;xsl:message terminate="yes"&gt;
    &lt;xsl:text&gt;This stylesheet is &lt;/xsl:text&gt;
    &lt;emph&gt;pointless&lt;/emph&gt;
    &lt;xsl:text&gt;.&lt;/xsl:text&gt;
  &lt;/xsl:message&gt;
&lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;</code></pre>

<p>If it was used in a step named “xform” in a <a href="#p.try"><code class="tag-element">p:try</code></a>,
the following error document might be produced:</p>

<pre class="programlisting language-markup xml"><code>&lt;c:errors xmlns:c="http://www.w3.org/ns/xproc-step"&gt;
  &lt;c:error name="xform" type="p:xslt"
             href="style.xsl" line="6"&gt;This stylesheet is
&lt;emph&gt;pointless&lt;/emph&gt;.&lt;/c:error&gt;
&lt;/c:errors&gt;</code></pre>

<p>It is not an error for steps to generate non-standard error
output as long as it is well-formed.</p>
</div></section>
</div></section>

<section id="example-try" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">15.7.4. </bdi>Example<a aria-label="§" class="self-link" href="#example-try"/></h4></div><div class="content">

<p>A pipeline might attempt to process a document by dispatching it
to some web service. If the web service succeeds, then those results
are passed to the rest of the pipeline. However, if the web service
cannot be contacted or reports an error, the <a href="#p.catch"><code class="tag-element">p:catch</code></a> step
can provide some sort of default for the rest of the pipeline.</p>

<figure id="ex.p.trycatch" class="example-wrapper"><div class="title">Example 9. An Example Try/Catch</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:try&gt;
  &lt;p:http-request method="post" href="http://example.com/form-action"&gt;
    &lt;p:with-input&gt;
      &lt;p:inline content-type="application/x-www-form-urlencoded"
                &gt;name=W3C&amp;amp;spec=XProc&lt;/p:inline&gt;
    &lt;/p:with-input&gt;
  &lt;/p:http-request&gt;
  &lt;p:catch&gt;
    &lt;p:identity&gt;
      &lt;p:with-input port="source"&gt;
	&lt;p:inline&gt;
	  &lt;c:error&gt;HTTP Request Failed&lt;/c:error&gt;
	&lt;/p:inline&gt;
      &lt;/p:with-input&gt;
    &lt;/p:identity&gt;
  &lt;/p:catch&gt;
&lt;/p:try&gt;</code></pre></div></figure>
</div></section>
</div></section>

<section id="p.atomic" class="section"><div class="section-titlepage"><h3><bdi class="secno">15.8. </bdi>Atomic Steps<a aria-label="§" class="self-link" href="#p.atomic"/></h3></div><div class="content">


<p><span id="dt-atomic-step" class="termdef">[Definition: An <em class="glossterm">atomic
step</em> is a step that does not contain a subpipline when it
is invoked.]</span> The built-in steps described in [<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>] are atomic. Steps like <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> and
<a href="#p.try"><code class="tag-element">p:try</code></a> that always have a subpipline are
<em>not</em> atomic.
</p>

<p>Steps declared with <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> are atomic
<em>when they are invoked</em>. <span id="impl-34">It is
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> whether or not
atomic steps can be defined through some other means.</span>
</p>

<p>The following table gives an overview over the types of atomic
steps and the terms associated with these types:</p>

  <figure id="p.atomic.5" class="informaltable-wrapper"><div class="informaltable"><table border="0" style="border-collapse: collapse;border-top: 1px solid ; border-bottom: 1px solid ; border-left: 1px solid ; border-right: 1px solid ; "><colgroup><col class="tcol1" width="25%"/><col class="tcol2" width="25%"/><col class="tcol3" width="25%"/><col class="tcol4" width="25%"/></colgroup><thead><tr><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Provider</th><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Namespace (Prefix)</th><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Implemented in</th><th style="border-bottom: 1px solid ; ">Term</th></tr></thead><tbody><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; " rowspan="4">XProc processor</td><td style="border-right: 1px solid ; border-bottom: 1px solid ; " rowspan="2"><code class="uri">http://www.w3.org/ns/xproc</code> (<code class="literal">p:</code>)</td><td style="border-right: 1px solid ; border-bottom: 1px solid ; ">XProc</td><td style="border-bottom: 1px solid ; ">Processor-provided or standard (atomic) step implemented in XProc (there are currently no such steps
            defined)</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; ">Other technology</td><td style="border-bottom: 1px solid ; ">Processor-provided or standard (atomic) step</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; " rowspan="2">Other namespace</td><td style="border-right: 1px solid ; border-bottom: 1px solid ; ">XProc</td><td style="border-bottom: 1px solid ; ">Processor-provided extension (atomic) step implemented in XProc</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; ">Other technology</td><td style="border-bottom: 1px solid ; ">Processor-provided extension (atomic) step</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; " rowspan="2">Other (pipeline author or third party)</td><td style="border-right: 1px solid ; border-bottom: 1px solid ; " rowspan="2">Other namespace</td><td style="border-right: 1px solid ; border-bottom: 1px solid ; ">XProc</td><td style="border-bottom: 1px solid ; ">User-defined (atomic) (extension) step</td></tr><tr><td style="border-right: 1px solid ; ">Other technology</td><td>(Third-party) (atomic) extension step</td></tr></tbody></table></div></figure>
  <section id="p.standard" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.8.1. </bdi>Processor-provided standard atomic steps<a aria-label="§" class="self-link" href="#p.standard"/></h4></div><div class="content">
    
  <p>In addition to the six step types
        described in the preceding sections, XProc provides a standard library of atomic step types.
        The full vocabulary of standards steps is described in [<a href="#steps30"><span class="abbrev">Steps 3.0</span></a>].</p>
    <p>In addition to these standard atomic steps, other specifications by the same standardization 
      body may define other optional steps in the XProc namespace, for example, validation or file system
    related steps.</p>
    <p>Whether all steps in the XProc namespace are referred to as “standard (atomic) steps” or only the steps
    in the standard step library, depends on context and is intentionally kept fuzzy. Steps in the XProc 
    namespace that are not included in the standard step library may also be referred to as “optional standard 
    steps” if further distinction is required.</p>
  <p>All of the standard (including optional), atomic steps are invoked in the same way:</p>
      <p id="d2790e0" class="element-syntax element-syntax-language-construct"><code>&lt;<var>p:atomic-step</var><br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a> | <br/>     <a href="#p.with-option">p:with-option</a>)*<br/>&lt;/<var>p:atomic-step</var>&gt;</code></p>
      <p>Where “<em class="replaceable"><code>p:atomic-step</code></em>” <span class="rfc2119" id="p.standard.7.2">must</span> be in the XProc
        namespace and <span class="rfc2119" id="p.standard.7.3">must</span> either be declared in the standard library or in an optional
        standard library for the XProc version supported by the processor
        (see <a href="#versioning-considerations" title="Versioning Considerations">Section 13, “Versioning Considerations”</a>). </p>
  <p>Like the aforementioned processor-provided steps, hypothetical processor-provided atomic steps 
          <em>implemented in XProc</em> are also in the XProc namespace and need not be explicitly 
    imported by the surrounding pipeline.</p>
  </div></section>
    <section id="p.extension" class="section"><div class="section-titlepage"><h4><bdi class="secno">15.8.2. </bdi>Extension Steps<a aria-label="§" class="self-link" href="#p.extension"/></h4></div><div class="content"><p>Pipeline authors may also have
        access to additional steps not defined or described by this specification. Such
an <em class="glossterm"><a href="#dt-external-step">external step</a></em>
        is invoked just like the standard steps:</p>
      <p id="d2807e0" class="element-syntax element-syntax-language-construct"><code>&lt;<var>ext:atomic-step</var><br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a> | <br/>     <a href="#p.with-option">p:with-option</a>)*<br/>&lt;/<var>ext:atomic-step</var>&gt;</code></p>
      <p>Extension steps <span class="rfc2119" id="p.extension.4.1">must not</span> be in the XProc namespace and there
          <span class="rfc2119" id="p.extension.4.2">must</span> be a <em class="glossterm"><a href="#dt-visible">visible</a></em> step declaration at the point
        of use (see <a href="#scoping" title="Scoping of Names">Section 14.2, “Scoping of Names”</a>).</p>
<p>If the relevant step declaration has no
          <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>, then that step invokes the declared
<em class="glossterm"><a href="#dt-external-step">external step</a></em>, which
        the processor must know how to perform. These steps are implementation-defined extensions.
        </p>
<p>If the relevant step declaration has a <em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>, then
        that step runs the declared subpipeline. These steps are user- or implementation-defined
        extensions. Pipelines can refer to themselves (recursion is allowed), to pipelines defined
        in imported libraries, and to other pipelines in the same library if they are in a
        library.</p>
<p><a id="err.inline.S0010"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0010"><code class="errqname">err:XS0010</code></a>) if a
          pipeline contains a step whose specified inputs, outputs, and options do not <em class="glossterm"><a href="#dt-matches">match</a></em> the <em class="glossterm"><a href="#dt-signature">signature</a></em> for steps of
          that type.</p>
<p><a id="err.inline.D0017"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
            error</a></em> (<a href="#err.D0017"><code class="errqname">err:XD0017</code></a>) if the running pipeline attempts to invoke an
<em class="glossterm"><a href="#dt-external-step">external step</a></em> which the processor
          does not know how to perform.</p>
<p><span id="impl-35">The presence of other <em class="glossterm"><a href="#dt-compound-step">compound steps</a></em> is
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>; XProc provides no standard mechanism for
          defining them or describing what they can contain.</span>
        <a id="err.inline.S0048"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0048"><code class="errqname">err:XS0048</code></a>) to use a declared step as a
            <em class="glossterm"><a href="#dt-compound-step">compound step</a></em>.</p>
    </div></section>
</div></section>
</div></section>

<section id="other-elements" class="section"><div class="section-titlepage"><h2><bdi class="secno">16. </bdi>Other pipeline elements<a aria-label="§" class="self-link" href="#other-elements"/></h2></div><div class="content">


<section id="p.input" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.1. </bdi>p:input<a aria-label="§" class="self-link" href="#p.input"/></h3></div><div class="content">


<p>The declaration of an input identifies the name of the
port, whether or not the port accepts a sequence, whether or not the
port is a <em class="glossterm"><a href="#dt-primary-input-port">primary input port</a></em>, what content types it
accepts, and may provide a connection to default inputs for the port.</p>

<p>An input <em>declaration</em> has the following
form:</p>

<p id="d2838e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:input<br/>  <strong>port</strong> = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  select? = <var>XPathExpression</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:input&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:input</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">









<dl><dt><span class="term"><code class="tag-attribute">port</code></span></dt><dd>
<p>The <code class="tag-attribute">port</code> attribute defines the name
of the port. <a id="err.inline.S0011"/>It is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0011"><code class="errqname">err:XS0011</code></a>) to identify two ports with the same name on the same
step.</p>
</dd><dt><span class="term"><code class="tag-attribute">sequence</code></span></dt><dd>
<p>The <code class="tag-attribute">sequence</code> attribute determines
whether or not a sequence of documents is allowed on the port.
<a id="err.inline.D0006"/>If <code class="tag-attribute">sequence</code> is not
specified, or has the value false, then it is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.D0006"><code class="errqname">err:XD0006</code></a>) unless exactly one document appears on the declared
port.</p>
</dd><dt><span class="term"><code class="tag-attribute">primary</code></span></dt><dd>
<p>The <code class="tag-attribute">primary</code> attribute is used to
identify the <em class="glossterm"><a href="#dt-primary-input-port">primary input port</a></em>. An input port
is a <em class="glossterm"><a href="#dt-primary-input-port">primary input port</a></em> if
<code class="tag-attribute">primary</code> is specified with the value
<code class="literal">true</code> or if the step has only a single input port
and <code class="tag-attribute">primary</code> is not specified.
<a id="err.inline.S0030"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0030"><code class="errqname">err:XS0030</code></a>) to specify
that more than one input port is the primary.</p>
</dd><dt><span class="term"><code class="tag-attribute">select</code></span></dt><dd>
<p>If a connection is provided in the declaration, then
<code class="tag-attribute">select</code> may be used to select a portion of the
input identified by the <a href="#p.empty"><code class="tag-element">p:empty</code></a>, <a href="#p.document"><code class="tag-element">p:document</code></a>,
or <a href="#p.inline"><code class="tag-element">p:inline</code></a> elements in the
<code class="tag-element">p:input</code>.</p>

<p>With the exception that <code class="tag-element">p:input</code> cannot establish a connection 
to another step, what is said about the <code class="tag-attribute">select</code> 
attribute in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> equally applies to <code class="tag-element">p:input</code>.</p>

<p>The
<code class="tag-attribute">select</code> expression on <code class="tag-element">p:input</code> applies
<em>only</em> if the default connection is used. If an
explicit connection is provided by the caller, then the default select
expression is ignored.</p>
</dd><dt><span class="term"><code class="tag-attribute">content-types</code></span></dt><dd>
<p>The <code class="tag-attribute">content-types</code> attribute lists one
or more (space separated) content types that this input port will
accept. If the attribute is not specified, <code class="literal">*/*</code> is assumed.
See <a href="#specified-content-types" title="Specifying content types">Section 3.4, “Specifying content types”</a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd>
<p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The <code class="tag-attribute">exclude-inline-prefixes</code> allows the pipeline
author to exclude some namespace declarations in inline content, see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd></dl></div>

<p>On <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, any binding provided in
<code class="tag-element">p:input</code> is a default connection for the port, if no other
connection is provided, see <a href="#conn-prec" title="Connection precedence">Section 16.2.1, “Connection precedence”</a>.
</p>

<p id="note-pipe-excl">The <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> element is
explicitly excluded from a declaration because it would make the
default value of an input dependent on the execution of some part of
the pipeline. If a runtime binding is provided for an input port, implementations
<span class="rfc2119" id="note-pipe-excl.2">must not</span> attempt to dereference the default
bindings.
In the case of <a href="#p.document"><code class="tag-element">p:document</code></a> connections, the URI is dereferenced
only when the default connection is actually used, not during static analysis.
</p>

</div></section>
<section id="p.with-input" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.2. </bdi>p:with-input<a aria-label="§" class="self-link" href="#p.with-input"/></h3></div><div class="content">


<p>An input <em>connection</em> has the following
form:</p>

<p id="d2921e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:with-input<br/>  port? = <var>NCName</var><br/>  select? = <var>XPathExpression</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:with-input&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:with-input</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">





<dl><dt><span class="term"><code class="tag-attribute">port</code></span></dt><dd>
<p>If the <code class="tag-attribute">port</code> is specified, then this
is a binding for the specified port. If no port is specified, then:</p>

<div class="itemizedlist">



<ul><li>
<p>In a <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> or <a href="#p.for-each"><code class="tag-element">p:for-each</code></a>, it is a
binding for the step’s single, <em class="glossterm"><a href="#dt-anonymous-input">anonymous input</a></em> port.</p>
</li><li>
<p>In a <a href="#p.choose"><code class="tag-element">p:choose</code></a>, <a href="#p.when"><code class="tag-element">p:when</code></a> or <a href="#p.if"><code class="tag-element">p:if</code></a>, it is a
binding for the context item for the test expression(s).</p>
</li><li>
<p>Elsewhere, it is a binding for the primary input port of the
step in which it occurs.
<a id="err.inline.S0065"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0065"><code class="errqname">err:XS0065</code></a>) if there
is no primary input port.
</p>
</li></ul></div>
<p><a id="err.inline.S0043"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0043"><code class="errqname">err:XS0043</code></a>)
to specify a port name on <code class="tag-element">p:with-input</code> for <a href="#p.for-each"><code class="tag-element">p:for-each</code></a>,
  <a href="#p.viewport"><code class="tag-element">p:viewport</code></a>, <a href="#p.choose"><code class="tag-element">p:choose</code></a>, <a href="#p.when"><code class="tag-element">p:when</code></a>, or <a href="#p.if"><code class="tag-element">p:if</code></a>.
</p>
<p><a id="err.inline.S0114"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0114"><code class="errqname">err:XS0114</code></a>)
if a port name is specified and the step type being invoked does not have
an input port declared with that name.
</p>
<p><a id="err.inline.S0086"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0086"><code class="errqname">err:XS0086</code></a>)
to provide more than one <code class="tag-element">p:with-input</code> for the same port.
</p>

<p>If no connection is provided for a <em class="glossterm"><a href="#dt-primary-input-port">primary input
port</a></em>, the input will be connected to the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>. <a id="err.inline.S0032"/>It
is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0032"><code class="errqname">err:XS0032</code></a>) if no connection is provided
and the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> is
undefined.</p>
</dd><dt><span class="term"><code class="tag-attribute">select</code></span></dt><dd>
<p>If a <code class="tag-attribute">select</code> expression is
specified, it is effectively a filter on the input. The expression
will be evaluated once for each document that appears on the port,
using that document as the context item. The result of evaluating the
expression (on each document that appears, in the order they arrive)
will be the sequence of items that the step receives on the
port.</p>

<p>The rules as stated in <a href="#creating-documents-from-xdm-step-results" title="Creating documents from XDM step results">Section 3.3, “Creating documents from XDM step results”</a> will be applied to the members
of this sequence and will turn these into separate documents. <a id="err.inline.D0016"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0016"><code class="errqname">err:XD0016</code></a>) if the select expression on a <a href="#p.input"><code class="tag-element">p:input</code></a> or
<code class="tag-element">p:with-input</code> returns attribute nodes or function items.</p>

<p>If no documents are received, the expression is not evaluated and the
step receives no input on the port.</p>

<p>For example:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:with-input port="source"&gt;
  &lt;p:document href="http://example.org/input.html"/&gt;
&lt;/p:with-input&gt;</code></pre>

<p>provides a single document, but</p>

<pre class="programlisting language-markup xml"><code>&lt;p:with-input xmlns:html="http://www.w3.org/1999/xhtml"
              port="source" select="//html:div"&gt;
  &lt;p:document href="http://example.org/input.html"/&gt;
&lt;/p:with-input&gt;</code></pre>

<p>provides a sequence of zero or more documents, one for each
<code class="code">html:div</code> in <code class="uri">http://example.org/input.html</code>.
(Note that in the case of nested <code class="code">html:div</code> elements, this
will result in the same content being returned in several
documents.)</p>

<p>A select expression can equally be applied to input read from
another step. This input:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:with-input xmlns:html="http://www.w3.org/1999/xhtml"
              port="source" select="//html:div"&gt;
  &lt;p:pipe step="origin" port="result"/&gt;
&lt;/p:with-input&gt;</code></pre>

<p>provides a sequence of zero or
more documents, one for each <code class="code">html:div</code> in the document (or
each of the documents) that is read from the <code class="literal">result</code>
port of the step named <code class="literal">origin</code>.</p>

<p>The base URI of the document that results from a select
expression is the base URI of the matched element or document. The document
does not have a base URI if it results from selecting an atomic value.</p>

</dd><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd>
<p>The <code class="tag-attribute">href</code> attribute is a shortcut for
a <a href="#p.document"><code class="tag-element">p:document</code></a> child with an <code class="tag-attribute">href</code> attribute
having the same value as this <code class="tag-attribute">href</code> attribute.
</p>

<p><a id="err.inline.S0081"/>If <code class="tag-attribute">href</code> is specified,
it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0081"><code class="errqname">err:XS0081</code></a>) if
any child elements other than <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> and
<a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> are present.</p>

<p><a id="err.inline.S0085"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0085"><code class="errqname">err:XS0085</code></a>) if both
a <code class="tag-attribute">href</code> attribute and a
<code class="tag-attribute">pipe</code> attribute are present.</p>
</dd><dt><span class="term"><code class="tag-attribute">pipe</code></span></dt><dd>
<p>The <code class="tag-attribute">pipe</code> attribute is a shortcut for one or
more <a href="#p.pipe"><code class="tag-element">p:pipe</code></a> children. The attribute value <span class="rfc2119" id="p.with-input.5.4.2.1.3">must</span> be
whitespace-separated list of tokens or empty.
<a id="err.inline.S0090"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0090"><code class="errqname">err:XS0090</code></a>) if the value
of the <code class="tag-attribute">pipe</code> attribute contains any tokens not
of the form <em class="replaceable"><code>port-name</code></em>,
<em class="replaceable"><code>port-name@step-name</code></em>, or <em class="replaceable"><code>@step-name</code></em>.

If “<em class="replaceable"><code>port-name</code></em>” is omitted,
the connection is to the primary output port of
the step named “<em class="replaceable"><code>step-name</code></em>”.
If “<code class="literal">@<em class="replaceable"><code>step-name</code></em></code>” is omitted,
the connection is to the specified port on the same step as the step associated with the
default readable port. If the value is empty, the connection is to
the default readable port.</p>
<p><a id="err.inline.S0082"/>If <code class="tag-attribute">pipe</code> is specified,
it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0082"><code class="errqname">err:XS0082</code></a>)
any child elements other than <a href="#p.documentation"><code class="tag-element">p:documentation</code></a> and
<a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> are present.</p>
<p><a id="err.inline.S0085.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0085"><code class="errqname">err:XS0085</code></a>) if both
an <code class="tag-attribute">href</code> attribute and a <code class="tag-attribute">pipe</code>
attribute are present.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The <code class="tag-attribute">exclude-inline-prefixes</code> allows the pipeline
author to exclude some namespace declarations in inline content, see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd></dl></div>

<p>A <code class="tag-element">p:with-input</code> element with no children
(<em class="foreignphrase">e.g.</em>, “<code class="code">&lt;p:with-input/&gt;</code>”)
is treated implicitly as if it contained only “<code class="code">&lt;p:pipe/&gt;</code>”, which is
in turn equivalent to a binding to the default readable port.
</p>

<p>If the <code class="tag-element">p:with-input</code> contains elements not in the XProc namespace,
they are <a href="#implicit-inlines">implicit inlines</a>.</p>

<section id="conn-prec" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.2.1. </bdi>Connection precedence<a aria-label="§" class="self-link" href="#conn-prec"/></h4></div><div class="content">


<p>XProc 3.0 introduces a number of new connection defaulting
mechanisms to make pipeline authoring easier. Defaults only apply
if there’s no explicit connection, and they apply differently to
primary and secondary inputs.</p>

<div class="variablelist">


<dl><dt><span class="term">Primary input ports</span></dt><dd>
<p>For a given primary input port:</p>
<div class="orderedlist">



<ol style="list-style: decimal;"><li>
<p>If there is a <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> for that port and it provides a
binding, even an implicit one, that binding is used.
</p>
</li><li>
<p>If there’s no <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> for that port and there is a default
readable port, the input will be connected to the default readable port.
</p>
</li><li>
<p>If there’s no <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> for that port and there’s no default
readable port, then the default connection from the declaration’s <a href="#p.input"><code class="tag-element">p:input</code></a>
will be used. <a id="err.inline.S0032.1"/>It will be a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0032"><code class="errqname">err:XS0032</code></a>) 
if there is no default connection.
</p>
</li></ol></div>
</dd><dt><span class="term">Secondary input ports</span></dt><dd>
<p>For a given secondary input port:</p>
<div class="orderedlist">


<ol style="list-style: decimal;"><li>
<p>If there is a <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> for that port and it provides a
binding, even an implicit one, that binding is used.
</p>
</li><li>
<p>If there’s no <a href="#p.with-input"><code class="tag-element">p:with-input</code></a> for that port
then the default connection from the declaration’s <a href="#p.input"><code class="tag-element">p:input</code></a>
will be used. <a id="err.inline.S0032.2"/>It will be a <em class="glossterm"><a href="#dt-static-error">static 
error</a></em> (<a href="#err.S0032"><code class="errqname">err:XS0032</code></a>) if there is no default connection.
</p>
</li></ol></div>
</dd></dl></div>
</div></section>
</div></section>



<section id="p.output" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.3. </bdi>p:output<a aria-label="§" class="self-link" href="#p.output"/></h3></div><div class="content">


<p>A <code class="tag-element">p:output</code> identifies an output port.</p>

<p id="d3030e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var> /&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:output</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">




<dl><dt><span class="term"><code class="tag-attribute">port</code></span></dt><dd>
<p>The <code class="tag-attribute">port</code> attribute defines the name
of the port. <a id="err.inline.S0011.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0011"><code class="errqname">err:XS0011</code></a>) to identify two ports with the same name on the same
step.</p>
</dd><dt><span class="term"><code class="tag-attribute">sequence</code></span></dt><dd>
<p>An output declaration can indicate if a sequence of documents is
allowed to appear on the declared port. If <code class="tag-attribute">sequence</code> is specified with the value <code class="literal">true</code>,
then a sequence is allowed. <a id="err.inline.D0007"/>If <code class="tag-attribute">sequence</code> is not specified on
<code class="tag-element">p:output</code>, or has the value false, then it is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0007"><code class="errqname">err:XD0007</code></a>) if the step does not produce
exactly one document on the declared port.</p>
</dd><dt><span class="term"><code class="tag-attribute">primary</code></span></dt><dd>
<p>The <code class="tag-attribute">primary</code> attribute is used to
identify the primary output port. An output port is a primary output
port if <code class="tag-attribute">primary</code> is specified with the
value <code class="literal">true</code> or if the step has only a single output
port and primary is not specified. <a id="err.inline.S0014"/>It is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0014"><code class="errqname">err:XS0014</code></a>) to identify more than one output
port as primary.</p>
</dd><dt><span class="term"><code class="tag-attribute">content-types</code></span></dt><dd>
<p>An output declaration can indicate the content types of the
  documents appearing on that port. If <code class="tag-attribute">content-types</code>
  is specified then only documents matching these content types are allowed
  to appear on that port. If the attribute is not specified,
  <code class="literal">*/*</code> is assumed. <a id="err.inline.D0042"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0042"><code class="errqname">err:XD0042</code></a>)
  if a document arrives on an output port whose content type is not accepted
  by the output port specification.</p>

<div class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>Implementations are free to perform static checking of the
connected ports and indicate that the content types of the connected
ports will not match, however they <span class="rfc2119" id="p.output.5.4.2.2.2.1">must not</span> raise an
error statically.
</p>
</div></div>

</dd></dl></div>

<p>On <em class="glossterm"><a href="#dt-compound-step">compound
steps</a></em>, the declaration <span class="rfc2119" id="p.output.6.2">may</span> be
accompanied by a <em class="glossterm"><a href="#dt-connection">connection</a></em> for the
output.</p>

<p id="d3077e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:output&gt;</code></p>

<p>The additional attributes that can appear on an output declaration
on a compound step are:</p>

<div class="variablelist">



<dl><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd>
<p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">pipe</code></span></dt><dd>
<p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The <code class="tag-attribute">exclude-inline-prefixes</code> allows the pipeline
author to exclude some namespace declarations in inline content, see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd></dl></div>

<p>Finally, on a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> that declares a pipeline,
the <code class="tag-element">p:output</code> can specify serialization options.
</p>

<p id="d3111e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  serialization? = <var>map(xs:QName,item()*)</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:output&gt;</code></p>

<div class="variablelist">

<dl><dt><span class="term"><code class="tag-attribute">serialization</code></span></dt><dd>
<p>The <code class="tag-attribute">serialization</code> attribute can
be used to provide <a href="#serialization">serialization
parameters</a>.
</p>
</dd></dl></div>

<p><a id="err.inline.S0029"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0029"><code class="errqname">err:XS0029</code></a>)
to specify a connection for a <code class="tag-element">p:output</code> inside a
<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> for an <em class="glossterm"><a href="#dt-external-step">external step</a></em>.</p>

<p>If a connection is provided for a <code class="tag-element">p:output</code>, documents
are <em>read from</em> that connection and those documents
form the output that <em>is written</em> to the output
port. In other words, placing a <a href="#p.document"><code class="tag-element">p:document</code></a> inside a
<code class="tag-element">p:output</code> causes the processor to <em>read that
document</em> and provide it on the output port. It
<em>does not</em> cause the processor to
<em>write</em> the output to that document.</p>

  <section id="serialization" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.3.1. </bdi>Serialization parameters<a aria-label="§" class="self-link" href="#serialization"/></h4></div><div class="content">
    
    
    
    <p id="p.serialization">The <code class="tag-attribute">serialization</code> attribute
      allows the user to request serialization parameters on an output port. These parameters
      control serialization as defined by [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>].</p>
    
    <p>If the pipeline processor serializes the output on a port, it <span class="rfc2119" id="serialization.3.1">must</span> use the serialization parameters specified. If a
      <code class="code">serialization</code> document property is present, the serialization properties
      specified by the <code class="code">serialization</code> document property must be merged with the
      properties specified with the <code class="tag-attribute">serialization</code> attribute first.
      For further details see the explanation of the <code class="code">serialization</code> document
      property in <a href="#document-properties" title="Document Properties">Section 3.1, “Document Properties”</a>.</p>
    <p>If the processor is not serializing (if, for example, the pipeline has been called
      from another pipeline), then serialization does not apply. The serialization parameter map
      is computed (and must therefore be statically and syntactically valid), but the processor
      <span class="rfc2119" id="serialization.4.1">must not</span> raise an error if the output could
      not be serialized with those parameters. </p>
    
    <p><a id="err.inline.D0020"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0020"><code class="errqname">err:XD0020</code></a>) if the combination
      of serialization options specified or defaulted is not allowed.
      Implementations <span class="rfc2119" id="serialization.5.2">must</span> check that all of the specified serialization
      options are allowed if they serialize the specified output. If the specified output is
      not being serialized implementations <span class="rfc2119" id="serialization.5.3">may</span> but are not required to
      check that the specified options are allowed.</p>
    
    <p>In order to be consistent with the rest of this specification, values for boolean
      serialization parameters can also use one of the XML Schema lexical forms for boolean:
      <code class="literal">true</code>, <code class="literal">false</code>, <code class="literal">1</code>, or <code class="literal">0</code>. This is different from the [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>] specification, which uses <code class="literal">yes</code> and <code class="literal">no</code>. No change in
      semantics is implied by this different spelling.</p>
    
    <p><span id="impl-36">The default value of any serialization parameters not specified on a
      particular output is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
    
    <section id="serialization-method" class="section"><div class="section-titlepage"><h5><bdi class="secno">16.3.1.1. </bdi>Serialization method<a aria-label="§" class="self-link" href="#serialization-method"/></h5></div><div class="content">
      
      
      <p>The <code class="option">method</code> option controls the serialization method used by this
        component with standard values of <code class="literal">html</code>, <code class="literal">xml</code>,
        <code class="literal">xhtml</code>, <code class="literal">text</code> and <code class="literal">json</code>. Only
        the <code class="literal">xml</code> value is required to be supported. <span id="impl-37">Implementations may
          support other method values but their results are
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
      
      <p>If the serialization parameter <code class="literal">method</code> is not specified, the
        processor <span class="rfc2119" id="serialization-method.3.2">should</span> select a method based on the document’s
        <code class="literal">content-type</code> property:</p>
      
      <div class="itemizedlist">
        
        
        
        
        
        
      <ul><li>
          <p>For documents with content types <code class="literal">application/xml</code>,
            <code class="literal">text/xml</code>, and <code class="literal">application/*+xml</code> (except for
            <code class="literal">application/xhtml+xml</code>), serialization method
            <code class="literal">xml</code> should be used.</p>
        </li><li>
          <p>For documents with content type <code class="literal">application/xhtml+xml</code>
            serialization method <code class="literal">xhtml</code> should be used.</p>
        </li><li>
          <p>For documents with content type <code class="literal">text/html</code> serialization
            method <code class="literal">html</code> should be used.</p>
        </li><li>
          <p>For documents with <em class="glossterm"><a href="#dt-text-media-type">text media
            types</a></em> serialization method <code class="literal">text</code> should be
            used.</p>
        </li><li>
          <p>For documents with <em class="glossterm"><a href="#dt-JSON-media-type">JSON media
            types</a></em> serialization method <code class="literal">json</code> should be
            used.</p>
        </li><li>
          <p>
            <span id="impl-38">The serialization method for documents with other media types is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
          </p>
        </li></ul></div>
      <p>If serialization method <code class="literal">xml</code> or <code class="literal">html</code> (if
        supported) is chosen, either explicitly or implicitly, the following default values
        <span class="rfc2119" id="serialization-method.5.3">must</span> be used:</p>
      <div class="itemizedlist">
        
        
        
      <ul><li>
          <p>Parameter <code class="literal">version</code> is set to <code class="literal">1.0</code>.</p>
        </li><li>
          <p>Parameter <code class="literal">encoding</code> is set to <code class="literal">UTF-8</code>.</p>
        </li><li>
          <p>Parameter <code class="literal">omit-xml-declaration</code> is set to
            <code class="literal">false</code>.</p>
        </li></ul></div>
      
    </div></section>
    
    <section id="serialization-minimal-conformance" class="section"><div class="section-titlepage"><h5><bdi class="secno">16.3.1.2. </bdi>Minimal conformance<a aria-label="§" class="self-link" href="#serialization-minimal-conformance"/></h5></div><div class="content">
      
      
      <p>A minimally conforming implementation must support the <code class="code">xml</code> output
        method with the following option values:</p>
      
      <div class="itemizedlist">
        
        
        
      <ul><li>
          <p>The <code class="code">version</code> must support the value <code class="code">1.0</code>.</p>
        </li><li>
          <p>The <code class="code">encoding</code> must support the value <code class="code">UTF-8</code>.</p>
        </li><li>
          <p>The <code class="code">omit-xml-declaration</code> must be supported.</p>
        </li></ul></div>
      
      <p>All other option values may be ignored for the <code class="code">xml</code> output
        method.</p>
      
      <p>If a processor chooses to implement an option for serialization, it
        <span class="rfc2119" id="serialization-minimal-conformance.5.1">must</span> conform to the semantics defined in the [<a href="#xml-serialization-31"><span class="abbrev">Serialization</span></a>] specification.</p>
    </div></section>
    
  </div></section>
</div></section>



<section id="variables-options" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.4. </bdi>Variables and Options<a aria-label="§" class="self-link" href="#variables-options"/></h3></div><div class="content">


<p>Variables and options provide a mechanism for pipeline authors
to construct temporary results and hold onto them for reuse.</p>

<p>Variables are created in compound steps and, like XSLT
variables, are single assignment, though they may be shadowed by
subsequent declarations of other variables with the same name.</p>

<p>Options can be declared on atomic or compound steps. The value
of an option can be specified by the caller invoking the step. Any
value specified by the caller takes precedence over the default value
of the option.</p>

<section id="p.variable" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.4.1. </bdi>p:variable<a aria-label="§" class="self-link" href="#p.variable"/></h4></div><div class="content">


<p>A <code class="tag-element">p:variable</code> declares a variable and associates a
value with it. Variable declarations may optionally specify the type
of the variable using an
[<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>]
<a href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</a>.
</p>

<p id="d3223e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:variable<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  <strong>select</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:variable&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:variable</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">








<dl><dt><span class="term"><code class="tag-attribute">name</code></span></dt><dd>
<p>The name of the variable <span class="rfc2119" id="p.variable.5.1.2.1.1">must</span> be an EQName. If
it does not contain a prefix then it is in no namespace. <a id="err.inline.S0028"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0028"><code class="errqname">err:XS0028</code></a>) to declare an
option or variable in the XProc namespace. <a id="err.inline.S0087"/>It is
a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0087"><code class="errqname">err:XS0087</code></a>) if the name attribute on
<a href="#p.option"><code class="tag-element">p:option</code></a> or <code class="tag-element">p:variable</code> has a prefix which is not
bound to a namespace.
</p>
<p><a id="err.inline.S0088"/>It is
a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0088"><code class="errqname">err:XS0088</code></a>) if the qualified name of a
<code class="tag-element">p:variable</code> <em class="glossterm"><a href="#dt-shadow">shadows</a></em>
the name of a static option.
</p>
</dd><dt><span class="term"><code class="tag-attribute">as</code></span></dt><dd>
<p>The type of the value may be specified in the
<code class="tag-attribute">as</code> attribute using an
XPath sequence type, see <a href="#varopt-types" title="Variable and option types">Section 11.4, “Variable and option types”</a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">select</code></span></dt><dd>
<p>The variable’s value is specified with a
<code class="tag-attribute">select</code> attribute. The
<code class="tag-attribute">select</code> attribute <span class="rfc2119" id="p.variable.5.3.2.1.3">must</span> be
specified. The content of the <code class="tag-attribute">select</code>
attribute is an XPath expression which will be evaluated to provide
the value of the variable.
<a id="err.inline.S0094"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0094"><code class="errqname">err:XS0094</code></a>) if
a <code class="tag-element">p:variable</code> does not have a select attribute.
</p>
<p>The <code class="tag-attribute">select</code> expression
is evaluated as an XPath expression using the appropriate context as
described in <a href="#xpath-context" title="XPath in XProc">Section 7.2.2, “XPath in XProc”</a>, for the enclosing
<em class="glossterm"><a href="#dt-container">container</a></em>.
<span id="impl-39">The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>
</dd><dt><span class="term"><code class="tag-attribute">collection</code></span></dt><dd>
<p>If <code class="tag-attribute">collection</code> is
unspecified or has the value <code class="literal">false</code>, then it has
no effect.
</p>

<p>If <code class="tag-attribute">collection</code> is <code class="literal">true</code>,
the context item is undefined. All of the documents that appear on the
connection for the <code class="tag-element">p:variable</code> will be available as the
default collection within <code class="tag-attribute">select</code> expression.</p>
</dd><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd>
<p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">pipe</code></span></dt><dd>
  <p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The <code class="tag-attribute">exclude-inline-prefixes</code> allows the pipeline
author to exclude some namespace declarations in inline content, see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd></dl></div>

<p>Steps are connected together by their input and output
ports. Variables are connected to steps by their input, which provides
the context node for the expression, and by the expressions that contain
references to them. Any step which contains a reference to a variable
effectively consumes the “output” of the variable.
<a id="err.inline.S0076"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0076"><code class="errqname">err:XS0076</code></a>) if
there are any loops in the connections between steps and variables:
no step can refer to a variable if there is any sequence of connections
from that step that leads back to the input that provides the context
node for the expression that defines the value of the variable.
</p>

<p>If <code class="tag-attribute">collection</code> is true, the context
item for the expression is undefined. Otherwise, the context item for
the expression comes from the document connections, if they are
specified. If they are not specified, the context item comes from the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> (computed as if
<code class="tag-element">p:variable</code> was an atomic step). If no <em class="glossterm"><a href="#dt-default-readable-port">default
readable port</a></em> exists, the context item is
undefined.</p>

<p><a id="err.inline.D0001.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.
<a id="err.inline.D0065.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0065"><code class="errqname">err:XD0065</code></a>)
to refer to the context item, size, or position if a sequence of documents
appears on the connection that provides the context.
</p>

<p>Since all <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> are present
in the Processor XPath Context as variable bindings, <code class="tag-attribute">select</code> expressions may refer to the value of
<em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> by variable reference.</p>
</div></section>



<section id="p.option" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.4.2. </bdi>p:option<a aria-label="§" class="self-link" href="#p.option"/></h4></div><div class="content">


<p>A <code class="tag-element">p:option</code> declares an option and associates a
default value with it. Option declarations may optionally specify the type
of the option using an
[<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>]
<a href="https://www.w3.org/TR/xpath-31/#dt-sequence-type">sequence Type</a>.
</p>

<p id="d3297e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:option<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  values? = <var>string</var><br/>  static? = <var>boolean</var><br/>  required? = <var>boolean</var><br/>  select? = <var>XPathExpression</var><br/>  visibility? = <var>private|public</var> /&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:option</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">








<dl><dt><span class="term"><code class="tag-attribute">name</code></span></dt><dd>
<p>The name of the option <span class="rfc2119" id="p.option.5.1.2.1.1">must</span> be an EQName. If
it does not contain a prefix then it is in no namespace.
<a id="err.inline.S0028.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0028"><code class="errqname">err:XS0028</code></a>) to declare an
option or variable in the XProc namespace. <a id="err.inline.S0087.1"/>It is
a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0087"><code class="errqname">err:XS0087</code></a>) if the name attribute on
<code class="tag-element">p:option</code> or <a href="#p.variable"><code class="tag-element">p:variable</code></a> has a prefix which is not
bound to a namespace.
</p>
<p><a id="err.inline.S0088.1"/>It is
a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0088"><code class="errqname">err:XS0088</code></a>) if the qualified name of a
<code class="tag-element">p:option</code> <em class="glossterm"><a href="#dt-shadow">shadows</a></em>
the name of a static option.
</p>
</dd><dt><span class="term"><code class="tag-attribute">as</code></span></dt><dd>
<p>The type of the value may be specified in the
<code class="tag-attribute">as</code> attribute using an
XPath sequence type, see <a href="#varopt-types" title="Variable and option types">Section 11.4, “Variable and option types”</a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">values</code></span></dt><dd>
<p>A list of acceptable values may be specified in the <code class="tag-attribute">values</code> attribute. If specified, the value
of the <code class="tag-attribute">values</code> attribute
<span class="rfc2119" id="p.option.5.3.2.1.3">must</span> be a list of atomic values expressed as an XPath sequence,
for example: <code class="code">('one', 'two', 'three')</code>.
<a id="err.inline.S0101"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0101"><code class="errqname">err:XS0101</code></a>) if the
values list is not an XPath sequence of atomic values.
</p>
<p>The values list is an additional constraint on the acceptable
values for the option. <a id="err.inline.D0019"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.D0019"><code class="errqname">err:XD0019</code></a>) if an option declares a list of acceptable values
and an attempt is made to specify a value that is not a member of that
list.
</p>
<p>The option value must satisfy the <code class="tag-attribute">as</code>
type, if one is provided, and must be equal to (XPath “<code class="code">eq</code>”) one of the listed
<code class="tag-attribute">values</code>.
It is possible to combine <code class="tag-attribute">as</code> and
<code class="tag-attribute">values</code> in ways that exclude all
actual values (for example, <code class="code">as="xs:integer"</code> and
<code class="code">values="(1.5,’pi’)"</code>). Doing so will make it impossible
to specify a value for the option.</p>
</dd><dt><span class="term"><code class="tag-attribute">static</code></span></dt><dd>
<p>An indication of whether the option is to be evaluated
statically or not. See <a href="#statics" title="Static Options">Section 11.3, “Static Options”</a>.
If <code class="tag-attribute">static</code> is not specified, it
defaults to “<code class="code">false</code>”.</p>
</dd><dt><span class="term"><code class="tag-attribute">required</code></span></dt><dd>
<p>An option may declare that it is required by specifying
the value <code class="literal">true</code> for the
<code class="tag-attribute">required</code> attribute. <a id="err.inline.S0018"/>If an
option is required, it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0018"><code class="errqname">err:XS0018</code></a>) to
invoke the step without specifying a value for that
option. If <code class="tag-attribute">required</code> is not specified,
it defaults to “<code class="code">false</code>”.</p>
</dd><dt><span class="term"><code class="tag-attribute">select</code></span></dt><dd>
<p>If an option is not required, its default value may be specified with a
<code class="tag-attribute">select</code> attribute.
If no default value is specified, the default value is the empty sequence.
</p>

<p>If specified, the content of the
<code class="tag-attribute">select</code> attribute is an XPath expression
which will be evaluated to provide the default value for the option.
</p>

<p>The default value of an option is specified with an XPath
expression. It must be a statically valid expression at that point.
Consequently, if it contains option references, these can only be
references to preceding non-static options on the step or to in-scope static options.
<a id="err.inline.D0001.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.
This error will always arise if the <code class="tag-attribute">select</code> expression
refers to the context item because there can never be a context item for
<code class="tag-element">p:option</code> default values.
</p>

<p><span id="impl-40">The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>
</dd><dt><span class="term"><code class="tag-attribute">visibility</code></span></dt><dd>
<p>If the <code class="tag-element">p:option</code> is a child of a <a href="#p.library"><code class="tag-element">p:library</code></a>,
the <code class="tag-attribute">visibility</code> attribute controls whether
the option is visible to an importing pipeline. If
<code class="tag-attribute">visibility</code> is set to “<code class="literal">private</code>”,
the option is visible inside the <a href="#p.library"><code class="tag-element">p:library</code></a> but not visible to
any pipeline importing the <a href="#p.library"><code class="tag-element">p:library</code></a>. If the visibility attribute is
  missing, “<code class="literal">public</code>” is assumed. If the <code class="tag-element">p:option</code> is not a child 
  of <code class="tag-element">a p:library</code> the attribute has no effect and is ignored.
</p>
</dd></dl></div>

<p><a id="err.inline.S0004"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0004"><code class="errqname">err:XS0004</code></a>)
to declare two or more options on the same step with the same
name.</p>

<p>The following errors apply to options:</p>

<div class="itemizedlist">


<ul><li>
<p><a id="err.inline.S0017"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0017"><code class="errqname">err:XS0017</code></a>)
to specify that an option is both <code class="tag-attribute">required</code>
<em>and</em> has a default value.</p>
</li><li>
<p><a id="err.inline.S0095"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0095"><code class="errqname">err:XS0095</code></a>)
to specify that an option is both <code class="tag-attribute">required</code>
<em>and</em> static.</p>
</li></ul></div>

<p>The pipeline author may use <a href="#p.with-option"><code class="tag-element">p:with-option</code></a> on a step
when it is invoked. Values specified with <a href="#p.with-option"><code class="tag-element">p:with-option</code></a>
override any default values specified.</p>
</div></section>



<section id="p.with-option" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.4.3. </bdi>p:with-option<a aria-label="§" class="self-link" href="#p.with-option"/></h4></div><div class="content">


<p>A <code class="tag-element">p:with-option</code> provides an actual value for an
option when a step is invoked.</p>

<p id="d3395e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:with-option<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  <strong>select</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:with-option&gt;</code></p>

<p>The attributes that can appear on <code class="tag-element">p:with-option</code> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">







<dl><dt><span class="term"><code class="tag-attribute">name</code></span></dt><dd>
<p>The name of the option <span class="rfc2119" id="p.with-option.5.1.2.1.1">must</span> be a EQName. If it
does not contain a prefix then it is in no namespace.
<a id="err.inline.S0031"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0031"><code class="errqname">err:XS0031</code></a>) to use an
option name in <code class="tag-element">p:with-option</code> if the step type being invoked
has not declared an option with that name.
</p>

<p><a id="err.inline.S0080"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0080"><code class="errqname">err:XS0080</code></a>)
to include more than one <code class="tag-element">p:with-option</code> with the same option
name as part of the same step invocation.</p>

</dd><dt><span class="term"><code class="tag-attribute">as</code></span></dt><dd>
<p>The type of the value may be specified in the
<code class="tag-attribute">as</code> attribute using an
XPath sequence type, see <a href="#varopt-types" title="Variable and option types">Section 11.4, “Variable and option types”</a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">select</code></span></dt><dd>
<p>The actual value is specified with a
<code class="tag-attribute">select</code> attribute. The
<code class="tag-attribute">select</code> attribute <span class="rfc2119" id="p.with-option.5.3.2.1.3">must</span> be
specified. The value of the <code class="tag-attribute">select</code>
attribute is an XPath expression which will be evaluated to provide
the value of the option.</p>
</dd><dt><span class="term"><code class="tag-attribute">collection</code></span></dt><dd>
<p>If <code class="tag-attribute">collection</code> is
unspecified or has the value <code class="literal">false</code>, then it has
no effect.</p>
<p>If <code class="tag-attribute">collection</code> is <code class="literal">true</code>,
the context item is undefined. All of the documents that appear on the
connection for the <code class="tag-element">p:with-option</code> will be available as the
default collection within <code class="tag-attribute">select</code> expression.</p>
</dd><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd>
<p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">pipe</code></span></dt><dd>
  <p>As described in <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The <code class="tag-attribute">exclude-inline-prefixes</code> allows the pipeline
author to exclude some namespace declarations in inline content, see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd></dl></div>

<p>Any <code class="tag-element">p:with-option</code> which contains a reference to a variable
effectively consumes the “output” of the <a href="#p.variable"><code class="tag-element">p:variable</code></a> or
<a href="#p.option"><code class="tag-element">p:option</code></a> that defines that variable.
<a id="err.inline.S0076.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0076"><code class="errqname">err:XS0076</code></a>) if
there are any loops in the connections between steps and variables:
no step can refer to a variable if there is any sequence of connections
from that step that leads back to the input that provides the context
node for the expression that defines the value of the variable.
</p>

<p>If <code class="tag-attribute">collection</code> is true, the context
item for the expression is undefined. Otherwise, the context item for
the expression comes from the document connections, if they are
specified. If they are not specified, the context item comes from the
<em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em> of the step.
If no <em class="glossterm"><a href="#dt-default-readable-port">default
readable port</a></em> exists, the context item is
undefined.</p>

<p><a id="err.inline.D0001.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.
<a id="err.inline.D0065.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0065"><code class="errqname">err:XD0065</code></a>)
to refer to the context item, size, or position if a sequence of documents
appears on the connection that provides the context.
</p>

<p>Since all <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> are present
in the Processor XPath Context as variable bindings, <code class="tag-attribute">select</code> expressions may refer to the value of
<em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> by variable reference.
</p>

<p><a id="err.inline.S0092"/>It is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0092"><code class="errqname">err:XS0092</code></a>) if a <code class="tag-element">p:with-option</code> attempts to change
the value of an option that is declared static.
See <a href="#statics" title="Static Options">Section 11.3, “Static Options”</a>.</p>
  
  <section id="option-shortcut" class="section"><div class="section-titlepage"><h5><bdi class="secno">16.4.3.1. </bdi>Syntactic Shortcut for Option Values<a aria-label="§" class="self-link" href="#option-shortcut"/></h5></div><div class="content">
    
    
    <p>Namespace qualified attributes on a step are <em class="glossterm"><a href="#dt-extension-attribute">extension attributes</a></em>.
      Attributes, other than <code class="tag-attribute">name</code>, that are
      not namespace qualified are treated as a syntactic shortcut for
      specifying the value of an option. In other words, the following two
      steps are equivalent:</p>
    
    <p>The first step uses the standard <a href="#p.with-option"><code class="tag-element">p:with-option</code></a>
      syntax:</p>
    
    <pre class="programlisting language-markup xml"><code>&lt;ex:stepType&gt;
  &lt;p:with-option name="option-name" select="'some value'"/&gt;
&lt;/ex:stepType&gt;</code></pre>
    
    <p>The second step uses the syntactic shortcut:</p>
    
    <pre class="programlisting language-markup xml"><code>&lt;ex:stepType option-name="some value"/&gt;</code></pre>
    
    <p>There are some limitations to this shortcut
      syntax:</p>
    
    <div class="orderedlist">
      
      
    <ol style="list-style: decimal;"><li>
        <p>It only applies to option names that are not in a
          namespace.</p>
      </li><li>
        <p>It only applies to option names that are not otherwise used on
          the step, such as “<code class="literal">name</code>”.</p>
      </li></ol></div>
    
    <p>For the value of an option’s syntactic shortcut attribute, the following applies:</p>
    <div class="itemizedlist">
      
      
    <ul><li>
              <p><span id="dt-map-attribute" class="termdef">[Definition: A <em class="glossterm">map attribute</em> is an option’s syntactic
                  shortcut attribute for which the option’s sequence type is a map or array.]</span> The attribute’s value
                is interpreted directly as an XPath expression, which must result in a value of the applicable
                datatype.</p>
        
      </li><li>
        <p>For any other option’s sequence type it is considered an <em class="glossterm"><a href="#dt-attribute-value-template">attribute value template</a></em>.
                The context node for the attribute value template comes from the default readable port for the step on
                which they occur. If there is no such port, the context node is undefined.</p>
       
<p>As with other attribute value templates, the attribute’s string value,
as an <code class="type">xs:untypedAtomic</code>, is used as the value of the option. Function
conversion rules apply to convert this untyped atomic value to the
option’s sequence type.</p>
      </li></ul></div>
    
    
<p><a id="err.inline.S0027"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0027"><code class="errqname">err:XS0027</code></a>)
if an option is specified with both the shortcut form and the long
form.
<a id="err.inline.S0031.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0031"><code class="errqname">err:XS0031</code></a>)
to use an option on an <em class="glossterm"><a href="#dt-atomic-step">atomic step</a></em>
that is not declared on steps of that type.
<a id="err.inline.S0092.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0092"><code class="errqname">err:XS0092</code></a>) to
specify a value for an option that is declared static.
</p>
    
    <p>The syntactic shortcuts apply equally to standard atomic steps
      and extension atomic steps.</p>
  </div></section>
</div></section>
</div></section>



<section id="p.declare-step" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.5. </bdi>p:declare-step<a aria-label="§" class="self-link" href="#p.declare-step"/></h3></div><div class="content">


<p>A <code class="tag-element">p:declare-step</code> provides the type and
<em class="glossterm"><a href="#dt-signature">signature</a></em> of a pipeline or
an <em class="glossterm"><a href="#dt-external-step">external step</a></em>.
Pipelines contain a subpipeline which defines what the declared
step does.
<span id="dt-external-step" class="termdef">[Definition: An <em class="glossterm">external step</em>
is one supported by the implementation, but which has no exposed subpipeline.]</span> 
</p>

<p>The standard XProc atomic steps (<code class="tag-element">p:add-attribute</code>,
<code class="tag-element">p:add-xml-base</code> …) are all external steps.
<span id="impl-41">Whether or not an implementation allows users to provide their own
external steps is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
A <code class="tag-element">p:declare-step</code> must be provided for every pipeline and external step
that is used in a pipeline.</p>

<p><span id="impl-42">When a declared step is evaluated directly by the XProc
processor (as opposed to occurring as an atomic step in some
<em class="glossterm"><a href="#dt-container">container</a></em>), how the input and output ports are
connected to documents is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>A step declaration is not a
<a href="#step-concept">step</a> in its own right. Sibling
steps cannot refer to the inputs or outputs of a
<code class="tag-element">p:declare-step</code> using <a href="#p.pipe"><code class="tag-element">p:pipe</code></a>; only instances of
the type can be referenced.</p>

<section id="declare-pipelines" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.5.1. </bdi>Declaring pipelines<a aria-label="§" class="self-link" href="#declare-pipelines"/></h4></div><div class="content">


<p>When a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> declares a pipeline, that
pipeline encapsulates the behavior of the specified
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. Its children declare inputs,
outputs, and options that the pipeline exposes and identify the steps
in its subpipeline.</p>

<p id="d3503e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:declare-step<br/>  name? = <var>NCName</var><br/>  type? = <var>EQName</var><br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var><br/>  visibility? = <var>private|public</var>&gt;<br/>    (<a href="#p.import">p:import</a> | <br/>     <a href="#p.import-functions">p:import-functions</a>)*,<br/>    (<a href="#p.input">p:input</a> | <br/>     <a href="#p.output">p:output</a> | <br/>     <a href="#p.option">p:option</a>)*,<br/>    <a href="#p.declare-step">p:declare-step</a>*,<br/>    <var>subpipeline</var>?<br/>&lt;/p:declare-step&gt;</code></p>

<p>The attributes that can appear on <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> are
<a href="#common-attr">the common attributes</a> and:</p>

<div class="variablelist">







<dl><dt><span class="term"><code class="tag-attribute">name</code></span></dt><dd>
<p>The <code class="tag-attribute">name</code> attribute provides a
name for the step. This name can be used within the subpipeline to
refer back to the declaration, for example, to read from its inputs. See also <a href="#step-names" title="Step names">Section 2.1.1, “Step names”</a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">type</code></span></dt><dd>
<p>The <code class="tag-attribute">type</code> attribute provides
  a type for the step. Step
  types are used as the name of the element by which the step is invoked. 
  See also <a href="#step-types" title="Step types">Section 2.1.2, “Step types”</a>.</p>
  <p>The value of the <code class="tag-attribute">type</code> can be from
any namespace provided that the expanded-QName of the value has a
non-null namespace URI. <a id="err.inline.S0025"/>It is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0025"><code class="errqname">err:XS0025</code></a>) if the expanded-QName value of the <code class="tag-attribute">type</code> attribute is in no namespace or in the
XProc namespace. Neither
users nor implementers may define additional steps in the XProc
namespace.
</p>
</dd><dt><span class="term"><code class="tag-attribute">psvi-required</code></span></dt><dd>
<p>The <code class="tag-attribute">psvi-required</code> attribute allows
the author to declare that a step relies on the processor’s ability to
pass PSVI annotations between steps,
see <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>.
If the attribute is not specified, the value
“<code class="literal">false</code>” is assumed. </p>
</dd><dt><span class="term"><code class="tag-attribute">xpath-version</code></span></dt><dd>
<p>The requested <code class="tag-attribute">xpath-version</code>
<span class="rfc2119" id="declare-pipelines.5.4.2.1.2">must</span> be used to evaluate XPath expressions subject
to the constraints outlined in <a href="#xpath-context" title="XPath in XProc">Section 7.2.2, “XPath in XProc”</a>. If the
attribute is not specified, the value “<code class="literal">3.1</code>” is
assumed. <a id="err.inline.S0110"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0110"><code class="errqname">err:XS0110</code></a>) if
the requested XPath version is less than “<code class="literal">3.1</code>”.</p>
</dd><dt><span class="term"><code class="tag-attribute">exclude-inline-prefixes</code></span></dt><dd>
<p>The a description of <code class="tag-attribute">exclude-inline-prefixes</code>,
see <a href="#p.inline"><code class="tag-element">p:inline</code></a>.
</p>
</dd><dt><span class="term"><code class="tag-attribute">version</code></span></dt><dd>
<p>The <code class="tag-attribute">version</code> attribute identifies
the version of XProc for which this step declaration was authored. If
the <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> has no ancestors in the XProc namespace,
then it <span class="rfc2119" id="declare-pipelines.5.6.2.1.3">must</span> have a
<code class="tag-attribute">version</code> attribute.
<a id="err.inline.S0062.1"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0062"><code class="errqname">err:XS0062</code></a>) if
a required version attribute is not present.
See <a href="#versioning-considerations" title="Versioning Considerations">Section 13, “Versioning Considerations”</a>.</p>
</dd><dt><span class="term"><code class="tag-attribute">visibility</code></span></dt><dd>

<p>If the <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> is a child of a <a href="#p.library"><code class="tag-element">p:library</code></a>
the <code class="tag-attribute">visibility</code> attribute controls whether
the step is visible to an importing pipeline.
If <code class="tag-attribute">visibility</code> is set to
<code class="literal">private</code>, the step type is only visible inside the
<a href="#p.library"><code class="tag-element">p:library</code></a> and is not visible to any pipeline importing the
<a href="#p.library"><code class="tag-element">p:library</code></a>. If the <code class="tag-attribute">visibility</code>
attribute is missing, <code class="literal">public</code> is assumed. If the
<a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> is not a child of a <a href="#p.library"><code class="tag-element">p:library</code></a> the
attribute has no effect and is ignored.
</p>
</dd></dl></div>

<p>In the general case, the children of a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>
can be grouped into several sections. All of these sections, except the
subpipeline, may be empty.</p>

<div class="orderedlist">




<ol style="list-style: decimal;"><li>
<p>Imports must come first.</p>
</li><li>
<p>The prologue follows the imports.
<span id="dt-prologue" class="termdef">[Definition: The <em class="glossterm">prologue</em> consists of
the <a href="#p.input"><code class="tag-element">p:input</code></a>, <a href="#p.output"><code class="tag-element">p:output</code></a>, and <a href="#p.option"><code class="tag-element">p:option</code></a> elements.
]</span>
</p>
</li><li>
<p>The prologue may be followed by any number of inline <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>
elements that declare additional steps.</p>
</li><li>
<p>Finally, there must be at least one step in the subpipeline.</p>
</li></ol></div>

<p>Options in the prologue may not shadow each other.
<a id="err.inline.S0091"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0091"><code class="errqname">err:XS0091</code></a>) if an
<a href="#p.option"><code class="tag-element">p:option</code></a> shadows another option declared within
the same <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>. (Within the subpipeline,
variables may shadow (non-static) options and lexically preceding
variables.)
</p>

<p>The prologue ends with additional <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>
elements, if any, and is followed by the subpipeline. Any step
imported or declared in the prologue of a pipeline may be invoked as a
step within the subpipeline of that pipeline.</p>

<p>The environment inherited by the
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em> is the <em class="glossterm"><a href="#dt-empty-environment">empty
environment</a></em> with these modifications:</p>

<div class="itemizedlist">



<ul><li>
<p>All of the declared inputs are added to the <em class="glossterm"><a href="#dt-readable-ports">readable
ports</a></em> in the environment.</p>
</li><li>
<p>If a <em class="glossterm"><a href="#dt-primary-input-port">primary input port</a></em> is declared, that
port is the <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>, otherwise
the default readable port is undefined.</p>
</li><li>
<p>The <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em> at the beginning of
a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> are limited to the lexically preceding,
statically declared options.</p>
</li></ul></div>

<p>If a <em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em> is declared and
that port has no <em class="glossterm"><a href="#dt-connection">connection</a></em>, then it is
connected to the <em class="glossterm"><a href="#dt-primary-output-port">primary output port</a></em> of the
<em class="glossterm"><a href="#dt-last-step">last step</a></em> in the
<em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em>. <a id="err.inline.S0006.2"/>It is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0006"><code class="errqname">err:XS0006</code></a>) if the primary output port is
unconnected and the <em class="glossterm"><a href="#dt-last-step">last step</a></em> in the
subpipeline does not have a primary output port.</p>
</div></section>

<section id="declare-atomic-steps" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.5.2. </bdi>Declaring external steps<a aria-label="§" class="self-link" href="#declare-atomic-steps"/></h4></div><div class="content">


<p>The distinction between a pipeline declaration and an external
step declaration hinges on the presence or absence of a subpipeline.
A step declaration that does not contain a subpipeline is, by definition,
declaring an <em class="glossterm"><a href="#dt-external-step">external step</a></em>.</p>

<p>External step declarations may not import other pipelines or
functions, may not declare static options, and may not declare
additional steps. In other words, the content of an external step
declaration consists exclusively of <a href="#p.input"><code class="tag-element">p:input</code></a>,
<a href="#p.output"><code class="tag-element">p:output</code></a>, and <a href="#p.option"><code class="tag-element">p:option</code></a> elements.</p>

<p id="d3618e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:declare-step<br/>  name? = <var>NCName</var><br/>  type? = <var>EQName</var><br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var><br/>  visibility? = <var>private|public</var>&gt;<br/>    (<a href="#p.input">p:input</a> | <br/>     <a href="#p.output">p:output</a> | <br/>     <a href="#p.option">p:option</a>)*<br/>&lt;/p:declare-step&gt;</code></p>

<p><span id="impl-43">Implementations may use
<em class="glossterm"><a href="#dt-extension-attribute">extension
attributes</a></em> to provide
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> information about a
declared step.</span> For example, such an attribute might identify
the code which implements steps of this type.</p>

<p>It is not an error for a pipeline to include declarations for
steps that a particular processor does not know how to implement. It
is, of course, an error to attempt to evaluate such steps. 
The function <a href="#f.step-available"><code class="function">p:step-available</code></a> will return <code class="literal">false</code>
when called with the type name of such a step.</p>

<p><a id="err.inline.D0017.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
            error</a></em> (<a href="#err.D0017"><code class="errqname">err:XD0017</code></a>) if the running pipeline attempts to invoke an
external step which the processor
          does not know how to perform.</p>

</div></section>
</div></section>



<section id="p.library" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.6. </bdi>p:library<a aria-label="§" class="self-link" href="#p.library"/></h3></div><div class="content">


<p>A <code class="tag-element">p:library</code> is a collection of static options,
and step declarations.</p>

<p id="d3637e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:library<br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var>&gt;<br/>    (<a href="#p.import">p:import</a> | <br/>     <a href="#p.import-functions">p:import-functions</a>)*,<br/>    <a href="#p.option">p:option</a>*,<br/>    <a href="#p.declare-step">p:declare-step</a>*<br/>&lt;/p:library&gt;</code></p>

<p>The <code class="tag-attribute">version</code> attribute identifies the version
of XProc for which this library was authored. If the
<code class="tag-element">p:library</code>
has no ancestors in the XProc namespace, then it <span class="rfc2119" id="p.library.4.3">must</span>
have a <code class="tag-attribute">version</code> attribute.
See <a href="#versioning-considerations" title="Versioning Considerations">Section 13, “Versioning Considerations”</a>.</p>

<p>The requested <code class="tag-attribute">xpath-version</code>
          <span class="rfc2119" id="p.library.5.2">must</span> be used to evaluate XPath expressions subject to the constraints
          outlined in <a href="#xpath-context" title="XPath in XProc">Section 7.2.2, “XPath in XProc”</a>. If the attribute is not specified, the value
          “<code class="literal">3.1</code>” is assumed. <a id="err.inline.S0110.1"/>It is a 
            <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0110"><code class="errqname">err:XS0110</code></a>) if the requested XPath version is less 
            than “<code class="literal">3.1</code>”.</p>
        <p>The <code class="tag-attribute">psvi-required</code> attribute allows the author to declare
          that a step relies on the processor’s ability to pass PSVI annotations between steps, see
            <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>. If the attribute is not specified, the value
            “<code class="literal">false</code>” is assumed. </p>
      <p>For a description of <code class="tag-attribute">psvi-required</code>, see <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>; for <code class="tag-attribute">xpath-version</code>, see <a href="#xpath-context" title="XPath in XProc">Section 7.2.2, “XPath in XProc”</a>; for <code class="tag-attribute">exclude-inline-prefixes</code>, see
          <a href="#p.inline"><code class="tag-element">p:inline</code></a>.</p>

<div id="note-step-decl" class="note admonition"><h3>Note</h3><div class="admonition-body">
        <p>The steps declared in a pipeline library are referred to by their type. It is not an
          error to put a <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> without a <code class="tag-attribute">type</code> in a <code class="tag-element">p:library</code>, but there is no standard
          mechanism for instantiating it or referring to it. It is effectively invisible.</p>
      </div></div>

<p>Like <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>, within a library, imports must
precede the prologue (any static options), which must precede any
declared steps.</p>

<p>Libraries can import pipelines and/or other libraries.
See also <a href="#handling-imports" title="Handling Circular and Re-entrant Library Imports (Non-Normative)">Appendix H, <i>Handling Circular and Re-entrant Library Imports (Non-Normative)</i></a>.</p></div></section>



<section id="p.import" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.7. </bdi>p:import<a aria-label="§" class="self-link" href="#p.import"/></h3></div><div class="content"><p>An <code class="tag-element">p:import</code> loads a pipeline
        or pipeline library, making it available in the pipeline or library which contains the
          <code class="tag-element">p:import</code>.</p>
      <p id="d3709e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:import<br/>  <strong>href</strong> = <var>anyURI</var> /&gt;</code></p>
      <p>An import statement loads the specified IRI and makes any pipelines declared within it
        available to the current pipeline. </p>
<p><a id="err.inline.S0052"/>It is a
            <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0052"><code class="errqname">err:XS0052</code></a>) if the URI of a <code class="tag-element">p:import</code> cannot be
          retrieved or if, once retrieved, it does not point to a <a href="#p.library"><code class="tag-element">p:library</code></a> or
            <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a>.
        <a id="err.inline.S0053"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0053"><code class="errqname">err:XS0053</code></a>) to import a single pipeline
          if that pipeline does not have a <code class="tag-attribute">type</code>.
      </p>
<p>Attempts to retrieve the library identified by the URI value may be redirected at
        the parser level (for example, in an entity resolver) or below (at the protocol level, for
        example, via an HTTP Location: header). In the absence of additional information outside the
        scope of this specification within the resource, the base URI of the library is always the
        URI of the actual resource returned. In other words, it is the URI of the resource retrieved
        after all redirection has occurred.</p>
<p>As imports are processed, a processor may
        encounter new <code class="tag-element">p:import</code> elements whose library URI is the same as one it has
        already processed in some other context. This may happen as a consequence of resolving the
        URI. If the actual base URI is the same as one that has already been processed, the
        implementation must recognize it as the same library and should not need to process the
        resource. Also, a duplicate, circular chain of imports, or a re-entrant import is not an
        error and implementations must take the necessary steps to avoid infinite loops and/or
        incorrect notification of duplicate step definitions. It is not an error for a library to
        import itself. An example of such steps is listed in <a href="#handling-imports" title="Handling Circular and Re-entrant Library Imports (Non-Normative)">Appendix H, <i>Handling Circular and Re-entrant Library Imports (Non-Normative)</i></a>.</p>
      <p>A library is considered the same library if the base URI of the resource retrieved is
        the same. If different base URIs resolve to the same library (for instance when a web server
        returns the same document on different URLs), they must <em>not</em> be
        considered the same imported library.</p>

</div></section>

<section id="p.import-functions" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.8. </bdi>p:import-functions<a aria-label="§" class="self-link" href="#p.import-functions"/></h3></div><div class="content">

<p>An <code class="tag-element">p:import-functions</code> element identifies a library of externally
defined functions to be imported into the pipeline. After the functions have been
imported, they are available in the processor XPath context.</p>

<p id="d3730e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:import-functions<br/>  <strong>href</strong> = <var>anyURI</var><br/>  content-type? = <var>ContentType</var><br/>  namespace? = <var>string</var> /&gt;</code></p>

<div class="variablelist">



<dl><dt><span class="term"><code class="tag-attribute">href</code></span></dt><dd><p>The <code class="tag-attribute">href</code> attribute
identifies the URI of the function library. <a id="err.inline.S0103"/>It is
a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0103"><code class="errqname">err:XS0103</code></a>) if the URI of a
<code class="tag-element">p:import-functions</code> element cannot be retrieved or if, once
retrieved, it points to a library that the processor cannot
import.
</p>
</dd><dt><span class="term"><code class="tag-attribute">content-type</code></span></dt><dd>
<p>The <code class="tag-attribute">content-type</code> specifies what kind of library
is expected at the URI. <span id="impl-44">If no type is specified, the way that the processor
determines the type of the library is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>
</dd><dt><span class="term"><code class="tag-attribute">namespace</code></span></dt><dd>
<p>If a <code class="tag-attribute">namespace</code> is specified, it must be a whitespace
separated list
of namespace URIs. Only functions
in those namespaces will be loaded.
</p>
</dd></dl></div>

<p>The ability to import functions is optional. <span id="impl-45">Whether or not a processor
can import functions, and if it can, what kinds of function libraries it can import
from is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> Pipeline authors can
use <a href="#f.function-library-importable"><code class="function">p:function-library-importable</code></a> to test whether or not a particular
kind of library can be loaded.
</p>

<p>Importing functions from a library implies loading and processing that library
according to its conventions (loading imports, resolving dependencies, etc.).
<a id="err.inline.S0104"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0104"><code class="errqname">err:XS0104</code></a>) if the processor
cannot load the function library. This may occur because the format is
unknown, because it is a version of the library that the processor does
not recognize, or if it’s uninterpretable for any other reason.
<a id="err.inline.S0106"/>It is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0106"><code class="errqname">err:XS0106</code></a>) if the processor detects that a
particular library is unloadable. This may occur
if the processor is, in principle, able to load libraries of the specified format,
but detects that the particuar library requested is somehow ill-formed
(syntactically invalid, has unsatisfiable dependencies or circular
imports, etc.).
</p>

<p>Imported functions must be unique (they must not have the same name, namespace, and
arity). <a id="err.inline.S0105"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0105"><code class="errqname">err:XS0105</code></a>) if a function
imported from a library has the same name and arity as a function already imported.
</p>


</div></section>


<section id="p.pipe" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.9. </bdi>p:pipe<a aria-label="§" class="self-link" href="#p.pipe"/></h3></div><div class="content">


<p>A <code class="tag-element">p:pipe</code> connects an input to a port on another
step.</p>

<p id="d3753e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:pipe<br/>  step? = <var>NCName</var><br/>  port? = <var>NCName</var> /&gt;</code></p>

<p>The <code class="tag-element">p:pipe</code> element connects to a readable port of
another step. It identifies the readable port to which it connects
with the name of the step in the <code class="tag-attribute">step</code>
attribute and the name of the port on that step in the
<code class="tag-attribute">port</code> attribute. <a id="err.inline.S0099"/>It
is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0099"><code class="errqname">err:XS0099</code></a>) if <code class="tag-attribute">step</code> 
or <code class="tag-attribute">port</code> are not valid instances of 
<code class="literal">NCName</code>.</p>

<p>If the <code class="tag-attribute">step</code> attribute is not specified,
it defaults to the step which provides the default readable port.
If the <code class="tag-attribute">port</code> attribute is not specified,
it defaults to the primary output port of the step identified (explicitly
or implicitly).</p>

<p>
<a id="err.inline.S0067"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0067"><code class="errqname">err:XS0067</code></a>) if the
<code class="tag-attribute">step</code> attribute is not specified, and there
is no default readable port.
<a id="err.inline.S0068"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0068"><code class="errqname">err:XS0068</code></a>) if the
<code class="tag-attribute">port</code> attribute is not specified, and the
step identified has no primary output port.
</p>

<p><a id="err.inline.S0022"/>In all cases except when the
<code class="tag-element">p:pipe</code> is within an <a href="#p.output"><code class="tag-element">p:output</code></a> of a
<em class="glossterm"><a href="#dt-compound-step">compound step</a></em>, it is a <em class="glossterm"><a href="#dt-static-error">static
error</a></em> (<a href="#err.S0022"><code class="errqname">err:XS0022</code></a>) if the port identified by the <code class="tag-element">p:pipe</code> is not
in the <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em> of the step that contains
the <code class="tag-element">p:pipe</code>.</p>

<p>A <code class="tag-element">p:pipe</code> that is a <em class="glossterm"><a href="#dt-connection">connection</a></em>
for an <a href="#p.output"><code class="tag-element">p:output</code></a> of a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em>
may connect to one of the readable ports of the compound step or to an
output port on one of the compound step’s <em class="glossterm"><a href="#dt-contained-steps">contained
steps</a></em>. In other words, the output of a compound step can
simply be a copy of one of the available inputs or it can be the
output of one of its children.</p>

<p><a id="err.inline.S0078"/>When the <code class="tag-element">p:pipe</code> is within an
<a href="#p.output"><code class="tag-element">p:output</code></a> of a <em class="glossterm"><a href="#dt-compound-step">compound step</a></em>, it is a
<em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0078"><code class="errqname">err:XS0078</code></a>) if the port identified by the
<code class="tag-element">p:pipe</code> is not in the <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em>
of the compound step and is not a readable port of a contained
step.
</p>

</div></section>

<section id="p.inline" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.10. </bdi>p:inline<a aria-label="§" class="self-link" href="#p.inline"/></h3></div><div class="content">


<p>A <code class="tag-element">p:inline</code> provides a document inline.</p>

<p id="d3783e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:inline<br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  content-type? = <var>string</var><br/>  document-properties? = <var>map(xs:QName,item()*)</var><br/>  encoding? = <var>string</var>&gt;<br/>    <var>anyNode</var>*<br/>&lt;/p:inline&gt;</code></p>

<p>The <code class="tag-attribute">content-type</code> attribute can be used
to set the content type of the provided document;
the <code class="tag-attribute">document-properties</code> attribute
can be used to set the <em class="glossterm"><a href="#dt-document-properties">document properties</a></em> of
the provided document.</p>

<p>The document’s content type is determined statically.
If a <code class="tag-attribute">content-type</code> is specified, that is the
content type. Otherwise, the content type is
“<code class="literal">application/xml</code>”.
</p>

<p><a id="err.inline.D0062"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0062"><code class="errqname">err:XD0062</code></a>) if
the <code class="tag-attribute">document-properties</code> map contains a
<code class="literal">content-type</code> key and that key has a value that differs
from the statically determined content type.</p>

<p>The base URI of the document is the base URI of the
<code class="tag-element">p:inline</code> element or of the parent element in
the case of an implicit inline. If <code class="tag-attribute">document-properties</code>
provides a value for “<code class="literal">base-uri</code>”, this value is the
base URI of the document. <a id="err.inline.D0064"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>

<p>How the content of a <code class="tag-element">p:inline</code>
element is interpreted depends on the document’s content type and the
<code class="tag-attribute">encoding</code> attribute.
</p>

<p><a id="err.inline.D0054"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0054"><code class="errqname">err:XD0054</code></a>) if an encoding is specified
and the content type is an <em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em> or
  an <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>.
</p>

<p><a id="err.inline.D0055"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0055"><code class="errqname">err:XD0055</code></a>)
if the content type value specifies a character set and the <code class="tag-attribute">encoding</code> attribute is absent.
</p>

<p><a id="err.inline.D0039"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0039"><code class="errqname">err:XD0039</code></a>)
if the <code class="tag-attribute">encoding</code> attribute is present and
content type value specifies a character set that is not supported by
the implementation.
</p>

<p><a id="err.inline.D0056"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0056"><code class="errqname">err:XD0056</code></a>)
if an encoding is specified and the content of the <code class="tag-element">p:inline</code>
contains any XML markup.
<a id="err.inline.D0063"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0063"><code class="errqname">err:XD0063</code></a>)
if the <code class="tag-element">p:inline</code> contains any XML markup and has a
content type that is not an <em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em> or
  an <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>.
In other words, in these cases, the entire content
must be a single text node. CDATA sections and character references do
not count as markup for this purpose because they will already have
been replaced by the XML parser that read the pipeline.</p>

<p>If the <code class="tag-attribute">encoding</code> attribute is
present, the content must be decoded. The encoding value
“<code class="literal">base64</code>” <span class="rfc2119" id="p.inline.13.3">must</span> be supported and
identifies the content as being base64-encoded.
<span id="impl-46">An implementation may
support encodings other than <code class="literal">base64</code>, but these
encodings and their names are
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
<a id="err.inline.S0069"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0069"><code class="errqname">err:XS0069</code></a>) if the
encoding specified is not supported by the implementation.
<a id="err.inline.D0040"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0040"><code class="errqname">err:XD0040</code></a>) if
the body is not correctly encoded per the value of the <code class="tag-attribute">encoding</code> attribute.
</p>

<p>If an <code class="tag-attribute">encoding</code> attribute is present,
value templates are never expanded. The value of
<code class="tag-attribute">[p:]expand-text</code> is irrelevant and always ignored.
Otherwise, the text content of <code class="tag-element">p:inline</code> is subject to text value
template expansion irrespective of its content type. (Attribute value template
expansion only applies to XML and HTML media types.)
</p>

<p>The interpretation of the (possibly decoded) content
depends on the document’s content type.
</p>
  <div class="note admonition"><h3>Note</h3><div class="admonition-body">
    <p>In the presence of
      <em class="glossterm"><a href="#dt-text-value-template">text value templates</a></em>, it is not possible to
      interpret the non-XML characters until the templates have been
      expanded.</p>
  </div></div>
  
  <section id="inline-xml-content" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.10.1. </bdi>Inline XML and HTML content<a aria-label="§" class="self-link" href="#inline-xml-content"/></h4></div><div class="content">
    
    
    <p>If <code class="tag-attribute">content-type</code> is not
      specified or specifies
      an <em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em> or an <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>, then
      the content is XML. A new XML document is created by wrapping a document node
      around the nodes which appear as children of <a href="#p.inline"><code class="tag-element">p:inline</code></a>.</p>
    
    <p>The in-scope namespaces of the inline document differ from the
      in-scope namespace of the content of the <a href="#p.inline"><code class="tag-element">p:inline</code></a> element
      in that bindings for all its <em>excluded namespaces</em>,
      as defined below, are removed:</p>
    
    <div class="itemizedlist">
      
      
      
    <ul><li>
        <p>The XProc namespace itself (<code class="uri">http://www.w3.org/ns/xproc</code>) is
          excluded.</p>
      </li><li>
        <p>A namespace URI designated by using an <code class="tag-attribute">exclude-inline-prefixes</code> attribute on the enclosing <a href="#p.inline"><code class="tag-element">p:inline</code></a> is
          excluded.</p>
      </li><li>
        <p>A namespace URI designated by using an <code class="tag-attribute">exclude-inline-prefixes</code> attribute on any ancestor <a href="#p.declare-step"><code class="tag-element">p:declare-step</code></a> or <a href="#p.library"><code class="tag-element">p:library</code></a> is also excluded. (In other words, the
          effect of several <code class="tag-attribute">exclude-inline-prefixes</code> attributes among
          the ancestors of <a href="#p.inline"><code class="tag-element">p:inline</code></a> is cumulative.)</p>
      </li></ul></div>
    
    <p>The value of each prefix in the <code class="tag-attribute">exclude-inline-prefixes</code> attribute is
      interpreted as follows:</p>
    
    <div class="itemizedlist">
      
      
      
    <ul><li>
        <p>The value of the attribute is either <code class="literal">#all</code>, or
          a whitespace-separated list of tokens, each of which is either a
          namespace prefix or <code class="literal">#default</code>. The namespace bound
          to each of the prefixes is designated as an excluded namespace. <a id="err.inline.S0057"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0057"><code class="errqname">err:XS0057</code></a>) if the <code class="tag-attribute">exclude-inline-prefixes</code> attribute does not
            contain a list of tokens or if any of those tokens (except
            <code class="literal">#all</code> or <code class="literal">#default</code>) is not a
            prefix bound to a namespace in the in-scope namespaces of the element
            on which it occurs.</p>
      </li><li>
        <p>The default namespace of the element on which <code class="tag-attribute">exclude-inline-prefixes</code> occurs may be
          designated as an excluded namespace by including
          <code class="literal">#default</code> in the list of namespace prefixes. <a id="err.inline.S0058"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0058"><code class="errqname">err:XS0058</code></a>) if the value
            <code class="literal">#default</code> is used within the <code class="tag-attribute">exclude-inline-prefixes</code> attribute and there is no default
            namespace in scope.
        </p>
      </li><li>
        <p>The value <code class="literal">#all</code> indicates that all namespaces
          that are in scope for the element on which <code class="tag-attribute">exclude-inline-prefixes</code> occurs are designated
          as excluded namespaces.</p>
      </li></ul></div>
    
    <p>The XProc processor <span class="rfc2119" id="inline-xml-content.7.1">must</span> include all in-scope
      prefixes that are not explicitly excluded. If the namespace associated with
      an excluded prefix is used in the expanded-QName of a descendant
      element or attribute,
      the processor <span class="rfc2119" id="inline-xml-content.7.2">may</span> include that prefix anyway, or it may
      generate a new prefix.</p>
    
    <p>Consider this example:</p>
    
    <pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                version="3.0"&gt;
  &lt;p:output port="result" serialization="map { 'indent': true() }"/&gt;

  &lt;p:identity xmlns:a="http://example.com/a"
              xmlns:b="http://example.com/b"
              xmlns:c="http://example.com/c"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:inline exclude-inline-prefixes="a b"&gt;
        &lt;doc&gt;
          &lt;b:part/&gt;
        &lt;/doc&gt;
      &lt;/p:inline&gt;
    &lt;/p:with-input&gt;
  &lt;/p:identity&gt;

&lt;/p:declare-step&gt;</code></pre>
    
    <p>which might produce a result like this:</p>
    
    <pre class="programlisting language-markup xml"><code> 
        &lt;doc xmlns:c="http://example.com/c"&gt;
           &lt;b:part xmlns:b="http://example.com/b"/&gt;
        &lt;/doc&gt;
 </code></pre>
    
    <p>The declaration for “<code class="literal">c</code>” must
      be present because it was not excluded. The “<code class="literal">part</code>” element
      uses the namespace bound to “<code class="literal">b</code>”, so <em>some</em>
      binding must be present. In this example, the original
      prefix has been preserved, but it would be equally correct if a different
      prefix had been used.</p>
    
    <p>The text-node descendants of a <a href="#p.inline"><code class="tag-element">p:inline</code></a> may be
      <a href="#text-value-templates">text value templates</a>. Attribute descendants may be <a href="#attribute-value-templates">attribute value templates</a>. This is controlled by the
      <code class="tag-attribute">[p:]expand-text</code> and the <code class="tag-attribute">p:inline-expand-text</code> attribute. See
      <a href="#expand-text-attribute" title="Expand text attributes">Section 14.9.1, “Expand text attributes”</a>.</p>
    
  </div></section>

<section id="inline-text" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.10.2. </bdi>Inline text content<a aria-label="§" class="self-link" href="#inline-text"/></h4></div><div class="content">


<p>If the document’s content type is a <em class="glossterm"><a href="#dt-text-media-type">text media
  type</a></em>, then the content is text. A new text document is created by 
  joining the text nodes which appear as children of p:inline together to a single
  text node and wrapping a document node around it. Any preceding or following whitespace-only 
  text nodes will be preserved.</p>

</div></section>

<section id="inline-json" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.10.3. </bdi>Inline JSON content<a aria-label="§" class="self-link" href="#inline-json"/></h4></div><div class="content">
  
  
<p>If the document’s content type is a <em class="glossterm"><a href="#dt-JSON-media-type">JSON media type</a></em>,
then the context is JSON. A new JSON document is created by joining the 
text values of children of p:inline together and parse it as JSON.</p>
  
<p><a id="err.inline.D0057"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0057"><code class="errqname">err:XD0057</code></a>) if the text content
    does not conform to the JSON grammar.</p>
  
</div></section>

<section id="inline-others" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.10.4. </bdi>Other inline content<a aria-label="§" class="self-link" href="#inline-others"/></h4></div><div class="content">
  
  <p><span id="impl-47">How a processor interprets other media types is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
  </span></p>
</div></section>
  
<section id="implicit-inlines" class="section"><div class="section-titlepage"><h4><bdi class="secno">16.10.5. </bdi>Implicit inlines<a aria-label="§" class="self-link" href="#implicit-inlines"/></h4></div><div class="content">


<p>As an authoring convenience, <a href="#p.inline"><code class="tag-element">p:inline</code></a> may be omitted
if one or more element nodes, optionally preceded and/or followed by
whitespace occurs where a <a href="#p.inline"><code class="tag-element">p:inline</code></a> is allowed. Whitespace
around each element is ignored and the element is treated as if it was
enclosed within a <a href="#p.inline"><code class="tag-element">p:inline</code></a> element (with no attributes).
Elements in the XProc namespace are forbidden except for
<a href="#p.documentation"><code class="tag-element">p:documentation</code></a> and <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> which are
ignored.
</p>

<p>The following example demonstrates this implicit behaviour:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:identity name="identity" code="my:implicitinline1"&gt;
    &lt;p:with-input port="source"&gt;
        &lt;p xmlns="http://example.org/ns"&gt;Text&lt;/p&gt;
        &lt;p xmlns="http://example.org/ns"&gt;Other text&lt;/p&gt;
    &lt;/p:with-input&gt;
&lt;/p:identity&gt;</code></pre>

<p>Is interpreted as follows:</p>

<pre class="programlisting language-markup xml"><code>&lt;p:identity name="identity" code="my:implicitinline2"&gt;
    &lt;p:with-input port="source"&gt;
        &lt;p:inline&gt;&lt;p xmlns="http://example.org/ns"&gt;Text&lt;/p&gt;&lt;/p:inline&gt;
        &lt;p:inline&gt;&lt;p xmlns="http://example.org/ns"&gt;Other text&lt;/p&gt;&lt;/p:inline&gt;
    &lt;/p:with-input&gt;
&lt;/p:identity&gt;</code></pre>

<p>An explicit <a href="#p.inline"><code class="tag-element">p:inline</code></a> is required if the author
wants to include top level comments, processing instructions, or whitespace,
or if the document element is in the XProc namespace.</p>

<p><a id="err.inline.S0079"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0079"><code class="errqname">err:XS0079</code></a>)
if comments, non-whitespace text nodes, or processing instructions occur as siblings of an element node
that would be treated as an implicit inline.
</p>
</div></section>
</div></section>

<section id="p.document" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.11. </bdi>p:document<a aria-label="§" class="self-link" href="#p.document"/></h3></div><div class="content">


<p>A <code class="tag-element">p:document</code> reads a document from a URI.</p>

<p id="d3891e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:document<br/>  <strong>href</strong> = { <var>anyURI</var> }<br/>  content-type? = <var>string</var><br/>  document-properties? = <var>map(xs:QName,item()*)</var><br/>  parameters? = <var>map(xs:QName,item()*)</var> /&gt;</code></p>

  <p>The value of the <code class="tag-attribute">href</code> attribute,
    after expanding any <em class="glossterm"><a href="#dt-attribute-value-template">attribute value templates</a></em>, is a URI. The URI is
    interpreted as an IRI reference. If it is relative, it is made
    absolute against the base URI of the <code class="tag-element">p:document</code> element.
    <a id="err.inline.D0064.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].
  </p>
  
<p>The semantics of <code class="tag-element">p:document</code> are the same as the
semantics of <code class="tag-element">p:load</code> where the <code class="option">href</code> option
is the URI, the
<code class="option">content-type</code> option comes from
<code class="tag-attribute">content-type</code> attribute, the
<code class="option">document-properties</code> option comes from the
<code class="tag-attribute">document-properties</code> attribute, and the
<code class="option">parameters</code> option comes from the
<code class="tag-attribute">parameters</code> attribute.
</p>

<div id="note-document" class="note admonition"><h3>Note</h3><div class="admonition-body"><p>A <code class="tag-element">p:document</code> always <em>reads</em> from
the specified IRI. In the context of a <a href="#p.input"><code class="tag-element">p:input</code></a> or <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>,
this seems
perfectly natural. In the context of a <a href="#p.output"><code class="tag-element">p:output</code></a>, this may
seem a little asymmetrical. Putting a <code class="tag-element">p:document</code> in a
<a href="#p.output"><code class="tag-element">p:output</code></a> causes the pipeline to <em>read</em>
from the specified IRI and provide that document <em>as an
output</em> on that port. </p><p>Use <code class="tag-element">p:store</code> to store the results that appear on a
<a href="#p.output"><code class="tag-element">p:output</code></a>.</p></div></div>
</div></section>

<section id="p.empty" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.12. </bdi>p:empty<a aria-label="§" class="self-link" href="#p.empty"/></h3></div><div class="content">

<p>A <code class="tag-element">p:empty</code> connects to an <em class="glossterm"><a href="#dt-empty-sequence">empty
sequence</a></em> of documents.</p>

<p id="d3924e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:empty /&gt;</code></p>

<p>If an empty binding is used, it must be the only binding for the
port. <a id="err.inline.S0089"/>It is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0089"><code class="errqname">err:XS0089</code></a>)
if the <code class="tag-element">p:empty</code> binding appears as a sibling of any other binding,
including itself.</p>
</div></section>

    <section id="p.documentation" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.13. </bdi>p:documentation<a aria-label="§" class="self-link" href="#p.documentation"/></h3></div><div class="content"><p>A
          <code class="tag-element">p:documentation</code> contains human-readable documentation.</p>
      <p id="d3932e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:documentation&gt;<br/>    <var>any-well-formed-content</var>*<br/>&lt;/p:documentation&gt;</code></p>
      <p>There are no constraints on the content of the <code class="tag-element">p:documentation</code> element.
        Documentation is ignored by pipeline processors. See <a href="#documentation" title="Documentation">Section 14.6, “Documentation”</a>.
      </p></div></section>

    <section id="p.pipeinfo" class="section"><div class="section-titlepage"><h3><bdi class="secno">16.14. </bdi>p:pipeinfo<a aria-label="§" class="self-link" href="#p.pipeinfo"/></h3></div><div class="content"><p>A <code class="tag-element">p:pipeinfo</code> contains
        ancillary information for steps in the pipeline.</p>
      <p id="d3947e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:pipeinfo&gt;<br/>    <var>any-well-formed-content</var>*<br/>&lt;/p:pipeinfo&gt;</code></p>
      <p>There are no constraints on the content of the <code class="tag-element">p:pipeinfo</code> element, see <a href="#annotations" title="Processor annotations">Section 14.7, “Processor annotations”</a>.</p></div></section>
    </div></section>
  <section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">17. </bdi>Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">
    
    <p>Errors in a pipeline can be divided into two classes: static errors and dynamic
      errors.</p>
    <section id="static-errors" class="section"><div class="section-titlepage"><h3><bdi class="secno">17.1. </bdi>Static Errors<a aria-label="§" class="self-link" href="#static-errors"/></h3></div><div class="content">
      
      <p><span id="dt-static-error" class="termdef">[Definition: A <em class="glossterm">static error</em> is one which can
          be detected before pipeline evaluation is even attempted.]</span> Examples of static
        errors include cycles in the pipeline graph
        and incorrect specification of inputs and outputs. </p>
      <p>Static errors are fatal and must be detected before any steps are evaluated.</p>
      <p>For a complete list of static errors, see <a href="#app.static-errors" title="Static Errors">Section F.1, “Static Errors”</a>.</p>
    </div></section>
    <section id="dynamic-errors" class="section"><div class="section-titlepage"><h3><bdi class="secno">17.2. </bdi>Dynamic Errors<a aria-label="§" class="self-link" href="#dynamic-errors"/></h3></div><div class="content">
      

      <p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
      error</em> is one which occurs while a pipeline is being
      evaluated (and cannot be detected before evaluation begins).]</span>
      Examples of dynamic errors include
      references to URIs that cannot be resolved, steps which fail,
      and pipelines that exhaust the capacity of an implementation
      (such as memory or disk space).</p>

<p>Implementations are required to evaluate the pipeline graph
according to the rules of this specification, but they may choose to
optimize pipeline execution in different ways. This may cause steps to
be evaluated in different orders which consequently has an impact on
error detection.
<span id="impl-48">The detection of dynamic errors is somewhat
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> because the order of
step execution may vary.</span> In cases where an implementation
is able to run a pipeline without evaluating a particular expression,
or running a particular step, the implementation is never
required evaluate the expression or run the step solely in order to determine
whether doing so causes a dynamic error. For example, if a variable is
declared but never referenced, an implementation may choose whether or
not to evaluate the expression which initializes the variable, which means that if
evaluating the variable’s initializer causes a dynamic error, some
implementations will signal this error and others will not.</p>

<p>There are some cases where this specification requires that
steps must not be executed: for example, the content of a <a href="#p.when"><code class="tag-element">p:when</code></a>
<span class="rfc2119" id="dynamic-errors.4.2">must not</span> be executed if the <code class="tag-attribute">test</code>
condition is false. This
means that an implementation <span class="rfc2119" id="dynamic-errors.4.4">must not</span> signal any dynamic errors that
would arise if the contents of the <a href="#p.when"><code class="tag-element">p:when</code></a> were executed.</p>

<p>An implementation may signal a dynamic error before any source
document is available, but only if it can determine that the error
would be signaled for every possible source document and every
possible set of parameter values.</p>

      <p>If a step fails due to a dynamic error, failure propagates
      upwards until either a <a href="#p.try"><code class="tag-element">p:try</code></a> is encountered or the
      entire pipeline fails. In other words, outside of a
      <a href="#p.try"><code class="tag-element">p:try</code></a>, step failure causes the entire pipeline to
      fail.</p>

      <p>For a complete list of dynamic errors, see <a href="#app.dynamic-errors" title="Dynamic Errors">Section F.2, “Dynamic Errors”</a>.</p>
    </div></section>
    <section id="step-errors" class="section"><div class="section-titlepage"><h3><bdi class="secno">17.3. </bdi>Step Errors<a aria-label="§" class="self-link" href="#step-errors"/></h3></div><div class="content">
      
      <p>Several of the steps in the standard and option step library can generate dynamic
        errors.</p>
      <p>For a complete list of the dynamic errors raised by builtin pipeline steps, see <a href="#app.step-errors" title="Step Errors">Section F.3, “Step Errors”</a>.</p>
    </div></section>
  </div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>It is
          implementation-defined what additional step
          types, if any, are provided.  See <a href="#step-concept" title="Steps">Section 2.1, “Steps”</a>.</li><li>The level of support for typed values in XDM instances
in an XProc pipeline is implementation-defined. See <a href="#xml-documents" title="XML Documents">Section 3.2.1, “XML Documents”</a>.</li><li>It is implementation-defined
whether other media types not mentioned in this document are treated
as text media types as well. See <a href="#text-documents" title="Text Documents">Section 3.2.3, “Text Documents”</a>.</li><li>Serialization of other kinds of documents is
implementation-defined. See <a href="#other-documents" title="Other documents">Section 3.2.5, “Other documents”</a>.</li><li>It is implementation-defined if a processor accepts any other content type shortcuts. See <a href="#specified-content-types" title="Specifying content types">Section 3.4, “Specifying content types”</a>.</li><li>How inputs are connected to documents outside the pipeline
is implementation-defined. See <a href="#input-output" title="Inputs and Outputs">Section 4, “Inputs and Outputs”</a>.</li><li>How pipeline outputs are connected to documents outside
the pipeline is
implementation-defined. See <a href="#input-output" title="Inputs and Outputs">Section 4, “Inputs and Outputs”</a>.</li><li>In Version 3.0 of XProc, how (or if) implementers provide local resolution
            mechanisms and how (or if) they provide access to intermediate results by URI is
              implementation-defined. See <a href="#external-docs" title="External Documents">Section 4.1, “External Documents”</a>.</li><li>Except for cases which are specifically called out in , the extent to which namespace fixup, and other checks for
            outputs which cannot be serialized, are performed on intermediate outputs is
              implementation-defined. See <a href="#namespace-fixup" title="Namespace Fixup on XML Outputs">Section 6.2, “Namespace Fixup on XML Outputs”</a>.</li><li>There may be an implementation-defined
mechanism for providing default values for static
p:options. If such a mechanism exists, the values provided
must match the sequence type declared for the option, if such a
declaration exists. See <a href="#initiating" title="Initiating a pipeline">Section 7, “Initiating a pipeline”</a>.</li><li>The exact format of the language string is
                    implementation-defined but should be
                  consistent with the xml:lang attribute. See <a href="#f.system-property" title="System Properties">Section 8.1, “System Properties”</a>.</li><li>It is implementation-defined which additional
system properties are available during static analysis. See <a href="#f.system-property" title="System Properties">Section 8.1, “System Properties”</a>.</li><li>It is implementation-defined if the processor supports
  any other XPath extension functions. See <a href="#other-xpath-extension-functions" title="Other XPath Extension Functions">Section 8.11, “Other XPath Extension Functions”</a>.</li><li>The value of the any other XPath extension functions during
static analysis is implementation-defined. See <a href="#other-xpath-extension-functions" title="Other XPath Extension Functions">Section 8.11, “Other XPath Extension Functions”</a>.</li><li>Whether or not the pipeline processor supports passing PSVI annotations between
          steps is implementation-defined. See <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>.</li><li>The exact PSVI properties that are preserved when documents are passed between steps
          is implementation-defined. See <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>.</li><li>It is
                implementation-defined what PSVI properties, if any, are
              produced by extension steps. See <a href="#psvi-support" title="PSVIs in XProc">Section 9, “PSVIs in XProc”</a>.</li><li>Whether or not an extension attribute permits attribute value
templates is implementation-defined. See <a href="#attribute-value-templates" title="Attribute Value Templates">Section 10.1, “Attribute Value Templates”</a>.</li><li>How outside values are specified for pipeline options on the pipeline initially invoked by the
          processor is implementation-defined. See <a href="#options" title="Options">Section 11.2, “Options”</a>.</li><li>The extent to which an implementation validates the lexical form of the
      xs:anyURI is implementation-defined. See <a href="#handling-uris" title="Special rules for casting URIs">Section 11.5.2, “Special rules for casting URIs”</a>.</li><li>Support for pipeline documents written in XML 1.1 and pipeline inputs and outputs that
        use XML 1.1 is implementation-defined. See <a href="#syntax" title="Syntax Overview">Section 14, “Syntax Overview”</a>.</li><li>It is
implementation-defined if any processing instructions are significant
to an implementation. See <a href="#syntax" title="Syntax Overview">Section 14, “Syntax Overview”</a>.</li><li>The semantics of p:pipeinfo elements are
            implementation-defined. See <a href="#annotations" title="Processor annotations">Section 14.7, “Processor annotations”</a>.</li><li>It is
implementation-defined whether a processor
supports timeouts, and if it does, how precisely and precisely how the
execution time of a step is measured. See <a href="#timeout" title="Controlling long running steps">Section 14.9.4, “Controlling long running steps”</a>.</li><li>Precisely what “made available” means is
implementation-defined. See <a href="#messages" title="Status and debugging output">Section 14.9.5, “Status and debugging output”</a>.</li><li>The set of URI
              schemes actually supported is implementation-defined. See <a href="#common-errors" title="Common errors">Section 14.11, “Common errors”</a>.</li><li>The presence of other compound steps is
            implementation-defined; XProc provides no standard mechanism for
          defining them or describing what they can contain. See <a href="#p.extension" title="Extension Steps">Section 15.8.2, “Extension Steps”</a>.</li><li>The default value of any serialization parameters not specified on a
      particular output is implementation-defined. See <a href="#serialization" title="Serialization parameters">Section 16.3.1, “Serialization parameters”</a>.</li><li>Implementations may
          support other method values but their results are
          implementation-defined. See <a href="#serialization-method" title="Serialization method">Section 16.3.1.1, “Serialization method”</a>.</li><li>The serialization method for documents with other media types is
              implementation-defined. See <a href="#serialization-method" title="Serialization method">Section 16.3.1.1, “Serialization method”</a>.</li><li>The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
implementation-defined. See <a href="#p.variable" title="p:variable">Section 16.4.1, “p:variable”</a>.</li><li>The precise details about what XPath expressions are allowed
(for example, can the expression declare a function) is
implementation-defined. See <a href="#p.option" title="p:option">Section 16.4.2, “p:option”</a>.</li><li>When a declared step is evaluated directly by the XProc
processor (as opposed to occurring as an atomic step in some
container), how the input and output ports are
connected to documents is
implementation-defined. See <a href="#p.declare-step" title="p:declare-step">Section 16.5, “p:declare-step”</a>.</li><li>If no type is specified, the way that the processor
determines the type of the library is implementation-defined. See <a href="#p.import-functions" title="p:import-functions">Section 16.8, “p:import-functions”</a>.</li><li>Whether or not a processor
can import functions, and if it can, what kinds of function libraries it can import
from is implementation-defined. See <a href="#p.import-functions" title="p:import-functions">Section 16.8, “p:import-functions”</a>.</li><li>An implementation may
support encodings other than base64, but these
encodings and their names are
implementation-defined. See <a href="#p.inline" title="p:inline">Section 16.10, “p:inline”</a>.</li><li>How a processor interprets other media types is implementation-defined.
   See <a href="#inline-others" title="Other inline content">Section 16.10.4, “Other inline content”</a>.</li><li>It is implementation-defined whether
additional information items and properties, particularly those made available
in the PSVI, are preserved between steps. See <a href="#infoset-conformance" title="Infoset Conformance">Section A.3, “Infoset Conformance”</a>.</li><li>The version of Unicode supported is
                      implementation-defined, but it is recommended that the
                    most recent version of Unicode be used. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The context item used for binary documents is
implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The point in time returned as the current dateTime is
                      implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The implicit timezone is
                    implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The default language is implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The default calendar is implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The default place is implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The list of available environment variables is implementation-defined. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The implicit timezone is
                    implementation-defined. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The default language is implementation-defined. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The default calendar is implementation-defined. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The default place is
              implementation-defined. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The list of available environment variables is implementation-defined. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"><li>The evaluation
order of steps not connected to one another is
implementation-dependent. See <a href="#pipeline-concepts" title="Pipeline Concepts">Section 2, “Pipeline Concepts”</a>.</li><li>The underlying representations of other
kinds of documents are
implementation-dependent. See <a href="#other-documents" title="Other documents">Section 3.2.5, “Other documents”</a>.</li><li>Outside of a try/catch, the
          disposition of error messages is implementation-dependent See <a href="#input-output" title="Inputs and Outputs">Section 4, “Inputs and Outputs”</a>.</li><li>Resolving a URI locally may involve resolvers of various sorts and
            possibly appeal to implementation-dependent mechanisms such as
            catalog files. See <a href="#external-docs" title="External Documents">Section 4.1, “External Documents”</a>.</li><li>Whether (and
            when and how) or not the intermediate results that pass between steps are ever written
            to a filesystem is implementation-dependent. See <a href="#external-docs" title="External Documents">Section 4.1, “External Documents”</a>.</li><li>Which steps are forbidden, what privileges are needed to access resources, and under
          what circumstances these security constraints apply is
            implementation-dependent. See <a href="#security-considerations" title="Security Considerations">Section 12, “Security Considerations”</a>.</li><li>The error codes that appear in cause
are
implementation-dependent. See <a href="#cv.error" title="c:error">Section 15.7.3.2, “c:error”</a>.</li><li>It is
implementation-dependent whether or not
atomic steps can be defined through some other means. See <a href="#p.atomic" title="Atomic Steps">Section 15.8, “Atomic Steps”</a>.</li><li>Whether or not an implementation allows users to provide their own
external steps is implementation-dependent. See <a href="#p.declare-step" title="p:declare-step">Section 16.5, “p:declare-step”</a>.</li><li>Implementations may use
extension
attributes to provide
implementation-dependent information about a
declared step. See <a href="#declare-atomic-steps" title="Declaring external steps">Section 16.5.2, “Declaring external steps”</a>.</li><li>The detection of dynamic errors is somewhat
implementation-dependent because the order of
step execution may vary. See <a href="#dynamic-errors" title="Dynamic Errors">Section 17.2, “Dynamic Errors”</a>.</li><li>The set of available documents (those that may be retrieved with a URI)
                    is implementation-dependent. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The set of available text resources (those that may be retrieved with a URI)
                is implementation-dependent. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The set of available collections is
                      implementation-dependent. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The set of available URI collections is implementation-dependent. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The default URI collection is implementation-dependent. See <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>.</li><li>The set of available documents (those that may be retrieved with a URI)
                    is implementation-dependent. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The set of available text resources (those that may be retrieved with a URI)
                  is implementation-dependent. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The set of available URI collections is implementation-dependent. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li><li>The default URI collection is implementation-dependent. See <a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>.</li></ol>
</div></section>

<section id="infoset-conformance" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.3. </bdi>Infoset Conformance<a aria-label="§" class="self-link" href="#infoset-conformance"/></h2></div><div class="content">


<p>This specification conforms to the XML Information Set [<a href="#xml-infoset-rec"><span class="abbrev">Infoset</span></a>]. The information corresponding to the
following information items and properties must be available to the
processor for the documents that flow through the pipeline.</p>

<div class="itemizedlist">
  

  

  

  

  

  

  
<ul><li><p>The <code class="literal info-item">Document Information Item</code> with
           <code class="literal infoset-property">[base URI]</code> and
           <code class="literal infoset-property">[children]</code>
           properties.</p></li><li><p><code class="literal info-item">Element Information Items</code> with
           <code class="literal infoset-property">[base URI]</code>,
           <code class="literal infoset-property">[children]</code>,
           <code class="literal infoset-property">[attributes]</code>,
           <code class="literal infoset-property">[in-scope namespaces]</code>,
           <code class="literal infoset-property">[prefix]</code>,
           <code class="literal infoset-property">[local name]</code>,
           <code class="literal infoset-property">[namespace name]</code>,
           <code class="literal infoset-property">[parent]</code> properties.</p></li><li><p><code class="literal info-item">Attribute Information Items</code> with
           <code class="literal infoset-property">[namespace name]</code>,
           <code class="literal infoset-property">[prefix]</code>,
           <code class="literal infoset-property">[local name]</code>,
           <code class="literal infoset-property">[normalized value]</code>,
           <code class="literal infoset-property">[attribute type]</code>, and
           <code class="literal infoset-property">[owner element]</code> properties.</p></li><li><p><code class="literal info-item">Character Information Items</code> with
           <code class="literal infoset-property">[character code]</code>,
           <code class="literal infoset-property">[parent]</code>, and, optionally,
           <code class="literal infoset-property">[element content whitespace]</code>
           properties.</p></li><li><p><code class="literal info-item">Processing Instruction Information Items</code> with
           <code class="literal infoset-property">[base URI]</code>,
           <code class="literal infoset-property">[target]</code>,
           <code class="literal infoset-property">[content]</code> and
           <code class="literal infoset-property">[parent]</code> properties.</p></li><li><p><code class="literal info-item">Comment Information Items</code> with
           <code class="literal infoset-property">[content]</code> and
           <code class="literal infoset-property">[parent]</code> properties.</p></li><li><p><code class="literal info-item">Namespace Information Items</code> with
           <code class="literal infoset-property">[prefix]</code> and
           <code class="literal infoset-property">[namespace name]</code> properties.</p></li></ul></div>

<p><span id="impl-49">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> whether
additional information items and properties, particularly those made available
in the PSVI, are preserved between steps.</span></p>
</div></section>
</div></article>
<article id="xproc-and-step-xpath-context" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>XPath contexts in XProc<a aria-label="§" class="self-link" href="#xproc-and-step-xpath-context"/></h2></header><div class="content">


<p>Two kinds of XPath context are relevant in XProc: the context of the pipeline itself
(<a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>) and the context <em>within</em> steps
(<a href="#step-xpath-context-31" title="Step XPath Context">Section B.2, “Step XPath Context”</a>).
</p>

<section id="xproc-xpath-context-31" class="section"><div class="section-titlepage"><h2><bdi class="secno">B.1. </bdi>Processor XPath Context<a aria-label="§" class="self-link" href="#xproc-xpath-context-31"/></h2></div><div class="content">

<p>When the XProc processor evaluates an XPath expression using
XPath, unless otherwise indicated by a particular step, it does so
with the following static context:</p>
          <div class="variablelist">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
          <dl><dt><span class="term">XPath 1.0 compatibility mode</span></dt><dd>
                <p>False</p>
              </dd><dt><span class="term">Statically known namespaces</span></dt><dd>
                <p>The namespace declarations in-scope for the containing element. </p>
              </dd><dt><span class="term">Default element/type namespace</span></dt><dd>
                <p>The null namespace.</p>
              </dd><dt><span class="term">Default function namespace</span></dt><dd>
                <p>The default function namespace is <code class="literal">http://www.w3.org/2005/xpath-functions</code>, as defined in
                  [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>]. Function names that do
                  not contain a colon always refer to the default function namespace, any in-scope
                  binding for the default namespace <em>does not</em> apply. This
                  specification does not provide a mechanism to override the default function
                  namespace.</p>
              </dd><dt><span class="term">In-scope schema definitions</span></dt><dd>
                <p>A basic XPath 3.1 XProc processor includes the following named type
                  definitions in its in-scope schema definitions:</p>
                <div class="itemizedlist">
                  
                  
                  
                <ul><li>
                    <p>All the primitive atomic types defined in [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>], with the exception of <code class="literal">xs:NOTATION</code>. That is:
<code class="literal">xs:anyAtomicType</code>,
<code class="literal">xs:anySimpleType</code>,
<code class="literal">xs:anyURI</code>,
<code class="literal">xs:base64Binary</code>,
<code class="literal">xs:boolean</code>,
<code class="literal">xs:date</code>,
<code class="literal">xs:dateTime</code>,
<code class="literal">xs:decimal</code>,
<code class="literal">xs:double</code>,
<code class="literal">xs:duration</code>,
<code class="literal">xs:float</code>,
<code class="literal">xs:gDay</code>,
<code class="literal">xs:gMonth</code>,
<code class="literal">xs:gMonthDay</code>,
<code class="literal">xs:gYear</code>,
<code class="literal">xs:gYearMonth</code>,
<code class="literal">xs:hexBinary</code>,
<code class="literal">xs:QName</code>,
<code class="literal">xs:string</code>, and
<code class="literal">xs:time</code>.
                    </p>
                  </li><li>
                    <p>The derived atomic type <code class="literal">xs:integer</code> defined in
                        [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>]. </p>
                  </li><li>
                    <p>The types <code class="literal">xs:anyType</code>,
                      <code class="literal">xs:yearMonthDuration</code>,
                      <code class="literal">xs:dayTimeDuration</code>, 
                        <code class="literal">xs:untyped</code>, and <code class="literal">xs:untypedAtomic</code>
                      defined in [<a href="#xpath-datamodel"><span class="abbrev">XQuery and XPath Data Model 3.1</span></a>]. </p>
                  </li></ul></div>
              </dd><dt><span class="term">In-scope variables</span></dt><dd>
<p>Variables and options are lexically scoped. The union of the
options and the variables that
are “visible” from the step’s lexical position are available
as variable bindings to the XPath processor.
Variables and options can shadow each other, only the lexically most
recent bindings are visible.</p>

              </dd><dt><span class="term">Context item static type</span></dt><dd>
                <p>Document.</p>
              </dd><dt><span class="term">Function signatures</span></dt><dd>
                <p>The signatures of the [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>] in namespaces <code class="literal">http://www.w3.org/2005/xpath-functions</code>,
                  <code class="literal">http://www.w3.org/2005/xpath-functions/math</code>, <code class="literal">http://www.w3.org/2005/xpath-functions/map</code> and
                  <code class="literal">http://www.w3.org/2005/xpath-functions/array</code>. Additionally the function signatures defined in <a href="#xpath-extension-functions" title="XPath Extension Functions">Section 8, “XPath Extension Functions”</a>. </p>
              </dd><dt><span class="term">Statically known collations</span></dt><dd>
                <p>Implementation-defined but <span class="rfc2119" id="xproc-xpath-context-31.3.9.2.1.1">must</span> include the Unicode code
                  point collation. <span id="impl-50">The version of Unicode supported is
                      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>, but it is recommended that the
                    most recent version of Unicode be used.</span>
                </p>
              </dd><dt><span class="term">Default collation</span></dt><dd>
                <p>Unicode code point collation.</p>
              </dd><dt><span class="term">Static base URI</span></dt><dd>
                <p>The base URI of the element on which the expression occurs.</p>
              </dd><dt><span class="term">Statically known documents</span></dt><dd>
                <p>None.</p>
              </dd><dt><span class="term">Statically known collections</span></dt><dd>
                <p>None.</p>
              </dd><dt><span class="term">Statically known default collection type</span></dt><dd>
                <p><code class="literal">item()*</code></p>
              </dd><dt><span class="term">Statically known decimal formats</span></dt><dd>
                <p>None.</p>
              </dd></dl></div>
          <p>And the following dynamic context:</p>
          <div class="variablelist">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
          <dl><dt><span class="term">context item</span></dt><dd>
<p>The context item. The context item is either specified with a
<em class="glossterm"><a href="#dt-connection">connection</a></em> or is taken from the
  <em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em>.  If the explicit connection or
the default readable port provides no or more than one document then the context 
item is undefined. <a id="err.inline.D0001.6"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>)
if the XPath expression makes use of the context item, but the context item is
undefined.
</p>

<p>The context item used for an XML, text, or JSON document is
the XDM representation of that item.
<span id="impl-51">The context item used for binary documents is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>If there is no explicit connection and there is no default
readable port then the context item is undefined.</p>
              </dd><dt><span class="term">context position and context size</span></dt><dd>
          <p>If the context item is defined, the context position and context size are both “1”.
              <a id="err.inline.D0001.7"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0001"><code class="errqname">err:XD0001</code></a>) to refer to the
              context position or size if the context item is undefined.</p>
              </dd><dt><span class="term">Variable values</span></dt><dd>
                <p>The union of the in-scope options and variables are available as variable
                  bindings to the XPath processor. </p>
              </dd><dt><span class="term">Named functions</span></dt><dd>
                <p>The [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>] and the <a href="#xpath-extension-functions" title="XPath Extension Functions">Section 8, “XPath Extension Functions”</a>. </p>
              </dd><dt><span class="term">Current dateTime</span></dt><dd>
                <p><span id="impl-52">The point in time returned as the current dateTime is
                      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
                </p>
              </dd><dt><span class="term">Implicit timezone</span></dt><dd>
                <p><span id="impl-53">The implicit timezone is
                    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default language</span></dt><dd>
                <p><span id="impl-54">The default language is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default calendar</span></dt><dd>
                <p><span id="impl-55">The default calendar is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default place</span></dt><dd>
                <p><span id="impl-56">The default place is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Available documents</span></dt><dd>
                <p><span id="impl-57">The set of available documents (those that may be retrieved with a URI)
                    is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Available text resources</span></dt><dd>
                <p><span id="impl-58">The set of available text resources (those that may be retrieved with a URI)
                is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Available collections</span></dt><dd>
                <p><span id="impl-59">The set of available collections is
                      <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Default collection</span></dt><dd>
                <p>None. </p>
              </dd><dt><span class="term">Available URI collections</span></dt><dd>
                <p><span id="impl-60">The set of available URI collections is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Default URI collection</span></dt><dd>
                <p><span id="impl-61">The default URI collection is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Environment variables</span></dt><dd>
                <p><span id="impl-62">The list of available environment variables is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd></dl></div>
        </div></section>

<section id="step-xpath-context-31" class="section"><div class="section-titlepage"><h2><bdi class="secno">B.2. </bdi>Step XPath Context<a aria-label="§" class="self-link" href="#step-xpath-context-31"/></h2></div><div class="content">
          
          <p>When a step evaluates an XPath expression using XPath 3.1, unless otherwise
            indicated by a particular step, it does so with the following static context:</p>
          <div class="variablelist">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
          <dl><dt><span class="term">XPath 1.0 compatibility mode</span></dt><dd>
                <p>False</p>
              </dd><dt><span class="term">Statically known namespaces</span></dt><dd>
                <p>The namespace declarations in-scope for the containing element.</p>
              </dd><dt><span class="term">Default element/type namespace</span></dt><dd>
                <p>The null namespace.</p>
              </dd><dt><span class="term">Default function namespace</span></dt><dd>
                <p>The default function namespace is <code class="literal">http://www.w3.org/2005/xpath-functions</code>, as defined in
                  [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>]. Function names that do
                  not contain a colon always refer to the default function namespace, any in-scope
                  binding for the default namespace <em>does not</em> apply. This
                  specification does not provide a mechanism to override the default function
                  namespace.</p>
              </dd><dt><span class="term">In-scope schema definitions</span></dt><dd>
                <p>The same as the <a href="#xproc-xpath-context-31" title="Processor XPath Context">Section B.1, “Processor XPath Context”</a>. </p>
              </dd><dt><span class="term">In-scope variables</span></dt><dd>
                <p>None, unless otherwise specified by the step. </p>
              </dd><dt><span class="term">Context item static type</span></dt><dd>
                <p>Document.</p>
              </dd><dt><span class="term">Function signatures</span></dt><dd>
                <p>The signatures of the [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>] in namespaces <code class="literal">http://www.w3.org/2005/xpath-functions</code>,
                  <code class="literal">http://www.w3.org/2005/xpath-functions/math</code>, <code class="literal">http://www.w3.org/2005/xpath-functions/map</code> and
                  <code class="literal">http://www.w3.org/2005/xpath-functions/array</code>.
                </p>
              </dd><dt><span class="term">Statically known collations</span></dt><dd>
                <p>Implementation-defined but <span class="rfc2119" id="step-xpath-context-31.3.9.2.1.1">must</span> include the Unicode code
                  point collation.</p>
              </dd><dt><span class="term">Default collation</span></dt><dd>
                <p>Unicode code point collation.</p>
              </dd><dt><span class="term">Static base URI</span></dt><dd>
                <p>The base URI of the element on which the expression occurs.</p>
              </dd><dt><span class="term">Statically known documents</span></dt><dd>
                <p>None.</p>
              </dd><dt><span class="term">Statically known collections</span></dt><dd>
                <p>None.</p>
              </dd><dt><span class="term">Statically known default collection type</span></dt><dd>
                <p>item()*</p>
              </dd><dt><span class="term">Statically known decimal formats</span></dt><dd>
                <p>None.</p>
              </dd></dl></div>
          <p>And the following initial dynamic context:</p>
          <div class="variablelist">
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
          <dl><dt><span class="term">context item</span></dt><dd>
                <p>The document node of the document that appears on the primary input of the
                  step, unless otherwise specified by the step.</p>
              </dd><dt><span class="term">context position and context size</span></dt><dd>
                <p>The context position and context size are both “1”, unless otherwise specified
                  by the step. </p>
              </dd><dt><span class="term">Variable values</span></dt><dd>
                <p>None, unless otherwise specified by the step. </p>
              </dd><dt><span class="term">Named functions</span></dt><dd>
                <p>The [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>].</p>
              </dd><dt><span class="term">Current dateTime</span></dt><dd>
                <p>An implementation-defined point in time. </p>
              </dd><dt><span class="term">Implicit timezone</span></dt><dd>
                <p><span id="impl-63">The implicit timezone is
                    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default language</span></dt><dd>
                <p><span id="impl-64">The default language is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default calendar</span></dt><dd>
                <p><span id="impl-65">The default calendar is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Default place</span></dt><dd>
                <p><span id="impl-66">The default place is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd><dt><span class="term">Available documents</span></dt><dd>
                <p><span id="impl-67">The set of available documents (those that may be retrieved with a URI)
                    is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Available text resources</span></dt><dd>
                <p><span id="impl-68">The set of available text resources (those that may be retrieved with a URI)
                  is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Available collections</span></dt><dd>
                <p>None. </p>
              </dd><dt><span class="term">Default collection</span></dt><dd>
                <p>None. </p>
              </dd><dt><span class="term">Available URI collections</span></dt><dd>
                <p><span id="impl-69">The set of available URI collections is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Default URI collection</span></dt><dd>
                <p><span id="impl-70">The default URI collection is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>
              </dd><dt><span class="term">Environment variables</span></dt><dd>
                <p><span id="impl-71">The list of available environment variables is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
              </dd></dl></div>
          <div id="note-amendments" class="note admonition"><h3>Note</h3><div class="admonition-body">
            <p>Some steps may also provide for implementation-defined or implementation-dependent
              amendments to the contexts. Those amendments are in addition to any specified by
              XProc.</p>
          </div></div>
        </div></section>
      </div></article>
<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<section id="normative-references" class="section"><div class="section-titlepage"><h2><bdi class="secno">C.1. </bdi>Normative References<a aria-label="§" class="self-link" href="#normative-references"/></h2></div><div class="content">
  
  <div id="normative-references.2" class="bibliolist">
    <div id="steps30" class="bibliomixed"><p>[<span class="abbrev">Steps 3.0</span>] 
<a href="https://spec.xproc.org/3.0/steps/"><span class="citetitle"><cite>XProc 3.0: Standard
Step Library</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
    <div id="xml-infoset-rec" class="bibliomixed"><p>[<span class="abbrev">Infoset</span>] 
<a href="https://www.w3.org/TR/xml-infoset/"><span class="citetitle"><cite>XML
Information Set (Second Edition)</cite></span></a>. John Cowan,
Richard Tobin, editors. W3C Working Group Note 04 February 2004.
</p></div>
    <div id="xml10" class="bibliomixed"><p>[<span class="abbrev">XML 1.0</span>] 
<a href="https://www.w3.org/TR/REC-xml/"><span class="citetitle"><cite>Extensible
Markup Language (XML) 1.0 (Fifth Edition)</cite></span></a>. Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, et. al.
editors. W3C Recommendation 26 November 2008.</p></div>
    <div id="xmlns10" class="bibliomixed"><p>[<span class="abbrev">Namespaces 1.0</span>] 
<a href="https://www.w3.org/TR/REC-xml-names/"><span class="citetitle"><cite>Namespaces
in XML 1.0 (Third Edition)</cite></span></a>. Tim Bray,
Dave Hollander, Andrew Layman, et. al.,
editors. W3C Recommendation 8 December 2009.</p></div>
    <div id="xml11" class="bibliomixed"><p>[<span class="abbrev">XML 1.1</span>] 
<a href="https://www.w3.org/TR/xml11/"><span class="citetitle"><cite>Extensible
Markup Language (XML) 1.1 (Second Edition)</cite></span></a>. Tim Bray,
Jean Paoli, C. M. Sperberg-McQueen, et. al.
editors. W3C Recommendation 16 August 2006.</p></div>
    <div id="xmlns11" class="bibliomixed"><p>[<span class="abbrev">Namespaces 1.1</span>] 
<a href="https://www.w3.org/TR/xml-names11/"><span class="citetitle"><cite>Namespaces
in XML 1.1 (Second Edition)</cite></span></a>. Tim Bray,
Dave Hollander, Andrew Layman, et. al.,
editors. W3C Recommendation 16 August 2006.</p></div>
    <div id="xpath31" class="bibliomixed"><p>[<span class="abbrev">XPath 3.1</span>] 
<a href="https://www.w3.org/TR/xpath31/"><span class="citetitle"><cite>XML Path Language (XPath)
	3.1</cite></span></a>. Jonathan Robie, Michael Dyck, Josh Spiegel, editors.
W3C Recommendation. 21 March 2017.</p></div>
    <div id="xpath-datamodel" class="bibliomixed"><p>[<span class="abbrev">XQuery and XPath Data Model 3.1</span>] 
<a href="https://www.w3.org/TR/xpath-datamodel-31/"><span class="citetitle"><cite>XQuery and XPath
Data Model 3.1</cite></span></a>.
Norman Walsh, John Snelson, and Andrew Coleman, editors.
W3C Recommendation. 21 March 2017.</p></div>
    <div id="xml-serialization-31" class="bibliomixed"><p>[<span class="abbrev">Serialization</span>] 
<a href="https://www.w3.org/TR/xslt-xquery-serialization-31/"><span class="citetitle"><cite>XSLT
and XQuery Serialization 3.1</cite></span></a>.
Andrew Coleman and C. M. Sperberg-McQueen, editors. W3C Recommendation. 21 March 2017.</p></div>
    <div id="xpath31-functions" class="bibliomixed"><p>[<span class="abbrev">XPath and XQuery Functions and Operators 3.1</span>] 
<a href="https://www.w3.org/TR/xpath-functions-31/"><span class="citetitle"><cite>XPath and XQuery Functions and  Operators 3.1</cite></span></a>. Michael Kay, editor.
W3C Recommendation. 21 March 2017</p></div>
    <div id="xslt30" class="bibliomixed"><p>[<span class="abbrev">XSLT 3.0</span>] 
<a href="https://www.w3.org/TR/xslt-30/"><span class="citetitle"><cite>XSL Transformations (XSLT)
Version 3.0</cite></span></a>. Michael Kay, editor.
W3C Recommendation. 8 June 2017.</p></div>
    <div id="xquery10" class="bibliomixed"><p>[<span class="abbrev">XQuery 1.0</span>] 
<a href="https://www.w3.org/TR/xquery/"><span class="citetitle"><cite>XQuery 1.0: An XML
Query Language</cite></span></a>. Scott Boag, Don Chamberlin, Mary Fernández, et. al.,
editors. W3C Recommendation. 23 January 2007.</p></div>
    <div id="xmlschema-1" class="bibliomixed"><p>[<span class="abbrev">W3C XML Schema: Part 1</span>] 
<a href="https://www.w3.org/TR/xmlschema-1/"><span class="citetitle"><cite>XML Schema Part 1:
Structures Second Edition</cite></span></a>.
Henry S. Thompson, David Beech, Murray Maloney, et. al., editors.
World Wide Web Consortium, 28 October 2004.
</p></div>
    <div id="xmlschema-2" class="bibliomixed"><p>[<span class="abbrev">W3C XML Schema: Part 2</span>] 
<a href="https://www.w3.org/TR/xmlschema-2/"><span class="citetitle"><cite>XML Schema Part 2:
Datatypes Second Edition</cite></span></a>.
Paul V. Biron and Ashok Malhotra, editors.
World Wide Web Consortium, 28 October 2004.
</p></div>
    <div id="xml-id" class="bibliomixed"><p>[<span class="abbrev">xml:id</span>] 
<a href="https://www.w3.org/TR/xml-id/"><span class="citetitle"><cite>xml:id
Version 1.0</cite></span></a>. Jonathan Marsh, Daniel Veillard, and Norman Walsh, editors.
W3C Recommendation. 9 September 2005.</p></div>
    <div id="xml-base" class="bibliomixed"><p>[<span class="abbrev">XML Base</span>] 
<a href="https://www.w3.org/TR/xmlbase/"><span class="citetitle"><cite>XML Base
(Second Edition)</cite></span></a>.
Jonathan Marsh and Richard Tobin, editors.
W3C Recommendation. 28 January 2009.</p></div>
    <div id="rfc2119" class="bibliomixed"><p>[<span class="abbrev">RFC 2119</span>] 
<a href="https://doi.org/10.17487/RFC2119"><span class="citetitle"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></span></a>.
S. Bradner.
Network Working Group, IETF,
Mar 1997.
</p></div>
    <div id="rfc2396" class="bibliomixed"><p>[<span class="abbrev">RFC 2396</span>] 
<a href="https://doi.org/10.17487/RFC2396"><span class="citetitle"><cite>Uniform Resource Identifiers (URI): Generic Syntax</cite></span></a>.
T. Berners-Lee, R. Fielding, and L. Masinter.
Network Working Group, IETF,
Aug 1998.
</p></div>
    <div id="rfc3023" class="bibliomixed"><p>[<span class="abbrev">RFC 3023</span>] 
<a href="https://doi.org/10.17487/RFC3023"><span class="citetitle"><cite>RFC 3023:
XML Media Types</cite></span></a>.
M. Murata, S. St. Laurent, and D. Kohn, editors. Internet
Engineering Task Force. January, 2001.</p></div>
    <div id="rfc2046" class="bibliomixed"><p>[<span class="abbrev">RFC 2046</span>] 
<a href="https://doi.org/10.17487/RFC2046"><span class="citetitle"><cite>RFC 2046:
Multipurpose Internet Mail Extensions (MIME) Part Two: Media
Types</cite></span></a>. N. Freed, N. Borenstein, editors. Internet
Engineering Task Force. November, 1996.</p></div>
    <div id="rfc3986" class="bibliomixed"><p>[<span class="abbrev">RFC 3986</span>] 
<a href="https://doi.org/10.17487/RFC3986"><span class="citetitle"><cite>RFC 3986:
Uniform Resource Identifier (URI): General Syntax</cite></span></a>.
T. Berners-Lee, R. Fielding, and L. Masinter, editors.
Internet Engineering Task Force. January, 2005.</p></div>
  </div>
</div></section>
</div></article>
<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em></dt><dd class="glossdef"><p>The
  “<code class="literal">text/html</code>” and “<code class="literal">application/xhtml+xml</code>”
media types
are <em class="firstterm">HTML media types</em>.
</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-JSON-media-type">JSON media type</a></em></dt><dd class="glossdef"><p>The
“<code class="literal">application/json</code>”
media type and all media types of the form
“<code class="literal">application/<em class="replaceable"><code>something</code></em>+json</code>”
are <em class="firstterm">JSON media types</em>.
</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-Namespaces-in-XML">Namespaces
          in XML</a></em></dt><dd class="glossdef"><p>Unless otherwise noted, the term <em class="firstterm">Namespaces
          in XML</em> refers equally to [<a href="#xmlns10"><span class="abbrev">Namespaces 1.0</span></a>] and [<a href="#xmlns11"><span class="abbrev">Namespaces 1.1</span></a>].</p></dd><dt id="glossary.2.4" class="glossentry"><em class="glossterm"><a href="#dt-XML">XML</a></em></dt><dd class="glossdef"><p>XProc is intended to work equally well with [<a href="#xml10"><span class="abbrev">XML 1.0</span></a>] and
          [<a href="#xml11"><span class="abbrev">XML 1.1</span></a>]. Unless otherwise noted, the term
        “<em class="firstterm">XML</em>” refers equally to both versions.</p></dd><dt id="glossary.2.5" class="glossentry"><em class="glossterm"><a href="#dt-XML-media-type">XML media type</a></em></dt><dd class="glossdef"><p>The
“<code class="literal">application/xml</code>” and “<code class="literal">text/xml</code>”
media types and all media types of the form
“<code class="literal"><em class="replaceable"><code>something</code></em>/<em class="replaceable"><code>something</code></em>+xml</code>”
(except for “<code class="literal">application/xhtml+xml</code>” which is explicitly
an <em class="glossterm"><a href="#dt-HTML-media-type">HTML media type</a></em>)
are <em class="firstterm">XML media types</em>.
</p></dd><dt id="glossary.2.6" class="glossentry"><em class="glossterm"><a href="#dt-ancestors">ancestors</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">ancestors</em> of
a step, if it has any, are its <em class="glossterm"><a href="#dt-container">container</a></em> and
the ancestors of its container.</p></dd><dt id="glossary.2.7" class="glossentry"><em class="glossterm"><a href="#dt-anonymous-input">anonymous input</a></em></dt><dd class="glossdef"><p>The <em class="glossterm"><a href="#dt-compound-step">compound steps</a></em> 
      <a href="#p.for-each"><code class="tag-element">p:for-each</code></a> and <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> each declare
        a single primary input without a port name. Such an input is called an 
      <em class="firstterm">anonymous input</em>.</p></dd><dt id="glossary.2.8" class="glossentry"><em class="glossterm"><a href="#dt-atomic-step">atomic
step</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">atomic
step</em> is a step that does not contain a subpipline when it
is invoked.</p></dd><dt id="glossary.2.9" class="glossentry"><em class="glossterm"><a href="#dt-attribute-value-template">attribute value
template</a></em></dt><dd class="glossdef"><p>In an attribute
that is designated as an <em class="firstterm">attribute value
template</em>, an expression can be used by surrounding the
expression with curly brackets (<code class="code">{}</code>), following the
general rules for <em class="glossterm"><a href="#dt-value-template">value
templates</a></em></p></dd><dt id="glossary.2.10" class="glossentry"><em class="glossterm"><a href="#dt-bag-merger">bag-merger</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">bag-merger</em> of two or more bags
        (where a bag is an unordered list or, equivalently, something like a set except that it may
        contain duplicates) is a bag constructed by starting with an empty bag and adding each
        member of each of the input bags in turn to it. It follows that the cardinality of the
        result is the sum of the cardinality of all the input bags.</p></dd><dt id="glossary.2.11" class="glossentry"><em class="glossterm"><a href="#dt-by-source">by
                  source</a></em></dt><dd class="glossdef"><p>A document is specified <em class="firstterm">by
                  source</em> if it references a specific port on another step.</p></dd><dt id="glossary.2.12" class="glossentry"><em class="glossterm"><a href="#dt-by-URI">by URI</a></em></dt><dd class="glossdef"><p>A document is specified
<em class="firstterm">by URI</em> if it is referenced with a
URI.</p></dd><dt id="glossary.2.13" class="glossentry"><em class="glossterm"><a href="#dt-compound-step">compound
step</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">compound
step</em> is a step that contains one or more
<em class="glossterm"><a href="#dt-subpipeline">subpipelines</a></em>.</p></dd><dt id="glossary.2.14" class="glossentry"><em class="glossterm"><a href="#dt-connection">connection</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">connection</em> associates an
               input or output port with some data source.</p></dd><dt id="glossary.2.15" class="glossentry"><em class="glossterm"><a href="#dt-contained-steps">contained steps</a></em></dt><dd class="glossdef"><p>The steps that occur directly
within a container are called
that step’s <em class="firstterm">contained steps</em>. In other words,
“container” and “contained steps” are inverse relationships.</p></dd><dt id="glossary.2.16" class="glossentry"><em class="glossterm"><a href="#dt-container">container</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">container</em>
is either a compound step or one
of the non-step wrapper elements in a compound step that contains
several subpipelines.</p></dd><dt id="glossary.2.17" class="glossentry"><em class="glossterm"><a href="#dt-declared-inputs">declared inputs</a></em></dt><dd class="glossdef"><p>The input ports declared on a step are its
            <em class="firstterm">declared inputs</em>.</p></dd><dt id="glossary.2.18" class="glossentry"><em class="glossterm"><a href="#dt-declared-outputs">declared outputs</a></em></dt><dd class="glossdef"><p>The output ports declared on a step are its
            <em class="firstterm">declared outputs</em>.</p></dd><dt id="glossary.2.19" class="glossentry"><em class="glossterm"><a href="#dt-default-readable-port">default readable port</a></em></dt><dd class="glossdef"><p>The
                <em class="firstterm">default readable port</em>, which may be undefined, is a specific
              step name/port name pair from the set of readable ports.</p></dd><dt id="glossary.2.20" class="glossentry"><em class="glossterm"><a href="#dt-document">document</a></em></dt><dd class="glossdef"><p>A
          <em class="firstterm">document</em> is a <em class="glossterm"><a href="#dt-representation">representation</a></em> and its
          <em class="glossterm"><a href="#dt-document-properties">document properties</a></em>.</p></dd><dt id="glossary.2.21" class="glossentry"><em class="glossterm"><a href="#dt-document-properties">document
properties</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">document
properties</em> are key/value pairs; they are exposed to the
XProc pipeline as a map (<code class="type">map(xs:QName, item()*)</code>).</p></dd><dt id="glossary.2.22" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
      error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
      error</em> is one which occurs while a pipeline is being
      evaluated (and cannot be detected before evaluation begins).</p></dd><dt id="glossary.2.23" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-evaluation">dynamic evaluation</a></em></dt><dd class="glossdef"><p><em class="firstterm">Dynamic
evaluation</em> consists of tasks which, in general,
cannot be performed out until a source document is available.</p></dd><dt id="glossary.2.24" class="glossentry"><em class="glossterm"><a href="#dt-effectively-excluded">effectively
excluded</a></em></dt><dd class="glossdef"><p>If the effective boolean value of the
<code class="tag-attribute">[p:]use-when</code> expression is false, then
the element and all of its descendants are <em class="firstterm">effectively
excluded</em> from the pipeline document.</p></dd><dt id="glossary.2.25" class="glossentry"><em class="glossterm"><a href="#dt-empty-environment">empty environment</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">empty environment</em>
          contains no readable ports, an undefined default readable port, and no in-scope
          bindings.</p></dd><dt id="glossary.2.26" class="glossentry"><em class="glossterm"><a href="#dt-empty-sequence">empty sequence</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">empty sequence</em> of
                documents is specified with the <a href="#p.empty"><code class="tag-element">p:empty</code></a> element.</p></dd><dt id="glossary.2.27" class="glossentry"><em class="glossterm"><a href="#dt-environment">environment</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">environment</em> is a
          context-dependent collection of information available within subpipelines.</p></dd><dt id="glossary.2.28" class="glossentry"><em class="glossterm"><a href="#dt-extension-attribute">extension attribute</a></em></dt><dd class="glossdef"><p>An element from the XProc namespace
            <span class="rfc2119" id="glossary.2.28.2.1.1">may</span> have any attribute not from the XProc namespace, provided that
          the expanded-QName of the attribute has a non-null namespace URI. Such an attribute is
          called an <em class="firstterm">extension attribute</em>.</p></dd><dt id="glossary.2.29" class="glossentry"><em class="glossterm"><a href="#dt-external-step">external step</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">external step</em>
is one supported by the implementation, but which has no exposed subpipeline.</p></dd><dt id="glossary.2.30" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.30.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.31" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd><dt id="glossary.2.32" class="glossentry"><em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em></dt><dd class="glossdef"><p>The
                <em class="firstterm">in-scope bindings</em> are a set of name-value pairs, based on
                <em class="glossterm"><a href="#dt-option">option</a></em> and <em class="glossterm"><a href="#dt-variable">variable</a></em>
              bindings.</p></dd><dt id="glossary.2.33" class="glossentry"><em class="glossterm"><a href="#dt-inherited-environment">inherited environment</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">inherited environment</em> of a
            <em class="glossterm"><a href="#dt-contained-steps">contained step</a></em> is an environment that
          is the same as the environment of its <em class="glossterm"><a href="#dt-container">container</a></em> with the <a href="#dt-standard-modifications">standard modifications</a>. </p></dd><dt id="glossary.2.34" class="glossentry"><em class="glossterm"><a href="#dt-initial-environment">initial
                     environment</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">initial
                     environment</em> is a <em class="glossterm"><a href="#dt-connection">connection</a></em> for each of the
                     <em class="glossterm"><a href="#dt-readable-ports">readable ports</a></em> and a set of option bindings used to
                  construct the initial <em class="glossterm"><a href="#dt-in-scope-bindings">in-scope bindings</a></em>.</p></dd><dt id="glossary.2.35" class="glossentry"><em class="glossterm"><a href="#dt-inline-document">inline document</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">inline document</em> is
                specified directly in the body of the element to which it connects.</p></dd><dt id="glossary.2.36" class="glossentry"><em class="glossterm"><a href="#dt-last-step">last step</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">last step</em> in a
subpipeline is its last step in document order.</p></dd><dt id="glossary.2.37" class="glossentry"><em class="glossterm"><a href="#dt-map-attribute">map attribute</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">map attribute</em> is an option’s syntactic
                  shortcut attribute for which the option’s sequence type is a map or array.</p></dd><dt id="glossary.2.38" class="glossentry"><em class="glossterm"><a href="#dt-matches">matches</a></em></dt><dd class="glossdef"><p>A step <em class="firstterm">matches</em> its signature if and
          only if it specifies an input for each declared input, it specifies no inputs that are not
          declared, it specifies an option for each option that is declared to be required, and it
          specifies no options that are not declared.</p></dd><dt id="glossary.2.39" class="glossentry"><em class="glossterm"><a href="#dt-namespace-fixup">namespace fixup</a></em></dt><dd class="glossdef"><p>To produce a serializable
              <em class="glossterm"><a href="#dt-XML">XML</a></em> document, the XProc processor must sometimes add additional
            namespace nodes, perhaps even renaming prefixes, to satisfy the constraints of
              <em class="glossterm"><a href="#dt-Namespaces-in-XML">Namespaces in XML</a></em>. This process is referred to as
              <em class="firstterm">namespace fixup</em>.</p></dd><dt id="glossary.2.40" class="glossentry"><em class="glossterm"><a href="#dt-option">option</a></em></dt><dd class="glossdef"><p>An <em class="firstterm">option</em> is a name/value pair. The name
            <span class="rfc2119" id="glossary.2.40.2.1.2">must</span> be an <a href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
            name</a>. The value may be any XPath data model value.</p></dd><dt id="glossary.2.41" class="glossentry"><em class="glossterm"><a href="#dt-pipeline">pipeline</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">pipeline</em> is a set of connected
        steps, with outputs of one step flowing into inputs of another.</p></dd><dt id="glossary.2.42" class="glossentry"><em class="glossterm"><a href="#dt-primary-input-port">primary input
            port</a></em></dt><dd class="glossdef"><p>If a step has an input port which is
          explicitly marked “<code class="code">primary='true'</code>”, or if it has exactly one document input
          port and that port is <em>not</em> explicitly marked
            “<code class="code">primary='false'</code>”, then that input port is the <em class="firstterm">primary input
            port</em> of the step.</p></dd><dt id="glossary.2.43" class="glossentry"><em class="glossterm"><a href="#dt-primary-output-port">primary output
            port</a></em></dt><dd class="glossdef"><p>If a step has an output port which is
          explicitly marked “<code class="code">primary='true'</code>”, or if it has exactly one document output
          port and that port is <em>not</em> explicitly marked
            “<code class="code">primary='false'</code>”, then that output port is the <em class="firstterm">primary output
            port</em> of the step.</p></dd><dt id="glossary.2.44" class="glossentry"><em class="glossterm"><a href="#dt-prologue">prologue</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">prologue</em> consists of
the <a href="#p.input"><code class="tag-element">p:input</code></a>, <a href="#p.output"><code class="tag-element">p:output</code></a>, and <a href="#p.option"><code class="tag-element">p:option</code></a> elements.
</p></dd><dt id="glossary.2.45" class="glossentry"><em class="glossterm"><a href="#dt-readable-ports">readable
                ports</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">readable
                ports</em> are a set of step name/port name pairs.</p></dd><dt id="glossary.2.46" class="glossentry"><em class="glossterm"><a href="#dt-representation">representation</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">representation</em> is a data structure used by an XProc processor to
        refer to the actual document content.</p></dd><dt id="glossary.2.47" class="glossentry"><em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">selection pattern</em> uses a
            subset of the syntax for path expressions, and is defined to match a node if the
            corresponding path expression would select the node. It is defined as in the 
            <a href="https://www.w3.org/TR/xslt-30/#dt-selection-pattern">XSLT 3.0
              specification</a>.</p></dd><dt id="glossary.2.48" class="glossentry"><em class="glossterm"><a href="#dt-shadow">shadow</a></em></dt><dd class="glossdef"><p>We
          say that a variable <em class="firstterm">shadows</em> another variable (or option) if it has
          the same name and appears later in the same lexical scope.</p></dd><dt id="glossary.2.49" class="glossentry"><em class="glossterm"><a href="#dt-signature">signature</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">signature</em> of a step is the set
          of inputs, outputs, and options that it is declared to accept.</p></dd><dt id="glossary.2.50" class="glossentry"><em class="glossterm"><a href="#dt-static-analysis">static analysis</a></em></dt><dd class="glossdef"><p><em class="firstterm">Static
analysis</em>
consists of
those tasks that can be performed by inspection of the pipeline
alone, including the binding of
<a href="#statics">static options</a>,
computation of serialization properties and document-properties,
<a href="#use-when">evaluation of <code class="code">use-when</code> expressions</a>,
performing a static analysis of all XPath expressions, and detecting static errors.</p></dd><dt id="glossary.2.51" class="glossentry"><em class="glossterm"><a href="#dt-static-error">static error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">static error</em> is one which can
          be detected before pipeline evaluation is even attempted.</p></dd><dt id="glossary.2.52" class="glossentry"><em class="glossterm"><a href="#dt-step">step</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">step</em> is the
basic computational unit of a pipeline.</p></dd><dt id="glossary.2.53" class="glossentry"><em class="glossterm"><a href="#dt-step-type-exports">step type exports</a></em></dt><dd class="glossdef"><p>The <em class="firstterm">step type exports</em> of an
        XProc element, against the background of a set of URIs of resources already visited (call
        this set <em>Visited</em>), are defined by cases.</p></dd><dt id="glossary.2.54" class="glossentry"><em class="glossterm"><a href="#dt-subpipeline">subpipeline</a></em></dt><dd class="glossdef"><p>Sibling steps and variables (and the
connections between them) form a
<em class="firstterm">subpipeline</em>.</p></dd><dt id="glossary.2.55" class="glossentry"><em class="glossterm"><a href="#dt-text-media-type">text media type</a></em></dt><dd class="glossdef"><p>Media types of the form
“<code class="literal">text/<em class="replaceable"><code>something</code></em></code>”
are <em class="firstterm">text media types</em> with the
exception of “<code class="literal">text/xml</code>” which is an XML media type,
and “<code class="literal">text/html</code>” which is an HTML media type. Additionally the
  media types “<code class="literal">application/javascript</code>”, 
“<code class="literal">application/relax-ng-compact-syntax</code>”, and
“<code class="literal">application/xquery</code>” are also text media types.
</p></dd><dt id="glossary.2.56" class="glossentry"><em class="glossterm"><a href="#dt-text-value-template">text value template</a></em></dt><dd class="glossdef"><p>In a text node that is
designated as a <em class="firstterm">text value template</em>,
expressions can be used by surrounding each expression with curly
brackets (<code class="code">{}</code>), following the
general rules for <em class="glossterm"><a href="#dt-value-template">value
templates</a></em>.</p></dd><dt id="glossary.2.57" class="glossentry"><em class="glossterm"><a href="#dt-value-template">value template</a></em></dt><dd class="glossdef"><p>Collectively,
attribute value templates and text value templates are referred to as
<em class="firstterm">value templates</em>.</p></dd><dt id="glossary.2.58" class="glossentry"><em class="glossterm"><a href="#dt-variable">variable</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">variable</em> is a name/value pair. The name
            <span class="rfc2119" id="glossary.2.58.2.1.2">must</span> be an <a href="http://www.w3.org/TR/REC-xml-names/#dt-expname">expanded
            name</a>. The value may be any XPath data model value.</p></dd><dt id="glossary.2.59" class="glossentry"><em class="glossterm"><a href="#dt-visible">visible</a></em></dt><dd class="glossdef"><p>If two names are in the same scope, we say that
they are <em class="firstterm">visible</em> to each other.</p></dd></dl></div></div></article>
<article id="language-summary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">E. </bdi>Pipeline Language Summary<a aria-label="§" class="self-link" href="#language-summary"/></h2></header><div class="content">


<p>This appendix summarizes the XProc pipeline language. Machine readable
descriptions of this language are available in
<a href="schemas/xproc.rng">RELAX NG</a> (and the
RELAX NG 
<a href="schemas/xproc.rnc">compact syntax</a>).
</p>

<p id="d5066e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:for-each<br/>  name? = <var>NCName</var>&gt;<br/>    ((<a href="#p.with-input">p:with-input</a>? &amp; <br/>      <a href="#p.output">p:output</a>*),<br/>     <var>subpipeline</var>)<br/>&lt;/p:for-each&gt;</code></p><p id="d5072e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:viewport<br/>  name? = <var>NCName</var><br/>  <strong>match</strong> = <var>XSLTSelectionPattern</var>&gt;<br/>    ((<a href="#p.with-input">p:with-input</a>? &amp; <br/>      <a href="#p.output">p:output</a>?),<br/>     <var>subpipeline</var>)<br/>&lt;/p:viewport&gt;</code></p><p id="d5077e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:choose<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     ((<a href="#p.when">p:when</a>+,<br/>       <a href="#p.otherwise">p:otherwise</a>?) | <br/>      (<a href="#p.when">p:when</a>*,<br/>       <a href="#p.otherwise">p:otherwise</a>)))<br/>&lt;/p:choose&gt;</code></p><p id="d5083e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:when<br/>  name? = <var>NCName</var><br/>  <strong>test</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     <a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:when&gt;</code></p><p id="d5087e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:otherwise<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:otherwise&gt;</code></p><p id="d5093e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:if<br/>  name? = <var>NCName</var><br/>  <strong>test</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>?,<br/>     <a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:if&gt;</code></p><p id="d5097e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:group<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:group&gt;</code></p><p id="d5104e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:try<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>,<br/>     ((<a href="#p.catch">p:catch</a>+,<br/>        <a href="#p.finally">p:finally</a>?) | <br/>       (<a href="#p.catch">p:catch</a>*,<br/>        <a href="#p.finally">p:finally</a>)))<br/>&lt;/p:try&gt;</code></p><p id="d5109e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:catch<br/>  name? = <var>NCName</var><br/>  code? = <var>EQNameList</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:catch&gt;</code></p><p id="d5113e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:finally<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.output">p:output</a>*,<br/>     <var>subpipeline</var>)<br/>&lt;/p:finally&gt;</code></p><p id="d5128e0" class="element-syntax element-syntax-language-construct"><code>&lt;<var>p:atomic-step</var><br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a> | <br/>     <a href="#p.with-option">p:with-option</a>)*<br/>&lt;/<var>p:atomic-step</var>&gt;</code></p><p id="d5133e0" class="element-syntax element-syntax-language-construct"><code>&lt;<var>ext:atomic-step</var><br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a> | <br/>     <a href="#p.with-option">p:with-option</a>)*<br/>&lt;/<var>ext:atomic-step</var>&gt;</code></p><p id="d5149e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:input<br/>  <strong>port</strong> = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  select? = <var>XPathExpression</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:input&gt;</code></p><p id="d5164e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:with-input<br/>  port? = <var>NCName</var><br/>  select? = <var>XPathExpression</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:with-input&gt;</code></p><p id="d5169e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var> /&gt;</code></p><p id="d5186e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:output&gt;</code></p><p id="d5204e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:output<br/>  port? = <var>NCName</var><br/>  sequence? = <var>boolean</var><br/>  primary? = <var>boolean</var><br/>  content-types? = <var>ContentTypes</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  serialization? = <var>map(xs:QName,item()*)</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:output&gt;</code></p><p id="d5221e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:variable<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  <strong>select</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:variable&gt;</code></p><p id="d5229e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:option<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  values? = <var>string</var><br/>  static? = <var>boolean</var><br/>  required? = <var>boolean</var><br/>  select? = <var>XPathExpression</var><br/>  visibility? = <var>private|public</var> /&gt;</code></p><p id="d5246e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:with-option<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  <strong>select</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:with-option&gt;</code></p><p id="d5264e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:declare-step<br/>  name? = <var>NCName</var><br/>  type? = <var>EQName</var><br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var><br/>  visibility? = <var>private|public</var>&gt;<br/>    (<a href="#p.import">p:import</a> | <br/>     <a href="#p.import-functions">p:import-functions</a>)*,<br/>    (<a href="#p.input">p:input</a> | <br/>     <a href="#p.output">p:output</a> | <br/>     <a href="#p.option">p:option</a>)*,<br/>    <a href="#p.declare-step">p:declare-step</a>*,<br/>    <var>subpipeline</var>?<br/>&lt;/p:declare-step&gt;</code></p><p id="d5276e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:declare-step<br/>  name? = <var>NCName</var><br/>  type? = <var>EQName</var><br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var><br/>  visibility? = <var>private|public</var>&gt;<br/>    (<a href="#p.input">p:input</a> | <br/>     <a href="#p.output">p:output</a> | <br/>     <a href="#p.option">p:option</a>)*<br/>&lt;/p:declare-step&gt;</code></p><p id="d5288e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:library<br/>  psvi-required? = <var>boolean</var><br/>  xpath-version? = <var>decimal</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  version? = <var>3.0</var>&gt;<br/>    (<a href="#p.import">p:import</a> | <br/>     <a href="#p.import-functions">p:import-functions</a>)*,<br/>    <a href="#p.option">p:option</a>*,<br/>    <a href="#p.declare-step">p:declare-step</a>*<br/>&lt;/p:library&gt;</code></p><p id="d5290e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:import<br/>  <strong>href</strong> = <var>anyURI</var> /&gt;</code></p><p id="d5294e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:import-functions<br/>  <strong>href</strong> = <var>anyURI</var><br/>  content-type? = <var>ContentType</var><br/>  namespace? = <var>string</var> /&gt;</code></p><p id="d5297e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:pipe<br/>  step? = <var>NCName</var><br/>  port? = <var>NCName</var> /&gt;</code></p><p id="d5303e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:inline<br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var><br/>  content-type? = <var>string</var><br/>  document-properties? = <var>map(xs:QName,item()*)</var><br/>  encoding? = <var>string</var>&gt;<br/>    <var>anyNode</var>*<br/>&lt;/p:inline&gt;</code></p><p id="d5308e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:document<br/>  <strong>href</strong> = { <var>anyURI</var> }<br/>  content-type? = <var>string</var><br/>  document-properties? = <var>map(xs:QName,item()*)</var><br/>  parameters? = <var>map(xs:QName,item()*)</var> /&gt;</code></p><p id="d5309e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:empty /&gt;</code></p><p id="d5311e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:documentation&gt;<br/>    <var>any-well-formed-content</var>*<br/>&lt;/p:documentation&gt;</code></p><p id="d5313e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:pipeinfo&gt;<br/>    <var>any-well-formed-content</var>*<br/>&lt;/p:pipeinfo&gt;</code></p>

<p>The core steps are also summarized here.</p>



<p>As are the optional steps.</p>



<p>And the step vocabulary elements.</p>



</div></article>
<article id="errors-list" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">F. </bdi>List of Error Codes<a aria-label="§" class="self-link" href="#errors-list"/></h2></header><div class="content">


<p>The following error codes are defined by this specification.</p>

<section id="app.static-errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">F.1. </bdi>Static Errors<a aria-label="§" class="self-link" href="#app.static-errors"/></h2></div><div class="content">


<p>The following <em class="glossterm"><a href="#dt-static-error">static errors</a></em>
are defined:</p>

<div id="static-error-summary"><h5>Static Errors</h5><dl class="errs"><dt id="err.S0001"><code class="errqname">err:XS0001</code></dt><dd><p>It is a static error
if there are any loops in the connections between steps, variables,
and options: no step, variable, or option can be connected to itself
nor can there be any sequence of connections through other steps that
leads back to itself.</p><p>See: <a href="#err.inline.S0001">Connections</a></p></dd><dt id="err.S0002"><code class="errqname">err:XS0002</code></dt><dd><p>All steps in the same scope must have
unique names: it is a static error if two steps
with the same name appear in the same scope.</p><p>See: <a href="#err.inline.S0002">Scoping of step names</a></p></dd><dt id="err.S0003"><code class="errqname">err:XS0003</code></dt><dd><p>It is a static error if any declared input is not
               connected.</p><p>See: <a href="#err.inline.S0003">Inputs and Outputs</a></p></dd><dt id="err.S0004"><code class="errqname">err:XS0004</code></dt><dd><p>It is a static error
to declare two or more options on the same step with the same
name.</p><p>See: <a href="#err.inline.S0004">p:option</a></p></dd><dt id="err.S0006"><code class="errqname">err:XS0006</code></dt><dd><p>It is a
            static error if the primary output port has no explicit
          connection and the last step in the subpipeline does not have a
          primary output port.</p><p>See: <a href="#err.inline.S0006">p:for-each</a>, <a href="#err.inline.S0006.1">p:viewport</a>, <a href="#err.inline.S0006.2">Declaring pipelines</a></p></dd><dt id="err.S0008"><code class="errqname">err:XS0008</code></dt><dd><p>It is a static error if any element in
              the XProc namespace has attributes not defined by this specification unless they are
                extension attributes.</p><p>See: <a href="#err.inline.S0008">Common errors</a></p></dd><dt id="err.S0010"><code class="errqname">err:XS0010</code></dt><dd><p>It is a static error if a
          pipeline contains a step whose specified inputs, outputs, and options do not match the signature for steps of
          that type.</p><p>See: <a href="#err.inline.S0010">Extension Steps</a></p></dd><dt id="err.S0011"><code class="errqname">err:XS0011</code></dt><dd><p>It is a static
error to identify two ports with the same name on the same
step.</p><p>See: <a href="#err.inline.S0011">p:input</a>, <a href="#err.inline.S0011.1">p:output</a></p></dd><dt id="err.S0014"><code class="errqname">err:XS0014</code></dt><dd><p>It is a
static error to identify more than one output
port as primary.</p><p>See: <a href="#err.inline.S0014">p:output</a></p></dd><dt id="err.S0015"><code class="errqname">err:XS0015</code></dt><dd><p>It is a static error if a compound step
              has no contained steps.</p><p>See: <a href="#err.inline.S0015">Common errors</a></p></dd><dt id="err.S0017"><code class="errqname">err:XS0017</code></dt><dd><p>It is a static error
to specify that an option is both required
and has a default value.</p><p>See: <a href="#err.inline.S0017">p:option</a></p></dd><dt id="err.S0018"><code class="errqname">err:XS0018</code></dt><dd><p>If an
option is required, it is a static error to
invoke the step without specifying a value for that
option.</p><p>See: <a href="#err.inline.S0018">p:option</a></p></dd><dt id="err.S0022"><code class="errqname">err:XS0022</code></dt><dd><p>In all cases except when the
p:pipe is within an p:output of a
compound step, it is a static
error if the port identified by the p:pipe is not
in the readable ports of the step that contains
the p:pipe.</p><p>See: <a href="#err.inline.S0022">p:pipe</a></p></dd><dt id="err.S0025"><code class="errqname">err:XS0025</code></dt><dd><p>It is a static
error if the expanded-QName value of the type attribute is in no namespace or in the
XProc namespace.</p><p>See: <a href="#err.inline.S0025">Declaring pipelines</a></p></dd><dt id="err.S0027"><code class="errqname">err:XS0027</code></dt><dd><p>It is a static error
if an option is specified with both the shortcut form and the long
form.</p><p>See: <a href="#err.inline.S0027">Syntactic Shortcut for Option Values</a></p></dd><dt id="err.S0028"><code class="errqname">err:XS0028</code></dt><dd><p>It is a static error to declare an
option or variable in the XProc namespace.</p><p>See: <a href="#err.inline.S0028">p:variable</a>, <a href="#err.inline.S0028.1">p:option</a></p></dd><dt id="err.S0029"><code class="errqname">err:XS0029</code></dt><dd><p>It is a static error
to specify a connection for a p:output inside a
p:declare-step for an external step.</p><p>See: <a href="#err.inline.S0029">p:output</a></p></dd><dt id="err.S0030"><code class="errqname">err:XS0030</code></dt><dd><p>It is a static error to specify
that more than one input port is the primary.</p><p>See: <a href="#err.inline.S0030">p:input</a></p></dd><dt id="err.S0031"><code class="errqname">err:XS0031</code></dt><dd><p>It is a static error to use an
option name in p:with-option if the step type being invoked
has not declared an option with that name.</p><p>See: <a href="#err.inline.S0031">p:with-option</a>, <a href="#err.inline.S0031.1">Syntactic Shortcut for Option Values</a></p></dd><dt id="err.S0032"><code class="errqname">err:XS0032</code></dt><dd><p>It
is a static error if no connection is provided
and the default readable port is
undefined.</p><p>See: <a href="#err.inline.S0032">p:with-input</a>, <a href="#err.inline.S0032.1">Connection precedence</a>, <a href="#err.inline.S0032.2">Connection precedence</a></p></dd><dt id="err.S0036"><code class="errqname">err:XS0036</code></dt><dd><p>All the step types in a pipeline or library must
          have unique names: it is a static error if any step type name is
          built-in and/or declared or defined more than once in the same scope.</p><p>See: <a href="#err.inline.S0036">Scoping of step type names</a>, <a href="#err.inline.S0036.1">Handling Circular and Re-entrant Library Imports (Non-Normative)</a>, <a href="#err.inline.S0036.2">Handling Circular and Re-entrant Library Imports (Non-Normative)</a>, <a href="#err.inline.S0036.3">Handling Circular and Re-entrant Library Imports (Non-Normative)</a></p></dd><dt id="err.S0037"><code class="errqname">err:XS0037</code></dt><dd><p>It is a static error if any user extension 
            step or any element in the XProc namespace other than p:inline directly contains 
            text nodes that do not consist entirely of whitespace.</p><p>See: <a href="#err.inline.S0037">Common errors</a></p></dd><dt id="err.S0038"><code class="errqname">err:XS0038</code></dt><dd><p>It is a static error if any required
              attribute is not provided.</p><p>See: <a href="#err.inline.S0038">Common errors</a></p></dd><dt id="err.S0043"><code class="errqname">err:XS0043</code></dt><dd><p>It is a static error
to specify a port name on p:with-input for p:for-each,
  p:viewport, p:choose, p:when, or p:if.</p><p>See: <a href="#err.inline.S0043">p:with-input</a></p></dd><dt id="err.S0044"><code class="errqname">err:XS0044</code></dt><dd><p>It is a static error if any step contains 
            an atomic step for which there is no visible declaration.</p><p>See: <a href="#err.inline.S0044">Common errors</a></p></dd><dt id="err.S0048"><code class="errqname">err:XS0048</code></dt><dd><p>It is a static error to use a declared step as a
            compound step.</p><p>See: <a href="#err.inline.S0048">Extension Steps</a></p></dd><dt id="err.S0052"><code class="errqname">err:XS0052</code></dt><dd><p>It is a
            static error if the URI of a p:import cannot be
          retrieved or if, once retrieved, it does not point to a p:library or
            p:declare-step.</p><p>See: <a href="#err.inline.S0052">p:import</a></p></dd><dt id="err.S0053"><code class="errqname">err:XS0053</code></dt><dd><p>It is a static error to import a single pipeline
          if that pipeline does not have a type.</p><p>See: <a href="#err.inline.S0053">p:import</a></p></dd><dt id="err.S0057"><code class="errqname">err:XS0057</code></dt><dd><p>It is a static error if the exclude-inline-prefixes attribute does not
            contain a list of tokens or if any of those tokens (except
            #all or #default) is not a
            prefix bound to a namespace in the in-scope namespaces of the element
            on which it occurs.</p><p>See: <a href="#err.inline.S0057">Inline XML and HTML content</a></p></dd><dt id="err.S0058"><code class="errqname">err:XS0058</code></dt><dd><p>It is a static error if the value
            #default is used within the exclude-inline-prefixes attribute and there is no default
            namespace in scope.</p><p>See: <a href="#err.inline.S0058">Inline XML and HTML content</a></p></dd><dt id="err.S0059"><code class="errqname">err:XS0059</code></dt><dd><p>It is a static error if the pipeline
              element is not p:declare-step or
                p:library.</p><p>See: <a href="#err.inline.S0059">Common errors</a></p></dd><dt id="err.S0060"><code class="errqname">err:XS0060</code></dt><dd><p>It
is a static error if the processor encounters
an explicit request for a version of the language other than “3.0”.</p><p>See: <a href="#err.inline.S0060">Versioning Considerations</a></p></dd><dt id="err.S0062"><code class="errqname">err:XS0062</code></dt><dd><p>It is a static error if a
required
version attribute
is not present.</p><p>See: <a href="#err.inline.S0062">Versioning Considerations</a>, <a href="#err.inline.S0062.1">Declaring pipelines</a></p></dd><dt id="err.S0063"><code class="errqname">err:XS0063</code></dt><dd><p>It is a
static error if the value of the
version attribute is not a
xs:decimal.</p><p>See: <a href="#err.inline.S0063">Versioning Considerations</a></p></dd><dt id="err.S0064"><code class="errqname">err:XS0064</code></dt><dd><p>It is a static error
if the code attribute is missing from
any but the last p:catch or if any error code occurs
in more than one code attribute among
sibling p:catch elements.</p><p>See: <a href="#err.inline.S0064">p:catch</a></p></dd><dt id="err.S0065"><code class="errqname">err:XS0065</code></dt><dd><p>It is a static error if there
is no primary input port.</p><p>See: <a href="#err.inline.S0065">p:with-input</a></p></dd><dt id="err.S0066"><code class="errqname">err:XS0066</code></dt><dd><p>It is a static error if
an expression does not have a closing right curly bracket or if an
unescaped right curly bracket occurs outside of an expression.
</p><p>See: <a href="#err.inline.S0066">Value Templates</a></p></dd><dt id="err.S0067"><code class="errqname">err:XS0067</code></dt><dd><p>It is a static error if the
step attribute is not specified, and there
is no default readable port.
It is a static error if the
port attribute is not specified, and the
step identified has no primary output port.
</p><p>See: <a href="#err.inline.S0067">p:pipe</a></p></dd><dt id="err.S0068"><code class="errqname">err:XS0068</code></dt><dd><p>It is a static error if the
port attribute is not specified, and the
step identified has no primary output port.</p><p>See: <a href="#err.inline.S0068">p:pipe</a></p></dd><dt id="err.S0069"><code class="errqname">err:XS0069</code></dt><dd><p>It is a static error if the
encoding specified is not supported by the implementation.</p><p>See: <a href="#err.inline.S0069">p:inline</a></p></dd><dt id="err.S0071"><code class="errqname">err:XS0071</code></dt><dd><p>All the static options in a pipeline or
library must have unique names: it is a
static error if any static option name is
declared more than once in the same scope.</p><p>See: <a href="#err.inline.S0071">Scoping of static option names</a></p></dd><dt id="err.S0072"><code class="errqname">err:XS0072</code></dt><dd><p>It is a static error
if the name of any output port on the p:finally is the same
as the name of any other output port in the p:try or any
of its sibling p:catch elements.</p><p>See: <a href="#err.inline.S0072">p:finally</a></p></dd><dt id="err.S0073"><code class="errqname">err:XS0073</code></dt><dd><p>It is a
static error if any specified name is not the
name of an in-scope step.</p><p>See: <a href="#err.inline.S0073">Additional dependent connections</a></p></dd><dt id="err.S0074"><code class="errqname">err:XS0074</code></dt><dd><p>It is a static
error if a p:choose has neither a
p:when nor a p:otherwise.</p><p>See: <a href="#err.inline.S0074">p:choose</a></p></dd><dt id="err.S0075"><code class="errqname">err:XS0075</code></dt><dd><p>It is a static error
if a p:try does not have at least one subpipeline step,
at least one of p:catch or p:finally, and at most
one p:finally.</p><p>See: <a href="#err.inline.S0075">p:try</a></p></dd><dt id="err.S0076"><code class="errqname">err:XS0076</code></dt><dd><p>It is a static error if
there are any loops in the connections between steps and variables:
no step can refer to a variable if there is any sequence of connections
from that step that leads back to the input that provides the context
node for the expression that defines the value of the variable.</p><p>See: <a href="#err.inline.S0076">p:variable</a>, <a href="#err.inline.S0076.1">p:with-option</a></p></dd><dt id="err.S0077"><code class="errqname">err:XS0077</code></dt><dd><p>It is a static error if the value on an
            attribute of an XProc element does not satisfy the type required for that attribute.</p><p>See: <a href="#err.inline.S0077">Common errors</a></p></dd><dt id="err.S0078"><code class="errqname">err:XS0078</code></dt><dd><p>When the p:pipe is within an
p:output of a compound step, it is a
static error if the port identified by the
p:pipe is not in the readable ports
of the compound step and is not a readable port of a contained
step.</p><p>See: <a href="#err.inline.S0078">p:pipe</a></p></dd><dt id="err.S0079"><code class="errqname">err:XS0079</code></dt><dd><p>It is a static error
if comments, non-whitespace text nodes, or processing instructions occur as siblings of an element node
that would be treated as an implicit inline.</p><p>See: <a href="#err.inline.S0079">Implicit inlines</a></p></dd><dt id="err.S0080"><code class="errqname">err:XS0080</code></dt><dd><p>It is a static error
to include more than one p:with-option with the same option
name as part of the same step invocation.</p><p>See: <a href="#err.inline.S0080">p:with-option</a></p></dd><dt id="err.S0081"><code class="errqname">err:XS0081</code></dt><dd><p>If href is specified,
it is a static error if
any child elements other than p:documentation and
p:pipeinfo are present.</p><p>See: <a href="#err.inline.S0081">p:with-input</a></p></dd><dt id="err.S0082"><code class="errqname">err:XS0082</code></dt><dd><p>If pipe is specified,
it is a static error
any child elements other than p:documentation and
p:pipeinfo are present.</p><p>See: <a href="#err.inline.S0082">p:with-input</a></p></dd><dt id="err.S0083"><code class="errqname">err:XS0083</code></dt><dd><p>It is a static 
error if the value of the code
attribute is not a whitespace separated list of EQNames.</p><p>See: <a href="#err.inline.S0083">p:catch</a></p></dd><dt id="err.S0085"><code class="errqname">err:XS0085</code></dt><dd><p>It is a static error if both
a href attribute and a
pipe attribute are present.</p><p>See: <a href="#err.inline.S0085">p:with-input</a>, <a href="#err.inline.S0085.1">p:with-input</a></p></dd><dt id="err.S0086"><code class="errqname">err:XS0086</code></dt><dd><p>It is a static error
to provide more than one p:with-input for the same port.</p><p>See: <a href="#err.inline.S0086">p:with-input</a></p></dd><dt id="err.S0087"><code class="errqname">err:XS0087</code></dt><dd><p>It is
a static error if the name attribute on
p:option or p:variable has a prefix which is not
bound to a namespace.</p><p>See: <a href="#err.inline.S0087">p:variable</a>, <a href="#err.inline.S0087.1">p:option</a></p></dd><dt id="err.S0088"><code class="errqname">err:XS0088</code></dt><dd><p>It is
a static error if the qualified name of a
p:variable shadows
the name of a static option.</p><p>See: <a href="#err.inline.S0088">p:variable</a>, <a href="#err.inline.S0088.1">p:option</a></p></dd><dt id="err.S0089"><code class="errqname">err:XS0089</code></dt><dd><p>It is a static error
if the p:empty binding appears as a sibling of any other binding,
including itself.</p><p>See: <a href="#err.inline.S0089">p:empty</a></p></dd><dt id="err.S0090"><code class="errqname">err:XS0090</code></dt><dd><p>It is a static error if the value
of the pipe attribute contains any tokens not
of the form port-name,
port-name@step-name, or @step-name.
</p><p>See: <a href="#err.inline.S0090">p:with-input</a></p></dd><dt id="err.S0091"><code class="errqname">err:XS0091</code></dt><dd><p>It is a static error if an
p:option shadows another option declared within
the same p:declare-step.</p><p>See: <a href="#err.inline.S0091">Declaring pipelines</a></p></dd><dt id="err.S0092"><code class="errqname">err:XS0092</code></dt><dd><p>It is a static
error if a p:with-option attempts to change
the value of an option that is declared static.</p><p>See: <a href="#err.inline.S0092">p:with-option</a>, <a href="#err.inline.S0092.1">Syntactic Shortcut for Option Values</a></p></dd><dt id="err.S0094"><code class="errqname">err:XS0094</code></dt><dd><p>It is a static error if
a p:variable does not have a select attribute.</p><p>See: <a href="#err.inline.S0094">p:variable</a></p></dd><dt id="err.S0095"><code class="errqname">err:XS0095</code></dt><dd><p>It is a static error
to specify that an option is both required
and static.</p><p>See: <a href="#err.inline.S0095">p:option</a></p></dd><dt id="err.S0096"><code class="errqname">err:XS0096</code></dt><dd><p>It
          is a static error if the sequence type is not syntactically valid.</p><p>See: <a href="#err.inline.S0096">Variable and option types</a></p></dd><dt id="err.S0097"><code class="errqname">err:XS0097</code></dt><dd><p>It is a static error if an
attribute in the XProc namespace appears on an element in the XProc
namespace.</p><p>See: <a href="#err.inline.S0097">Common Attributes</a></p></dd><dt id="err.S0099"><code class="errqname">err:XS0099</code></dt><dd><p>It
is a static error if step 
or port are not valid instances of 
NCName.</p><p>See: <a href="#err.inline.S0099">p:pipe</a></p></dd><dt id="err.S0100"><code class="errqname">err:XS0100</code></dt><dd><p>It is a static error if the pipeline
          document does not conform to the grammar for pipeline documents.</p><p>See: <a href="#err.inline.S0100">Common errors</a></p></dd><dt id="err.S0101"><code class="errqname">err:XS0101</code></dt><dd><p>It is a static error if the
values list is not an XPath sequence of atomic values.</p><p>See: <a href="#err.inline.S0101">p:option</a></p></dd><dt id="err.S0102"><code class="errqname">err:XS0102</code></dt><dd><p>It is a static error if alternative
subpipelines have different primary output ports.</p><p>See: <a href="#err.inline.S0102">p:choose</a>, <a href="#err.inline.S0102.1">p:try</a></p></dd><dt id="err.S0103"><code class="errqname">err:XS0103</code></dt><dd><p>It is
a static error if the URI of a
p:import-functions element cannot be retrieved or if, once
retrieved, it points to a library that the processor cannot
import.</p><p>See: <a href="#err.inline.S0103">p:import-functions</a></p></dd><dt id="err.S0104"><code class="errqname">err:XS0104</code></dt><dd><p>It is a static error if the processor
cannot load the function library.</p><p>See: <a href="#err.inline.S0104">p:import-functions</a></p></dd><dt id="err.S0105"><code class="errqname">err:XS0105</code></dt><dd><p>It is a static error if a function
imported from a library has the same name and arity as a function already imported.</p><p>See: <a href="#err.inline.S0105">p:import-functions</a></p></dd><dt id="err.S0106"><code class="errqname">err:XS0106</code></dt><dd><p>It is a
static error if the processor detects that a
particular library is unloadable.</p><p>See: <a href="#err.inline.S0106">p:import-functions</a></p></dd><dt id="err.S0107"><code class="errqname">err:XS0107</code></dt><dd><p>It is a static error in XProc
if any XPath expression or the XSLT selection pattern 
in option match
on p:viewport contains a static error (error in expression syntax,
references to unknown variables or functions, etc.).</p><p>See: <a href="#err.inline.S0107">Initiating a pipeline</a></p></dd><dt id="err.S0108"><code class="errqname">err:XS0108</code></dt><dd><p>It is a static error
if the p:if step does not specify a primary output port.</p><p>See: <a href="#err.inline.S0108">p:if</a></p></dd><dt id="err.S0109"><code class="errqname">err:XS0109</code></dt><dd><p>It is a static error if options that are the direct children of 
        p:library are not declared “static”</p><p>See: <a href="#err.inline.S0109">Static Options</a></p></dd><dt id="err.S0110"><code class="errqname">err:XS0110</code></dt><dd><p>It is a static error if
the requested XPath version is less than “3.1”</p><p>See: <a href="#err.inline.S0110">Declaring pipelines</a>, <a href="#err.inline.S0110.1">p:library</a></p></dd><dt id="err.S0111"><code class="errqname">err:XS0111</code></dt><dd><p>It is a static error if an unrecognized content type shortcut is specified.</p><p>See: <a href="#err.inline.S0111">Specifying content types</a></p></dd><dt id="err.S0112"><code class="errqname">err:XS0112</code></dt><dd><p>It is a static error if
p:finally declares a primary output port either explicitly
or implicitly.</p><p>See: <a href="#err.inline.S0112">p:finally</a></p></dd><dt id="err.S0113"><code class="errqname">err:XS0113</code></dt><dd><p>It is a static error
if either [p:]expand-text or
[p:]inline-expand-text is to be interpreted
by the processor and it does not have the value “true”
or “false”.</p><p>See: <a href="#err.inline.S0113">Expand text attributes</a></p></dd><dt id="err.S0114"><code class="errqname">err:XS0114</code></dt><dd><p>It is a static error
if a port name is specified and the step type being invoked does not have
an input port declared with that name.</p><p>See: <a href="#err.inline.S0114">p:with-input</a></p></dd><dt id="err.S0115"><code class="errqname">err:XS0115</code></dt><dd><p>It is a static error
if two or more elements are contained within a deadlocked network of
[p:]use-when expressions.</p><p>See: <a href="#err.inline.S0115">Conditional Element Exclusion</a></p></dd></dl></div>
</div></section>

<section id="app.dynamic-errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">F.2. </bdi>Dynamic Errors<a aria-label="§" class="self-link" href="#app.dynamic-errors"/></h2></div><div class="content">


<p>The following <em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>
are defined:</p>

<div id="dynamic-error-summary"><h5>Dynamic Errors</h5><dl class="errs"><dt id="err.D0001"><code class="errqname">err:XD0001</code></dt><dd><p>It is a dynamic error if an
XPath expression makes reference to the context item, size, or position when
the context item is undefined.</p><p>See: <a href="#err.inline.D0001">p:choose</a>, <a href="#err.inline.D0001.1">p:when</a>, <a href="#err.inline.D0001.2">p:if</a>, <a href="#err.inline.D0001.3">p:variable</a>, <a href="#err.inline.D0001.4">p:option</a>, <a href="#err.inline.D0001.5">p:with-option</a>, <a href="#err.inline.D0001.6">Processor XPath Context</a>, <a href="#err.inline.D0001.7">Processor XPath Context</a></p></dd><dt id="err.D0006"><code class="errqname">err:XD0006</code></dt><dd><p>If sequence is not
specified, or has the value false, then it is a dynamic
error unless exactly one document appears on the declared
port.</p><p>See: <a href="#err.inline.D0006">p:input</a></p></dd><dt id="err.D0007"><code class="errqname">err:XD0007</code></dt><dd><p>If sequence is not specified on
p:output, or has the value false, then it is a
dynamic error if the step does not produce
exactly one document on the declared port.</p><p>See: <a href="#err.inline.D0007">p:output</a></p></dd><dt id="err.D0010"><code class="errqname">err:XD0010</code></dt><dd><p>It is a dynamic
error if the match expression
on p:viewport matches an attribute or a namespace node.</p><p>See: <a href="#err.inline.D0010">p:viewport</a></p></dd><dt id="err.D0012"><code class="errqname">err:XD0012</code></dt><dd><p>It is a dynamic error if any attempt is
              made to dereference a URI where the scheme of the URI reference is not
              supported.</p><p>See: <a href="#err.inline.D0012">Common errors</a></p></dd><dt id="err.D0015"><code class="errqname">err:XD0015</code></dt><dd><p>It is a
dynamic error if a QName is specified and it cannot be
resolved with the in-scope namespace declarations.</p><p>See: <a href="#err.inline.D0015">System Properties</a>, <a href="#err.inline.D0015.1">Step Available</a></p></dd><dt id="err.D0016"><code class="errqname">err:XD0016</code></dt><dd><p>It is a
dynamic error if the select expression on a p:input or
p:with-input returns attribute nodes or function items.</p><p>See: <a href="#err.inline.D0016">p:with-input</a></p></dd><dt id="err.D0017"><code class="errqname">err:XD0017</code></dt><dd><p>It is a dynamic
            error if the running pipeline attempts to invoke an
external step which the processor
          does not know how to perform.</p><p>See: <a href="#err.inline.D0017">Extension Steps</a>, <a href="#err.inline.D0017.1">Declaring external steps</a></p></dd><dt id="err.D0019"><code class="errqname">err:XD0019</code></dt><dd><p>It is a dynamic
error if an option declares a list of acceptable values
and an attempt is made to specify a value that is not a member of that
list.</p><p>See: <a href="#err.inline.D0019">p:option</a></p></dd><dt id="err.D0020"><code class="errqname">err:XD0020</code></dt><dd><p>It is a dynamic error if the combination
      of serialization options specified or defaulted is not allowed.</p><p>See: <a href="#err.inline.D0020">Serialization parameters</a></p></dd><dt id="err.D0021"><code class="errqname">err:XD0021</code></dt><dd><p>It is a dynamic error for a pipeline to
          attempt to access a resource for which it has insufficient privileges or perform a step
          which is forbidden.</p><p>See: <a href="#err.inline.D0021">Security Considerations</a></p></dd><dt id="err.D0022"><code class="errqname">err:XD0022</code></dt><dd><p>It is a dynamic error if a processor that
              does not support PSVI annotations attempts to invoke a step which asserts that they
              are required.</p><p>See: <a href="#err.inline.D0022">PSVIs in XProc</a></p></dd><dt id="err.D0028"><code class="errqname">err:XD0028</code></dt><dd><p>It is a dynamic error if any attribute
              value does not satisfy the type required for that attribute.</p><p>See: <a href="#err.inline.D0028">Common errors</a></p></dd><dt id="err.D0030"><code class="errqname">err:XD0030</code></dt><dd><p>It is a dynamic error if a step is unable
              or incapable of performing its function.</p><p>See: <a href="#err.inline.D0030">Common errors</a></p></dd><dt id="err.D0036"><code class="errqname">err:XD0036</code></dt><dd><p>It is a
            dynamic error if the supplied or defaulted value of a variable or option cannot be converted to
          the required type.</p><p>See: <a href="#err.inline.D0036">Variable and option types</a></p></dd><dt id="err.D0038"><code class="errqname">err:XD0038</code></dt><dd><p>It is a dynamic error
if an input document arrives on a port and it does not match the
allowed content types.</p><p>See: <a href="#err.inline.D0038">Specifying content types</a></p></dd><dt id="err.D0039"><code class="errqname">err:XD0039</code></dt><dd><p>It is a dynamic error
if the encoding attribute is present and
content type value specifies a character set that is not supported by
the implementation.</p><p>See: <a href="#err.inline.D0039">p:inline</a></p></dd><dt id="err.D0040"><code class="errqname">err:XD0040</code></dt><dd><p>It is a dynamic error if
the body is not correctly encoded per the value of the encoding attribute.</p><p>See: <a href="#err.inline.D0040">p:inline</a></p></dd><dt id="err.D0042"><code class="errqname">err:XD0042</code></dt><dd><p>It is a dynamic error
  if a document arrives on an output port whose content type is not accepted
  by the output port specification.</p><p>See: <a href="#err.inline.D0042">p:output</a></p></dd><dt id="err.D0050"><code class="errqname">err:XD0050</code></dt><dd><p>It is a dynamic error if the
XPath expression in a value template can not be evaluated.</p><p>See: <a href="#err.inline.D0050">Value Templates</a></p></dd><dt id="err.D0051"><code class="errqname">err:XD0051</code></dt><dd><p>It is a dynamic error if the XPath
expression in an AVT or TVT evaluates to something to other than a sequence
containing atomic values or nodes.</p><p>See: <a href="#err.inline.D0051">Value Templates</a></p></dd><dt id="err.D0052"><code class="errqname">err:XD0052</code></dt><dd><p>It is a dynamic error if the XPath
expression in a TVT evaluates to an attribute and either the parent is not an
element or the attribute has a preceding node that it not an attribute.</p><p>See: <a href="#err.inline.D0052">Text Value Templates</a></p></dd><dt id="err.D0053"><code class="errqname">err:XD0053</code></dt><dd><p>It is a dynamic error
if a step runs longer than its timeout value.</p><p>See: <a href="#err.inline.D0053">Controlling long running steps</a></p></dd><dt id="err.D0054"><code class="errqname">err:XD0054</code></dt><dd><p>It is a
dynamic error if an encoding is specified
and the content type is an XML media type or
  an HTML media type.</p><p>See: <a href="#err.inline.D0054">p:inline</a></p></dd><dt id="err.D0055"><code class="errqname">err:XD0055</code></dt><dd><p>It is a dynamic error
if the content type value specifies a character set and the encoding attribute is absent.</p><p>See: <a href="#err.inline.D0055">p:inline</a></p></dd><dt id="err.D0056"><code class="errqname">err:XD0056</code></dt><dd><p>It is a dynamic error
if an encoding is specified and the content of the p:inline
contains any XML markup.</p><p>See: <a href="#err.inline.D0056">p:inline</a></p></dd><dt id="err.D0057"><code class="errqname">err:XD0057</code></dt><dd><p>It is a dynamic error if the text content
    does not conform to the JSON grammar.</p><p>See: <a href="#err.inline.D0057">Inline JSON content</a></p></dd><dt id="err.D0061"><code class="errqname">err:XD0061</code></dt><dd><p>It is a dynamic error
          if $key is of type xs:string and cannot be converted into a xs:QName.</p><p>See: <a href="#err.inline.D0061">Document property</a>, <a href="#err.inline.D0061.1">Special rules for casting QNames</a></p></dd><dt id="err.D0062"><code class="errqname">err:XD0062</code></dt><dd><p>It is a dynamic error if
the document-properties map contains a
content-type key and that key has a value that differs
from the statically determined content type.</p><p>See: <a href="#err.inline.D0062">p:inline</a></p></dd><dt id="err.D0063"><code class="errqname">err:XD0063</code></dt><dd><p>It is a dynamic error
if the p:inline contains any XML markup and has a
content type that is not an XML media type or
  an HTML media type.</p><p>See: <a href="#err.inline.D0063">p:inline</a></p></dd><dt id="err.D0064"><code class="errqname">err:XD0064</code></dt><dd><p>It is a dynamic 
error if the base URI is not both absolute and valid according to .</p><p>See: <a href="#err.inline.D0064">p:inline</a>, <a href="#err.inline.D0064.1">p:document</a></p></dd><dt id="err.D0065"><code class="errqname">err:XD0065</code></dt><dd><p>It is a dynamic error
      to refer to the context item, size, or position in a value template 
      if a sequence of documents appears on the default readable port.</p><p>See: <a href="#err.inline.D0065">Value Templates</a>, <a href="#err.inline.D0065.1">p:variable</a>, <a href="#err.inline.D0065.2">p:with-option</a></p></dd><dt id="err.D0068"><code class="errqname">err:XD0068</code></dt><dd><p>It is a dynamic error if the supplied value is not
              an instance of xs:QName, xs:anyAtomicType,  xs:string
              or a type derived from xs:string.</p><p>See: <a href="#err.inline.D0068">Special rules for casting QNames</a></p></dd><dt id="err.D0069"><code class="errqname">err:XD0069</code></dt><dd><p>It is a dynamic error if the string value contains a colon and
              the designated prefix is not declared in the in-scope namespaces.</p><p>See: <a href="#err.inline.D0069">Special rules for casting QNames</a></p></dd><dt id="err.D0070"><code class="errqname">err:XD0070</code></dt><dd><p>It is a dynamic
                  error if a value is assigned to the serialization
                document property that cannot be converted into map(xs:QName, item()*) according
                  to the rules in Implicit Casting.</p><p>See: <a href="#err.inline.D0070">Document Properties</a></p></dd><dt id="err.D0072"><code class="errqname">err:XD0072</code></dt><dd><p>It is a dynamic error
if a document appearing on the input port of p:viewport is neither 
an XML document nor an HTML document.</p><p>See: <a href="#err.inline.D0072">p:viewport</a></p></dd><dt id="err.D0073"><code class="errqname">err:XD0073</code></dt><dd><p>It is a dynamic error if the document 
returned by applying the subpipeline to the matched node is not an XML document, an HTML document, 
or a text document.</p><p>See: <a href="#err.inline.D0073">p:viewport</a></p></dd><dt id="err.D0074"><code class="errqname">err:XD0074</code></dt><dd><p>It
is a dynamic error if no absolute base URI is
supplied to p:urify and none can be inferred from
the current working directory.</p><p>See: <a href="#err.inline.D0074">Analysis</a></p></dd><dt id="err.D0075"><code class="errqname">err:XD0075</code></dt><dd><p>It is a dynamic error if
the relative path has a drive letter and the base URI has a different drive letter
or does not have a drive letter.</p><p>See: <a href="#err.inline.D0075">Analysis</a></p></dd><dt id="err.D0076"><code class="errqname">err:XD0076</code></dt><dd><p>It is a dynamic error if
the relative path has a drive letter and the base URI has an authority or
if the relative path has an authority and the base URI has a drive letter.</p><p>See: <a href="#err.inline.D0076">Analysis</a></p></dd><dt id="err.D0077"><code class="errqname">err:XD0077</code></dt><dd><p>It is a dynamic error if
the relative path has a scheme that differs from the scheme of the base URI.</p><p>See: <a href="#err.inline.D0077">Analysis</a></p></dd><dt id="err.D0079"><code class="errqname">err:XD0079</code></dt><dd><p>It is a dynamic error if a supplied content-type is not 
    a valid media type of the form 
    “type/subtype+ext” 
    or “type/subtype”.</p><p>See: <a href="#err.inline.D0079">Specifying content types</a></p></dd><dt id="err.D0080"><code class="errqname">err:XD0080</code></dt><dd><p>It is a dynamic error if
the basedir has a non-hierarchical scheme.</p><p>See: <a href="#err.inline.D0080">Analysis</a></p></dd></dl></div>
</div></section>

<section id="app.step-errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">F.3. </bdi>Step Errors<a aria-label="§" class="self-link" href="#app.step-errors"/></h2></div><div class="content">


<p>The following <em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>
can be raised by steps in this specification:</p>

<div id="step-error-summary"><h5>Step Errors</h5><dl class="errs"><dt id="err.C0023"><code class="errqname">err:XC0023</code></dt><dd><p>It is a dynamic error if a select
            expression or selection pattern returns a node type that is not allowed by the
              step.</p><p>See: <a href="#err.inline.C0023">Common errors</a></p></dd></dl></div>
</div></section>
</div></article>
<article id="namespace-fixup-guidance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">G. </bdi>Guidance on Namespace Fixup (Non-Normative)<a aria-label="§" class="self-link" href="#namespace-fixup-guidance"/></h2></header><div class="content">


<p>An XProc processor may find it necessary to add missing
namespace declarations to ensure that a document can be serialized.
While this process is implementation defined, the purpose of this
appendix is to provide guidance as to what an implementation might do
to either prevent such situations or fix them as before
serialization.</p>

<p>When a namespace binding is generated, the prefix associated
with the QName of the element or attribute in question should be used.
From an Infoset perspective, this is accomplished by setting the
<code class="code">[prefix]</code> on the element or attribute. Then when an
implementation needs to add a namespace binding, it can reuse that
prefix if possible. If reusing the prefix is not possible, the
implementation must generate a new prefix that is unique to the
in-scope namespace of the element or owner element of the
attribute.</p>

<p>An implementation can avoid namespace fixup by making sure that
the standard step library does not output documents that require
fixup. The following list contains suggestions as to how to accomplish
this within the steps:</p>

<div class="orderedlist">

















<ol style="list-style: decimal;"><li>
<p>Any step that outputs an element in the step vocabulary namespace <code class="uri">http://www.w3.org/ns/xproc-step</code> must ensure that namespace is declared.  An implementation should generate a namespace binding using the prefix “<code class="literal">c</code>”.</p>
</li><li>
<p>When attributes are added by
<code class="tag-element">p:add-attribute</code> or
<code class="tag-element">p:set-attributes</code>, the step must
ensure the namespace of the attributes added are declared. If the
prefix used by the QName is not in the in-scope namespaces of the
element on which the attribute was added, the step must add a
namespace declaration of the prefix to the in-scope namespaces. If the
prefix is amongst the in-scope namespace and is not bound to the same
namespace name, a new prefix and namespace binding must be added. When
a new prefix is generated, the prefix associated with the attribute
should be changed to reflect that generated prefix value.
</p>
</li><li>
<p>When an element is renamed by
<code class="tag-element">p:rename</code>, the step must ensure the namespace
of the element is declared. If the prefix used by the QName is not in
the in-scope namespaces of the element being renamed, the step must
add a namespace declaration of the prefix to the in-scope namespaces.
If the prefix is amongst the in-scope namespace and is not bound to
the same namespace name, a new prefix and namespace binding must be
added. When a new prefix is generated, the prefix associated with the
element should be changed to reflect that generated prefix value.
</p>
<p>If the element does not have a namespace name and there is a
default namespace, the default namespace must be undeclared. For each
of the child elements, the original default namespace declaration must
be preserved by adding a default namespace declaration unless the
child element has a different default namespace.</p>
</li><li>
<p>When an attribute is renamed by
<code class="tag-element">p:rename</code>, the step must ensure the namespace
of the renamed attribute is declared. If the prefix used by the QName
is not in the in-scope namespaces of the element on which the
attribute was added, the step must add a namespace declaration of the
prefix to the in-scope namespaces. If the prefix is amongst the
in-scope namespace and is not bound to the same namespace name, a new
prefix and namespace binding must be added. When a new prefix is
generated, the prefix associated with the attribute should be changed
to reflect that generated prefix value.
</p>
</li><li>
<p>When an element wraps content via <code class="tag-element">p:wrap</code>, there may be in-scope
namespaces coming from ancestor elements of the new wrapper element.  The step must ensure the
namespace of the element is declared properly.  By default, the wrapper element will inherit the
in-scope namespaces of the parent element if one exists.  As such, there may be a existing namespace
declaration or default namespace.</p>
<p>If the prefix used by the QName is not in the in-scope
namespaces of the wrapper element, the step must add a namespace
declaration of the prefix to the in-scope namespaces. If the prefix is
amongst the in-scope namespace and is not bound to the same namespace
name, a new prefix and namespace binding must be added. When a new
prefix is generated, the prefix associated with the wrapper element
should be changed to reflect that generated prefix value.
</p>
<p>If the element does not have a namespace name and there is a default namespace, the default namespace
must be undeclared.  For each of the child elements, the original default namespace declaration must be
preserved by adding a default namespace declaration unless the child element has a different default 
namespace.</p>
</li><li>
<p>When the wrapper element is added for <code class="tag-element">p:wrap-sequence</code> or 
<code class="tag-element">p:pack</code>, the prefix used by the QName must be added to the
 in-scope namespaces.</p>
</li><li>
<p>When a element is removed via <code class="tag-element">p:unwrap</code>, an in-scope namespaces that 
are declared on the element must be copied to any child element except when the child element declares 
the same prefix or declares a new default namespace.</p>
</li><li>
<p>In the output from <code class="tag-element">p:xslt</code>, if an element was generated from the xsl:element or an
 attribute from xsl:attribute, the step must guarantee that an namespace declaration exists for the namespace name 
 used.  Depending on the XSLT implementation, the namespace declaration for the namespace name of the
 element or attribute may not be declared.  It may also be the case that the original prefix is available.  
 If the original prefix is available, the step should attempt to re-use that prefix.  Otherwise, it must 
 generate a prefix for a namespace binding and change the prefix associated the element or attribute.</p>
</li></ol></div>

</div></article>
<article id="handling-imports" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">H. </bdi>Handling Circular and Re-entrant Library Imports (Non-Normative)<a aria-label="§" class="self-link" href="#handling-imports"/></h2></header><div class="content">


<p>When handling imports, an implementation needs to be able to detect the following
      situations, and distinguish them from cases where multiple import chains produce genuinely
      conflicting step definitions:</p>
    <div class="orderedlist">
      
      
    <ol style="list-style: decimal;"><li>
        <p>Circular imports: A imports B, B imports A.</p>
      </li><li>
        <p>Re-entrant imports: A imports B and C, B imports D, C imports D.</p>
      </li></ol></div>
    <p>One way to achieve this is as follows:</p>
    <p><span id="dt-step-type-exports" class="termdef">[Definition: The <em class="glossterm">step type exports</em> of an
        XProc element, against the background of a set of URIs of resources already visited (call
        this set <em>Visited</em>), are defined by cases.]</span></p>
    <p>The <a href="#dt-step-type-exports">step type exports</a> of an XProc element are
      as follows:</p>
    <div class="variablelist">
      
      
      
      
    <dl><dt><span class="term">p:declare-step</span></dt><dd>
          <p>A singleton bag containing the <code class="code">type</code> of the element</p>
        </dd><dt><span class="term">p:library</span></dt><dd>
          <p>The <em class="glossterm"><a href="#dt-bag-merger">bag-merger</a></em> of the <em class="glossterm"><a href="#dt-step-type-exports">step type
              exports</a></em> of all the element’s children</p>
        </dd><dt><span class="term">p:import</span></dt><dd>
          <p>Let <em>RU</em> be the actual resolved URI of the resource identified by
            the <code class="code">href</code> of the element. If <em>RU</em> is a member of
              <em>Visited</em>, then an empty bag, otherwise update
              <em>Visited</em> by adding <em>RU</em> to it, and return the
              <em class="glossterm"><a href="#dt-step-type-exports">step type exports</a></em> of the document element of the retrieved
            representation</p>
        </dd><dt><span class="term">all other elements</span></dt><dd>
          <p>An empty bag</p>
        </dd></dl></div>
    <p>The changes to <em>Visited</em> mandated by the <code class="code">p:import</code> case
      above are persistent, not scoped. That is, not only the recursive processing of the imported
      resource but also subsequent processing of siblings and ancestors must be against the
      background of the updated value. In practice this means either using a side-effected global
      variable, or not only passing <em>Visited</em> as an argument to any recursive or
      iterative processing, but also <em>returning</em> its updated value for subsequent
      use, along with the bag of step types.</p>
    <p>Given a pipeline library document with actual resolved URI <em>DU</em>, <a id="err.inline.S0036.1"/>it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0036"><code class="errqname">err:XS0036</code></a>) if the <em class="glossterm"><a href="#dt-step-type-exports">step type
          exports</a></em> of the document element of the retrieved representation, against the
        background of a singleton set containing <em>DU</em> as the initial
          <em>Visited</em> set, contains any duplicates.</p>
    <p>Given a top-level pipeline document with actual resolved URI <em>DU</em>,
        <a id="err.inline.S0036.2"/>it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0036"><code class="errqname">err:XS0036</code></a>) if the
          <em class="glossterm"><a href="#dt-bag-merger">bag-merger</a></em> of the <em class="glossterm"><a href="#dt-step-type-exports">step type exports</a></em> of the
        document element of the retrieved representation with the <em class="glossterm"><a href="#dt-step-type-exports">step type
          exports</a></em> of its children, against the background of a singleton set containing
          <em>DU</em> as the initial <em>Visited</em> set, contains any
        duplicates.</p>
    <p>Given a non-top-level <code class="code">p:declare-step</code> element,
        <a id="err.inline.S0036.3"/>it is a <em class="glossterm"><a href="#dt-static-error">static error</a></em> (<a href="#err.S0036"><code class="errqname">err:XS0036</code></a>) if the
          <em class="glossterm"><a href="#dt-bag-merger">bag-merger</a></em> of the <em class="glossterm"><a href="#dt-step-type-exports">step type exports</a></em> of its
        parent with the <em class="glossterm"><a href="#dt-step-type-exports">step type exports</a></em> of its children, against the
        background of a copy of the <em>Visited</em> set of its parent as the initial
          <em>Visited</em> set, contains any duplicates.</p>
    <p>The phrase "a copy of the <em>Visited</em> set" in the preceding paragraph is
      meant to indicate that checking of non-top-level
        <code class="code">p:declare-step</code> elements does <em>not</em> have a persistent impact
      on the checking of its parent. The contrast is that whereas changes to
        <em>Visited</em> pass both up <em>and</em> down through
        <code class="code">p:import</code>, they pass only <em>down</em> through
        <em>p:declare-step</em>.</p>
    <p><span id="dt-bag-merger" class="termdef">[Definition: The <em class="glossterm">bag-merger</em> of two or more bags
        (where a bag is an unordered list or, equivalently, something like a set except that it may
        contain duplicates) is a bag constructed by starting with an empty bag and adding each
        member of each of the input bags in turn to it. It follows that the cardinality of the
        result is the sum of the cardinality of all the input bags.]</span></p>
</div></article>
<article id="parallelism" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">I. </bdi>Sequential steps, parallelism, and side-effects<a aria-label="§" class="self-link" href="#parallelism"/></h2></header><div class="content">


<p>XProc imposes as few constraints on the order in which steps
must be evaluated as possible and almost no constraints on parallel
execution.</p>

<p>In the simple, and we believe overwhelmingly common case, inputs
flow into the pipeline, through the pipeline from one step to the
next, and results are produced at the end. The order of the steps is
constrained by the input/output connections between them.
Implementations are free to execute them in a purely sequential
fashion or in parallel, as they see fit. The results are the same in
either case.</p>

<p>This is not true for pipelines which rely on side effects, such
as the state of the filesystem or the state of the web. Consider
the following pipeline:</p>

<pre class="programlisting language-none"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                version="3.0"&gt;
&lt;p:input port="source"/&gt;
&lt;p:output port="result"/&gt;

  &lt;p:xslt name="generate-stylesheet"&gt;
    &lt;p:with-input port="source" href="someURI"/&gt;
    &lt;p:with-input port="stylesheet" href="someOtherURI"/&gt;
  &lt;/p:xslt&gt;

  &lt;p:store name="save-xslt" href="gen-style.xsl"/&gt;

  &lt;p:xslt name="style"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="main" port="source"/&gt;
    &lt;/p:with-input&gt;
    &lt;p:with-input port="stylesheet" href="gen-style.xsl"/&gt;
  &lt;/p:xslt&gt;
&lt;/p:declare-step&gt;</code></pre>

<p>There’s no guarantee that “style” step will execute after the
“save-xslt” step. In this case, the solution is straightforward. Even
if you need the saved stylesheet, you don't need to rely on it in your
pipeline:</p>

<pre class="programlisting language-none"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                name="main" version="3.0"&gt;
&lt;p:input port="source"/&gt;
&lt;p:output port="result"/&gt;

  &lt;p:xslt name="generate-stylesheet"&gt;
    &lt;p:with-input port="source" href="someURI"/&gt;
    &lt;p:with-input port="stylesheet" href="someOtherURI"/&gt;
  &lt;/p:xslt&gt;

  &lt;p:store name="save-xslt" href="gen-style.xsl"/&gt;

  &lt;p:xslt name="style"&gt;
    &lt;p:with-input port="source"&gt;
      &lt;p:pipe step="main" port="source"/&gt;
    &lt;/p:with-input&gt;
    &lt;p:with-input port="stylesheet"&gt;
      &lt;p:pipe step="generate-stylesheet" port="result"/&gt;
    &lt;/p:with-input&gt;
  &lt;/p:xslt&gt;
&lt;/p:declare-step&gt;</code></pre>

<p>Now the result is independent of the implementation strategy.</p>

<p>Implementations are free to invent additional control structures
using <a href="#p.pipeinfo"><code class="tag-element">p:pipeinfo</code></a> and
<a href="#extension-attributes">extension attributes</a> to provide
greater control over parallelism in their implementations.</p>

</div></article>
<article id="xproc-media-type" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">J. </bdi>The <code class="code">application/xproc+xml</code> media type<a aria-label="§" class="self-link" href="#xproc-media-type"/></h2></header><div class="content">


<p>This appendix registers a new MIME media type,
“<span class="quote"><code class="code">application/xproc+xml</code></span>”.</p>

<section id="media-type-registration" class="section"><div class="section-titlepage"><h2><bdi class="secno">J.1. </bdi>Registration of MIME media type application/xproc+xml<a aria-label="§" class="self-link" href="#media-type-registration"/></h2></div><div class="content">


<div class="variablelist">

























<dl><dt><span class="term">MIME media type name:</span></dt><dd>
<p><code class="code">application</code>
</p>
</dd><dt><span class="term">MIME subtype name:</span></dt><dd>
<p><code class="code">xproc+xml</code>
</p>
</dd><dt><span class="term">Required parameters:</span></dt><dd>
<p>None.
</p>
</dd><dt><span class="term">Optional parameters:</span></dt><dd>
  <div class="variablelist">
  
  <dl><dt><span class="term"><code class="code">charset</code></span></dt><dd>

  <p>This parameter has identical semantics to the <code class="code">charset</code>
parameter of the <code class="code">application/xml</code> media type as
specified in [<a href="#rfc3023"><span class="abbrev">RFC 3023</span></a>] or its successors.
</p>
  </dd></dl></div>
</dd><dt><span class="term">Encoding considerations:</span></dt><dd>
<p>By virtue of XProc content being XML, it has the same
considerations when sent as “<span class="quote"><code class="code">application/xproc+xml</code></span>”
as does XML. See [<a href="#rfc3023"><span class="abbrev">RFC 3023</span></a>], Section 3.2.
</p>
</dd><dt><span class="term">Security considerations:</span></dt><dd>
<p>Several XProc elements may refer to arbitrary URIs.
In this case, the security issues of [<a href="#rfc2396"><span class="abbrev">RFC 2396</span></a>], section 7,
should be considered.</p>

<p>In addition, because of the extensibility features of XProc, it
is possible that “application/xproc+xml” may describe content that has
security implications beyond those described here. However, only in
the case where the processor recognizes and processes the additional
content, or where further processing of that content is dispatched to
other processors, would security issues potentially arise. And in that
case, they would fall outside the domain of this registration
document.</p>
</dd><dt><span class="term">Interoperability considerations:</span></dt><dd>
<p>This specification describes processing semantics that dictate
behavior that must be followed when dealing with, among other things,
unrecognized elements.</p>

<p>Because XProc is extensible, conformant "application/xproc+xml"
processors can expect that content received is well-formed XML, but it
cannot be guaranteed that the content is valid XProc or that the
processor will recognize all of the elements and attributes in the
document.</p>
</dd><dt><span class="term">Published specification:</span></dt><dd>
<p>This media type registration is for XProc documents as described by
this specification which is located at
<a href="http://www.w3.org/TR/xproc/">http://www.w3.org/TR/xproc/</a>.</p>
</dd><dt><span class="term">Applications which use this media type:</span></dt><dd>
<p>There is no experimental, vendor specific, or personal tree
predecessor to “<span class="quote"><code class="code">application/xproc+xml</code></span>”,
reflecting the fact that no applications currently recognize it. This
new type is being registered in order to allow for the
deployment of XProc on the World Wide Web, as a first class XML
application.
</p>
</dd><dt><span class="term">Additional information:</span></dt><dd>
  <div class="variablelist">
  

  

  
  <dl><dt><span class="term">Magic number(s):</span></dt><dd>
  <p>There is no single initial octet sequence that is always present in
XProc documents.
  </p>
  </dd><dt><span class="term">File extension(s):</span></dt><dd>
  <p>XProc documents are most often identified with the extension
“<span class="quote"><code class="filename">.xpl</code></span>”.
  </p>
  </dd><dt><span class="term">Macintosh File Type Code(s):</span></dt><dd>
  <p>TEXT</p>
  </dd></dl></div>
</dd><dt><span class="term">Person &amp; email address to contact for further information:</span></dt><dd>
<p>Norman Walsh, <code class="email">&lt;<a href="mailto:Norman.Walsh@MarkLogic.com">Norman.Walsh@MarkLogic.com</a>&gt;</code>.</p>
</dd><dt><span class="term">Intended usage:</span></dt><dd>
<p>COMMON</p>
</dd><dt><span class="term">Author/Change controller:</span></dt><dd>
<p>The XProc specification is a work product of the World Wide Web
Consortium’s XML Processing Model Working Group. The W3C has change control
over these specifications.</p>
</dd></dl></div>
</div></section>

<section id="fragid" class="section"><div class="section-titlepage"><h2><bdi class="secno">J.2. </bdi>Fragment Identifiers<a aria-label="§" class="self-link" href="#fragid"/></h2></div><div class="content">


<p>For documents labeled as
“<span class="quote"><code class="code">application/xproc+xml</code></span>”,
the fragment
identifier notation is exactly that for
“<span class="quote"><code class="code">application/xml</code></span>”,
as specified in [<a href="#rfc3023"><span class="abbrev">RFC 3023</span></a>] or its successors.</p>
</div></section>
</div></article>
<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">K. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">







<dl><dt><span class="term"><a href="xproc30.rnc">xproc30.rnc</a>, <a href="xproc30.rng">xproc30.rng</a></span></dt><dd>
<p>A RELAX NG Schema for XProc 3.0 pipelines, in compact or XML form.
</p>
</dd><dt><span class="term"><a href="xproc10.rnc">xproc10.rnc</a>, <a href="xproc10.rng">xproc10.rng</a></span></dt><dd>
<p>A RELAX NG Schema for XProc 1.0 pipelines, in compact or XML form.
</p>
</dd><dt><span class="term"><a href="xproc.rnc">xproc.rnc</a>, <a href="xproc.rng">xproc.rng</a></span></dt><dd>
<p>A RELAX NG Schema for XProc pipelines, in compact or XML form.
It will validate either XProc 1.0 pipelines or XProc 3.0 pipelines,
depending on the value of the version attribute.
</p>
<p>In order to use this schema, you must also download the 1.0 and 3.0
schemas; they are included into this one.</p>
</dd><dt><span class="term"><a href="library.xpl">library.xpl</a></span></dt><dd>
<p>An XProc pipeline library that declares all of the standard built-in steps.
</p>
</dd></dl></div>

</div></article>
<article id="credits" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">L. </bdi>Credits<a aria-label="§" class="self-link" href="#credits"/></h2></header><div class="content">


<p>This document is derived from
<a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</a> published by the W3C. It was developed
by the <em class="citetitle">XML Processing Model Working Group</em> and edited by
Norman Walsh, Alex Miłowski, and Henry Thompson.</p>

<p>The editors of this specification extend their gratitude to everyone
who contributed to this document and all of the versions that came before it.</p>
</div></article>

<article id="changelog" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">M. </bdi>Change Log<a aria-label="§" class="self-link" href="#changelog"/></h2></header><div class="content">


  <p>This list contains the non-editorial changes made after the
    August 2020
    “<a href="https://spec.xproc.org/lastcall-2020-08/head/xproc/">last call</a>”
    draft:</p>
  
  <div class="itemizedlist">
    
    
    
    
    
    
    
    
  <ul><li>
      <p>The <code class="tag-attribute">depends</code> attribute is forbidden on
      <a href="#p.when"><code class="tag-element">p:when</code></a>, <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a>, <a href="#p.catch"><code class="tag-element">p:catch</code></a>, and
      <a href="#p.finally"><code class="tag-element">p:finally</code></a>.</p>
    </li><li>
      <p>Processors may remove any implicit connections that they can determine
      statically will never be used (issue
      <a href="https://github.com/xproc/3.0-specification/issues/995">995</a>).
      </p>
    </li><li>
      <p>Expanded and clarified the rules for implicit casting (issues
      <a href="https://github.com/xproc/3.0-specification/issues/1001">1001</a>
      and
      <a href="https://github.com/xproc/3.0-specification/issues/1012">1012</a>).
      </p>
    </li><li>
      <p>The semantics of the <a href="#f.urify"><code class="function">p:urify</code></a> function were extensively
      redrafted and clarified.</p>
    </li><li>
      <p>Text value templates are never expanded in the descendants of <a href="#p.inline"><code class="tag-element">p:inline</code></a> 
      elements that specify an <code class="tag-attribute">encoding</code>.</p>
    </li><li>
      <p>Clarified the semantics of <code class="tag-attribute">[p:]use-when</code>
      to address potential deadlock situations that can arise if
      two or more expressions depend on each other.</p>
    </li><li>
      <p>Clarified that <a href="#f.step-available"><code class="function">p:step-available</code></a> cannot refer
      to the step currently being declared (issue
      <a href="https://github.com/xproc/3.0-specification/issues/1057">1057</a>).
      </p>
    </li><li>
      <p>A number of error codes have been clarified and new error codes have been added.</p>
    </li></ul></div>

  <p>This list contains the non-editorial changes made after the
    December 2019
    “<a href="https://spec.xproc.org/lastcall-2019-12/head/xproc/">last call</a>”
    draft:</p>
  
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>The <code class="code">visibility</code> attribute of <a href="#p.variable"><code class="tag-element">p:variable</code></a> was removed.</p>
    </li><li>
        <p>The description of the <code class="code">select</code> attribute of <a href="#p.option"><code class="tag-element">p:option</code></a> no longer
          mentions static variables.</p>
    </li><li>
      <p>Error XD0079 added for defective content-types. (Was XS0070 or XS00130).</p>
    </li></ul></div>
  
<p>This list contains the non-editorial changes made after the
February 2019
“<a href="http://spec.xproc.org/lastcall-2019-02/head/xproc/">last call</a>”
draft:</p>

    <div class="itemizedlist">
      
      
      
      
      
      
      
      

      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    <ul><li>
        <p>The <code class="code">p:document-properties-document()</code> function was removed</p>
      </li><li>
        <p>The semantics of <a href="#p.if"><code class="tag-element">p:if</code></a> have been changed. If the test expression is false, <a href="#p.if"><code class="tag-element">p:if</code></a>
          behaves roughly like an identity step. Previously it produced no outputs.</p>
      </li><li>
        <p>It is no longer a static error (XS0093), if <a href="#p.option"><code class="tag-element">p:option</code></a> or <a href="#p.variable"><code class="tag-element">p:variable</code></a> have an attribute
            <code class="literal">visibility</code> and are not children of a <a href="#p.library"><code class="tag-element">p:library</code></a>.</p>
      </li><li>
        <p>The semantics of <a href="#p.choose"><code class="tag-element">p:choose</code></a> have been changed. The default sub-pipeline for a missing
            <a href="#p.otherwise"><code class="tag-element">p:otherwise</code></a> is a <code class="tag-element">p:identity</code> step (with the additional feature that it isn’t an error
          if there’s no default readable port). A primary output port on the <a href="#p.when"><code class="tag-element">p:when</code></a> branches for this is
          required.</p>
      </li><li>
        <p>The way the context item for XPath expressions is provided has been changed. It is now provided if and only 
        if the connection delivers exactly one document, otherwise the context item is undefined. A new error (XD0001) is
        introduced. It is raised if an XPath expression makes use of the context item, but the context item is undefined.
        Two dynamic errors (XD0005 and XD0008) were removed.</p>
      </li><li>
        <p>Content type shortcuts and the notion of forbidden content types have been added.
        See <a href="#specified-content-types" title="Specifying content types">Section 3.4, “Specifying content types”</a>.
        </p>
      </li><li>
        <p>Introduction of the <code class="code">serialization</code> document property. See <a href="#document-properties" title="Document Properties">Section 3.1, “Document Properties”</a>.</p>
      </li><li>
        <p>The semantics pf <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> have been changed. HTML documents are now allowed as input and
        <code class="option">match</code> may now match every node type except attributes and namespace nodes.</p>
      </li><li>
        <p>Static <a href="#p.variable"><code class="tag-element">p:variable</code></a>s have been removed; the
        semantics of static <a href="#p.option"><code class="tag-element">p:option</code></a>s have been updated and
        clarified.</p>
      </li><li>
        <p>Clarified that the <code class="literal">base-uri</code> property
        must always be a legal URI per [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
      </li><li>
        <p>Expanded the range of media types that may be considered
        “text” documents; opened the possibility for implementations
        to extend the list.</p>
      </li><li>
        <p>Clarified that leading and trailing whitespace within a
        <a href="#p.inline"><code class="tag-element">p:inline</code></a> is not discarded.</p>
      </li><li>
        <p>Identified the <code class="port">error</code> port as the primary input port in <a href="#p.catch"><code class="tag-element">p:catch</code></a>.</p>
      </li><li>
        <p>Clarified that <a href="#p.finally"><code class="tag-element">p:finally</code></a> <span class="rfc2119" id="changelog.7.14.1.2">must not</span> declare a primary output port.</p>
      </li><li>
        <p>Clarified which functions are available during static analysis.</p>
      </li><li>
        <p>Clarified that atomic values are considered JSON documents.</p>
      </li><li>
        <p>Made <code class="tag-attribute">href</code> required on <code class="tag-element">c:entry</code>.</p>
      </li><li>
        <p>Clarified how sequences of XDM values (for
        example, from a <code class="tag-element">p:xslt</code> step) are converted into
        documents.</p>
      </li><li>
        <p>Updated the description of the <code class="tag-attribute">select</code> attribute for <a href="#p.input"><code class="tag-element">p:input</code></a>
        so that it is in line with the more recent changes that have been applied to <a href="#p.with-input"><code class="tag-element">p:with-input</code></a>.</p>
      </li><li>
        <p>Changed description of <a href="#p.viewport"><code class="tag-element">p:viewport</code></a> stating that the base URI of every matched node is the
        document's base URI, not just for document and element nodes.</p>
      </li><li>
        <p>Changed the default value for serialization property <code class="literal">omit-xml-declaration</code>
          from <code class="literal">true</code> to <code class="literal">false</code> in section “Serialization method” . Removed
          remark about default settings for this parameter from section “Minimal conformance”.</p>
      </li><li>
        <p>Clarified the conditions under which steps may produce PSVI annotations.</p>
      </li><li>
        <p>Added a <code class="tag-attribute">cause</code> attribute to the error vocabulary 
         for recording the error codes of underlying errors.</p>
      </li></ul></div>
</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/steps.html"><head><title>XProc 3.0+: Standard Step Library</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the standard step vocabulary of&#xA;  XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0+: Standard Step Library</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:30:27Z">17:30 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/steps/">https://spec.xproc.org/master/head/steps/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="lcdiff.html">Diff against the 3.0 specification</a></dd><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020, 2021, 2022</span> the Contributors to the <cite>XProc 3.0+: Standard Step Library</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
  <p>This specification describes the standard step vocabulary of
  <em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
 
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>

<div class="note editorial admonition"><h3>Note</h3><div class="admonition-body">
<p>This draft is the “editor’s working draft” and includes changes made
after the XProc 3.0 standard step specification was released.
</p>
</div></div>

<p>This document is derived from
<a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</a> published by the W3C.</p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#req-steps"><bdi class="secno">2. </bdi>The required steps</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#c.add-attribute"><bdi class="secno">2.1. </bdi>p:add-attribute</a></li><li class="tocline"><a class="tocxref" href="#c.add-xml-base"><bdi class="secno">2.2. </bdi>p:add-xml-base</a></li><li class="tocline"><a class="tocxref" href="#c.archive"><bdi class="secno">2.3. </bdi>p:archive</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#cv.archive-manifest"><bdi class="secno">2.3.1. </bdi>The archive manifest</a></li><li class="tocline"><a class="tocxref" href="#cv.archive-zips"><bdi class="secno">2.3.2. </bdi>Handling of ZIP archives</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.archive-manifest"><bdi class="secno">2.4. </bdi>p:archive-manifest</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#override-content-type"><bdi class="secno">2.4.1. </bdi>Overriding content types</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.cast-content-type"><bdi class="secno">2.5. </bdi>p:cast-content-type</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#casting-from-xml"><bdi class="secno">2.5.1. </bdi>Casting from an XML media type</a></li><li class="tocline"><a class="tocxref" href="#casting-from-html"><bdi class="secno">2.5.2. </bdi>Casting from an HTML media type</a></li><li class="tocline"><a class="tocxref" href="#casting-from-json"><bdi class="secno">2.5.3. </bdi>Casting from a JSON media type</a></li><li class="tocline"><a class="tocxref" href="#casting-from-text"><bdi class="secno">2.5.4. </bdi>Casting from a text media type</a></li><li class="tocline"><a class="tocxref" href="#casting-from-other"><bdi class="secno">2.5.5. </bdi>Casting from any other media type</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.compare"><bdi class="secno">2.6. </bdi>p:compare</a></li><li class="tocline"><a class="tocxref" href="#c.compress"><bdi class="secno">2.7. </bdi>p:compress</a></li><li class="tocline"><a class="tocxref" href="#c.count"><bdi class="secno">2.8. </bdi>p:count</a></li><li class="tocline"><a class="tocxref" href="#c.delete"><bdi class="secno">2.9. </bdi>p:delete</a></li><li class="tocline"><a class="tocxref" href="#c.error"><bdi class="secno">2.10. </bdi>p:error</a></li><li class="tocline"><a class="tocxref" href="#c.filter"><bdi class="secno">2.11. </bdi>p:filter</a></li><li class="tocline"><a class="tocxref" href="#c.hash"><bdi class="secno">2.12. </bdi>p:hash</a></li><li class="tocline"><a class="tocxref" href="#c.http-request"><bdi class="secno">2.13. </bdi>p:http-request</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#c.http-multipart-request"><bdi class="secno">2.13.1. </bdi>Construction of a multipart request</a></li><li class="tocline"><a class="tocxref" href="#c.http-multipart-response"><bdi class="secno">2.13.2. </bdi>Managing a multipart response</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.identity"><bdi class="secno">2.14. </bdi>p:identity</a></li><li class="tocline"><a class="tocxref" href="#c.insert"><bdi class="secno">2.15. </bdi>p:insert</a></li><li class="tocline"><a class="tocxref" href="#c.json-join"><bdi class="secno">2.16. </bdi>p:json-join</a></li><li class="tocline"><a class="tocxref" href="#c.json-merge"><bdi class="secno">2.17. </bdi>p:json-merge</a></li><li class="tocline"><a class="tocxref" href="#c.label-elements"><bdi class="secno">2.18. </bdi>p:label-elements</a></li><li class="tocline"><a class="tocxref" href="#c.load"><bdi class="secno">2.19. </bdi>p:load</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#c.load.xml"><bdi class="secno">2.19.1. </bdi>Loading XML data</a></li><li class="tocline"><a class="tocxref" href="#c.load.text"><bdi class="secno">2.19.2. </bdi>Loading text data</a></li><li class="tocline"><a class="tocxref" href="#c.load.json"><bdi class="secno">2.19.3. </bdi>Loading JSON data</a></li><li class="tocline"><a class="tocxref" href="#c.load.html"><bdi class="secno">2.19.4. </bdi>Loading HTML data</a></li><li class="tocline"><a class="tocxref" href="#c.load.binary"><bdi class="secno">2.19.5. </bdi>Loading binary data</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.make-absolute-uris"><bdi class="secno">2.20. </bdi>p:make-absolute-uris</a></li><li class="tocline"><a class="tocxref" href="#c.namespace-delete"><bdi class="secno">2.21. </bdi>p:namespace-delete</a></li><li class="tocline"><a class="tocxref" href="#c.namespace-rename"><bdi class="secno">2.22. </bdi>p:namespace-rename</a></li><li class="tocline"><a class="tocxref" href="#c.pack"><bdi class="secno">2.23. </bdi>p:pack</a></li><li class="tocline"><a class="tocxref" href="#c.rename"><bdi class="secno">2.24. </bdi>p:rename</a></li><li class="tocline"><a class="tocxref" href="#c.replace"><bdi class="secno">2.25. </bdi>p:replace</a></li><li class="tocline"><a class="tocxref" href="#c.set-attributes"><bdi class="secno">2.26. </bdi>p:set-attributes</a></li><li class="tocline"><a class="tocxref" href="#c.set-properties"><bdi class="secno">2.27. </bdi>p:set-properties</a></li><li class="tocline"><a class="tocxref" href="#c.sink"><bdi class="secno">2.28. </bdi>p:sink</a></li><li class="tocline"><a class="tocxref" href="#c.split-sequence"><bdi class="secno">2.29. </bdi>p:split-sequence</a></li><li class="tocline"><a class="tocxref" href="#c.store"><bdi class="secno">2.30. </bdi>p:store</a></li><li class="tocline"><a class="tocxref" href="#c.string-replace"><bdi class="secno">2.31. </bdi>p:string-replace</a></li><li class="tocline"><a class="tocxref" href="#c.text-count"><bdi class="secno">2.32. </bdi>p:text-count</a></li><li class="tocline"><a class="tocxref" href="#c.text-head"><bdi class="secno">2.33. </bdi>p:text-head</a></li><li class="tocline"><a class="tocxref" href="#c.text-join"><bdi class="secno">2.34. </bdi>p:text-join</a></li><li class="tocline"><a class="tocxref" href="#c.text-replace"><bdi class="secno">2.35. </bdi>p:text-replace</a></li><li class="tocline"><a class="tocxref" href="#c.text-sort"><bdi class="secno">2.36. </bdi>p:text-sort</a></li><li class="tocline"><a class="tocxref" href="#c.text-tail"><bdi class="secno">2.37. </bdi>p:text-tail</a></li><li class="tocline"><a class="tocxref" href="#c.unarchive"><bdi class="secno">2.38. </bdi>p:unarchive</a></li><li class="tocline"><a class="tocxref" href="#c.uncompress"><bdi class="secno">2.39. </bdi>p:uncompress</a></li><li class="tocline"><a class="tocxref" href="#c.unwrap"><bdi class="secno">2.40. </bdi>p:unwrap</a></li><li class="tocline"><a class="tocxref" href="#c.uuid"><bdi class="secno">2.41. </bdi>p:uuid</a></li><li class="tocline"><a class="tocxref" href="#c.wrap-sequence"><bdi class="secno">2.42. </bdi>p:wrap-sequence</a></li><li class="tocline"><a class="tocxref" href="#c.wrap"><bdi class="secno">2.43. </bdi>p:wrap</a></li><li class="tocline"><a class="tocxref" href="#c.www-form-urldecode"><bdi class="secno">2.44. </bdi>p:www-form-urldecode</a></li><li class="tocline"><a class="tocxref" href="#c.www-form-urlencode"><bdi class="secno">2.45. </bdi>p:www-form-urlencode</a></li><li class="tocline"><a class="tocxref" href="#c.xinclude"><bdi class="secno">2.46. </bdi>p:xinclude</a></li><li class="tocline"><a class="tocxref" href="#c.xquery"><bdi class="secno">2.47. </bdi>p:xquery</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#example-xquery"><bdi class="secno">2.47.1. </bdi>Example</a></li><li class="tocline"><a class="tocxref" href="#c.xquery.17"><bdi class="secno">2.47.2. </bdi>Document properties</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.xslt"><bdi class="secno">2.48. </bdi>p:xslt</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#c.xslt.11"><bdi class="secno">2.48.1. </bdi>Invoking an XSLT 3.0 stylesheet</a></li><li class="tocline"><a class="tocxref" href="#c.xslt.12"><bdi class="secno">2.48.2. </bdi>Invoking an XSLT 2.0 stylesheet</a></li><li class="tocline"><a class="tocxref" href="#c.xslt.13"><bdi class="secno">2.48.3. </bdi>Invoking an XSLT 1.0 stylesheet</a></li></ul></li></ul></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">3. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#normative-references"><bdi class="secno">B.1. </bdi>Normative References</a></li></ul></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li><li class="tocline"><a class="tocxref" href="#credits"><bdi class="secno">E. </bdi>Credits</a></li><li class="tocline"><a class="tocxref" href="#changelog"><bdi class="secno">F. </bdi>Change Log</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">
  

<p>This specification describes the standard, required atomic XProc
steps. A machine-readable description of these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Many atomic steps are available for [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]. They are described in several specifications.
This specification describes the general background common to all
steps. A conformant processor <span class="rfc2119" id="introduction.3.2">must</span> implement all of
the steps in this specification. Additional steps may also be
implemented.
</p>

<p>The types given for options should be understood as follows:</p>
<div class="itemizedlist">
  
  
  
  
  
  
<ul><li>
    <p>Types in the XML Schema namespace, identified as QNames with the
    <code class="code">xs:</code> prefix, as per the XML Schema specification with one
    exception. Anywhere an <code class="code">xs:QName</code> is specified,
    an
    <a href="https://www.w3.org/TR/xquery-30/#doc-xquery30-EQName">EQName</a>
    is allowed.</p>
  </li><li>
    <p><code class="type">XPathExpression</code>:
    As a string per [<a href="#xmlschema-2"><span class="abbrev">W3C XML Schema: Part 2</span></a>], including
    whitespace normalization, and the further requirement to be a
    conformant Expression per [<a href="#xpath31"><span class="abbrev">XPath 3.1</span></a>].
    </p>
  </li><li id="dt-selection-pattern">
    <p><code class="type">XSLTSelectionPattern</code>:
    As a string per [<a href="#xslt30"><span class="abbrev">XSLT 3.0</span></a>] conforming to an XSLT
    <em>selection pattern</em>.</p>
  </li><li>
    <p><code class="type">XPathSequenceType</code>: An XPath
    <a href="https://www.w3.org/TR/xpath-31/#id-types">sequence type</a>.
    </p>
  </li><li>
    <p><code class="type">ContentType</code>: A media type as defined in
    [<a href="#rfc2046"><span class="abbrev">RFC 2046</span></a>].
    </p>
  </li><li>
    <p><code class="type">ContentTypes</code>:
    As a whitespace separated list of media types as defined in
    [<a href="#rfc2046"><span class="abbrev">RFC 2046</span></a>].
    </p>
  </li></ul></div>

<p>Option values are often expressed using the shortcut syntax. In
these cases, the option shortcuts are generally treated as value
templates. However, for options of type <code class="code">map()</code> or
<code class="code">array()</code>, an expression is <em>required</em>
(there is no non-expression string which can ever be a legal value for
a map or array). Given that every value entered this way will have to
be a value template, and consequently every curly brace contained
within the expression will have to be escaped, values of type map or
array are defined to be expressions directly.</p>

<p>Some aspects of documents are generally unchanged by steps:</p>

<div class="itemizedlist">


<ul><li>
<p>When a step in this library produces an output document,
the base URI of the output is the base URI of the step's primary
input document unless the step's process explicitly sets an
<code class="tag-attribute">xml:base</code> attribute or the step's
description explicitly states how the base URI is constructed.</p>
</li><li>
<p>Steps are responsible for describing how document properties are
transformed as documents flow through them. Many steps claim that the
specified properties are preserved. Generally, it is the
responsibility of the pipeline author to determine when this is
inapropriate and take corrective action. However, it is the
responsibility of the pipeline processor to assure that the
<code class="code">content-type</code> property is correct. If a step transforms a
document in a manner that is inconsistent with the
<code class="code">content-type</code> property (accepting an XML document on the
source port but producing a text document on the result, for example), the
processor must assure that the <code class="code">content-type</code> property is appropriate.
If a step changes the <code class="code">content-type</code> in this way, it <span class="rfc2119" id="introduction.8.2.1.5">must</span> also
remove the <code class="code">serialization</code> property
</p>
</li></ul></div>

<p id="cv.result">Also, in this specification, several steps use this
element for result information:</p>

<p id="d306e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:result&gt;<br/>    <var>string</var><br/>&lt;/c:result&gt;</code></p>

<p>When a step uses an XPath to compute an option value, the XPath
context is as defined in [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>].</p>

<p>When a step specifies a particular version of a technology,
implementations <span class="rfc2119" id="introduction.12.1">must</span> implement that
version or a subsequent version that is backwards compatible with that
version. At user-option, they may implement other non-backwards
compatible versions.</p>
  
<p>In this specification the words <span class="rfc2119" id="introduction.13.1">must</span>, <span class="rfc2119" id="introduction.13.2">must not</span>,
        <span class="rfc2119" id="introduction.13.3">should</span>, <span class="rfc2119" id="introduction.13.4">should not</span>, <span class="rfc2119" id="introduction.13.5">may</span> and
        <span class="rfc2119" id="introduction.13.6">recommended</span> are to be interpreted as described in [<a href="#rfc2119"><span class="abbrev">RFC 2119</span></a>].</p>

<p>As described in <cite><a href="../xproc/#psvi-support">PSVIs in XProc</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>,
steps may not produce PSVI output unless that behavior is explicitly
described. In this specification, the steps that may produce PSVI
output are the “identity” steps: <a href="#c.identity"><code class="tag-element">p:identity</code></a>,
<a href="#c.store"><code class="tag-element">p:store</code></a>, and <a href="#c.split-sequence"><code class="tag-element">p:split-sequence</code></a> (which <span class="rfc2119" id="introduction.14.5">must</span> preserve 
PSVI properties that appear on their inputs). In addition, the
<a href="#c.xslt"><code class="tag-element">p:xslt</code></a> and <a href="#c.xquery"><code class="tag-element">p:xquery</code></a> steps <span class="rfc2119" id="introduction.14.8">may</span> return documents with
PSVI annotations.</p>

</div></section>

<section id="req-steps" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>The required steps<a aria-label="§" class="self-link" href="#req-steps"/></h2></div><div class="content">


<p>A conformant processor must support all of these steps.</p>

<section id="c.add-attribute" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.1. </bdi>p:add-attribute<a aria-label="§" class="self-link" href="#c.add-attribute"/></h3></div><div class="content">


<p>The <code class="code">p:add-attribute</code> step adds a single attribute to
a set of matching elements. The input document specified on the
  <code class="code">source</code> is processed for matches specified by the 
    <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> in the <code class="option">match</code> option. For each of these
matches, the attribute whose name is specified by the
<code class="option">attribute-name</code> option is set to the attribute value
specified by the <code class="option">attribute-value</code> option.
</p>

<p>The resulting document is produced on the <code class="code">result</code>
output port and consists of a exact copy of the input with the
exception of the matched elements. Each of the matched elements is
copied to the output with the addition of the specified attribute
with the specified value.
</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:add-attribute</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">attribute-name</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">attribute-value</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option
<span class="rfc2119" id="c.add-attribute.5.2">must</span> be an XSLTSelectionPattern. <a id="err.inline.C0023"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> matches a node
which is not an element.</p>

<p>The value of the <code class="option">attribute-value</code> option
<span class="rfc2119" id="c.add-attribute.6.2">must</span> be a legal attribute value according to XML.</p>

<p>If an attribute with the same name as the expanded name
from the <code class="option">attribute-name</code> option exists on the matched
element, the value specified in
the <code class="option">attribute-value</code> option is used to set the
value of that existing attribute.  That is, the value of the
existing attribute is changed to the <code class="option">attribute-value</code>
value. </p>

<div id="note-multattr" class="note admonition"><h3>Note</h3><div class="admonition-body"><p>If multiple attributes need to be set on the same
element(s), the <a href="#c.set-attributes"><code class="tag-element">p:set-attributes</code></a> step can be used to set them
all at once.</p>
</div></div>

<p>This step cannot be used to add namespace declarations. <a id="err.inline.C0059"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0059"><code class="errqname">err:XC0059</code></a>) if the QName
value in the <code class="option">attribute-name</code> option uses the prefix
“<code class="literal">xmlns</code>”
or any other prefix that resolves to the namespace name
<code class="uri">http://www.w3.org/2000/xmlns/</code>.
 Note, however, that while namespace declarations cannot be
added explicitly by this step, adding an attribute whose name is in a
namespace for which there is no namespace declaration in scope on the
matched element may result in a namespace binding being added by
namespace fixup.</p>

<p>If an attribute named
<code class="tag-attribute">xml:base</code> is added or changed, the base URI
of the element <span class="rfc2119" id="c.add-attribute.10.2">must</span> also be amended accordingly.</p>

<section id="c.add-attribute.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.add-xml-base" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.2. </bdi>p:add-xml-base<a aria-label="§" class="self-link" href="#c.add-xml-base"/></h3></div><div class="content">



<p>The <code class="code">p:add-xml-base</code> step exposes the base URI via
explicit <code class="code">xml:base</code> attributes. The input document from the
<code class="port">source</code> port is replicated to the <code class="port">result</code> port
with <code class="code">xml:base</code> attributes added to or corrected on each element as specified
by the options on this step.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:add-xml-base</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">all</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code>       </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">relative</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code>   </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

 <p>The value of the <code class="option">all</code> option
<span class="rfc2119" id="c.add-xml-base.4.2">must</span> be a boolean.</p>

 <p>The value of the <code class="option">relative</code> option
<span class="rfc2119" id="c.add-xml-base.5.2">must</span> be a boolean.</p>

<p><a id="err.inline.C0058"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0058"><code class="errqname">err:XC0058</code></a>)
if the <code class="option">all</code> and <code class="option">relative</code> options are
<em>both</em> <code class="literal">true</code>.</p>

<p>The <code class="tag-element">p:add-xml-base</code> step modifies its input as follows:</p>

<div class="itemizedlist">


<ul><li>
<p>For every element that is a child of the document node: force the element to have an <code class="tag-attribute">xml:base</code>
attribute with the document's [base URI] property's value as its value.</p>
</li><li>
<p>For other elements:</p>
<div class="itemizedlist">



<ul><li>
<p>If the <code class="option">all</code> option has the value
<code class="literal">true</code>, force the element to have an <code class="tag-attribute">xml:base</code> attribute with the element's [base
URI] value as its value.</p>
</li><li>
<p>If the element's [base URI] is different from the its parent's
[base URI], force the element to have an <code class="tag-attribute">xml:base</code> attribute with the following
value: if the value of the <code class="option">relative</code> option is
<code class="literal">true</code>, a string which, when resolved against the
parent's [base URI], will give the element's [base URI], otherwise the
element's [base URI].</p>
</li><li>
<p>Otherwise, if there is an <code class="tag-attribute">xml:base</code> attribute present, remove it.
</p>
</li></ul></div>
</li></ul></div>

<section id="c.add-xml-base.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.archive" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.3. </bdi>p:archive<a aria-label="§" class="self-link" href="#c.archive"/></h3></div><div class="content">

  

  <p>The <code class="code">p:archive</code> step outputs on its <code class="port">result</code> port an archive (usually
    binary) document, for instance a ZIP file. A specification of the contents of the archive may be
    specified in a manifest XML document on the <code class="port">manifest</code> port. The step produces a
    report on the <code class="port">report</code> port, which contains the manifest, amended with additional
    information about the archiving.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:archive</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">manifest</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>&gt;</code><br/>          <code>&lt;p:empty/&gt;</code><br/>     <code>&lt;/p:input&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">archive</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>&gt;</code><br/>          <code>&lt;p:empty/&gt;</code><br/>     <code>&lt;/p:input&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">format</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'zip'</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">relative-to</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="code">p:archive</code> step can perform several different operations on archives. The
    most common one will likely be creating an archive, but it could also, depending on the archive
    format, provide services like update, freshen or even merge. The only format implementations
      <span class="rfc2119" id="c.archive.4.2">must</span> support is [<a href="#zip"><span class="abbrev">ZIP</span></a>]. <span id="impl-1">The list of formats
      supported by the <code class="tag-element">p:archive</code> step is
      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

  <p>The <code class="code">p:archive</code> step has the following input ports:</p>
  <div class="variablelist">
    
    
    
  <dl><dt><span class="term"><code class="port">source</code></span></dt><dd>
        <p>The (primary) <code class="port">source</code> port is used to provide documents to be archived
          (for instance constructed by other steps). How and which of these documents are processed
          is governed by the document(s) appearing on the other input ports and the combination of
          options and parameters. See below for details. <a id="err.inline.C0084"/>It is a
              <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0084"><code class="errqname">err:XC0084</code></a>) if two or more documents appear on the <code class="code">p:archive</code>
            step's <code class="port">source</code> port that have the same base URI or if any document that
        appears on the <code class="port">source</code> port has no base URI.</p>
      </dd><dt><span class="term"><code class="port">manifest</code></span></dt><dd>
        <p>The <code class="port">manifest</code> port can receive a manifest document that tells the step how
          to construct the archive. If no manifest document is provided on this port, a default
          manifest is constructed automatically. See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>. <a id="err.inline.C0100"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0100"><code class="errqname">err:XC0100</code></a>) if the document on port
              <code class="port">manifest</code> does not conform to the given schema.
        </p>
        <p><a id="err.inline.C0112"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0112"><code class="errqname">err:XC0112</code></a>) if more than one
            document appears on the port <code class="port">manifest</code>.</p>
        <p>The default input for this port is the empty sequence.</p>
      </dd><dt><span class="term"><code class="port">archive</code></span></dt><dd>
        <p>The <code class="port">archive</code> port is used to provide the step with existing archive(s) for
          operations like update, freshen or merge. Handling of ZIP files supports modifying
          archives appearing on the <code class="port">archive</code> port (<a href="#cv.archive-zips" title="Handling of ZIP archives">Section 2.3.2, “Handling of ZIP archives”</a>).
            <span id="impl-2">The list of archive formats that can be modified by <code class="tag-element">p:archive</code> is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> For instance an implementation
          that supports archive merging may accept more than one document on the
            <code class="port">archive</code> port.</p>
        <p>The default input for this port is the empty sequence.</p>
      </dd></dl></div>

  <p>The <code class="code">p:archive</code> step has the following output ports:</p>
  <div class="variablelist">
    
    
  <dl><dt><span class="term"><code class="port">result</code></span></dt><dd>
        <p>The (primary) <code class="port">result</code> port will output the resulting archive.</p>
      </dd><dt><span class="term"><code class="port">report</code></span></dt><dd>
        <p>The <code class="port">report</code> port will output a report about the archiving operation. This
          will be the same as the manifest (as provided on the <code class="port">manifest</code> port or
          automatically created if there was no manifest provided), optionally amended with
          additional attributes and/or elements. <span id="impl-3">The semantics of any additional attributes,
            elements and their values are
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
      </dd></dl></div>

  <p>The <code class="code">p:archive</code> step has the following options:</p>
  <div class="variablelist">
    
    
    
  <dl><dt><span class="term"><code class="option">format</code></span></dt><dd>
        <p>The format of the archive can be specified using the <code class="option">format</code> option.
          Implementations <span class="rfc2119" id="c.archive.10.1.2.1.2">must</span> support the [<a href="#zip"><span class="abbrev">ZIP</span></a>] format,
          specified with the value <code class="code">zip</code>. <span id="impl-4">It is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are
          supported.</span></p>
      </dd><dt><span class="term"><code class="option">parameters</code></span></dt><dd>
        <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
          archiving. <span id="impl-5">The semantics of the keys and the allowed values for these keys are
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
          <a id="err.inline.C0079"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
              <code class="option">parameters</code> contains an entry whose key is defined by the
            implementation and whose value is not valid for that key.</p>
      </dd><dt><span class="term"><code class="option">relative-to</code></span></dt><dd>
        <p>The <code class="option">relative-to</code> option is used in creating a manifest when no
          manifest is provided on the <code class="port">manifest</code> port. If a manifest is present this option is
          not used. If the option’s value is a relative URI, it is made absolute against the
          base URI of the element on which it is specified (<code class="tag-element">p:with-option</code> or the step in
          case of a syntactic shortcut value). <a id="err.inline.D0064"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
              error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to
              [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
      </dd></dl></div>

  <p>The format of the archive is determined as follows:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>If the <code class="option">format</code> option is specified, this determines the format of the
        archive. Implementations <span class="rfc2119" id="c.archive.12.1.1.2">must</span> support the [<a href="#zip"><span class="abbrev">ZIP</span></a>]
        format, specified with the value <code class="code">zip</code>. <span id="impl-6">It is
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are supported.</span>
        <a id="err.inline.C0081"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0081"><code class="errqname">err:XC0081</code></a>) if the format of the
          archive does not match the format as specified in the <code class="option">format</code>
          option.</p>
    </li><li>
      <p>If no <code class="option">format</code> option is specified or if its value is the empty sequence,
        the archive's format will be determined by the step, using the <code class="code">content-type</code>
        document-property of the document on the <code class="port">archive</code> port and/or by inspecting its
        contents. <span id="impl-7">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> how the step determines
          the archive's format.</span> Implementations <span class="rfc2119" id="c.archive.12.2.1.5">should</span> recognize archives
        in [<a href="#zip"><span class="abbrev">ZIP</span></a>] format. </p>
    </li></ul></div>

  <p><a id="err.inline.C0085"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0085"><code class="errqname">err:XC0085</code></a>) if the format of the archive 
    does not match the specified format, cannot be understood, determined and/or processed.</p>

  

  <section id="cv.archive-manifest" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.3.1. </bdi>The archive manifest<a aria-label="§" class="self-link" href="#cv.archive-manifest"/></h4></div><div class="content">
    

    <p>An archive manifest specifies which documents will be considered in processing the
    archive. Every entry in the archive must have a corresponding entry in the manifest; if no such
    entry is provided, one will be constructed automatically (see below). If manifest entries are
    provided for documents that <em>are not</em> in the archive, how those are processed
    depends on the archive type and the parameters passed to the step.</p>

    <p>A manifest is represented by a <a href="#cv.archive"><code class="tag-element">c:archive</code></a> root element:</p>

    <p id="cv.archive" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:archive&gt;<br/>    (<a href="#cv.entry">c:entry</a>* &amp; <br/>     <var>anyNonXProcElement</var>*)<br/>&lt;/c:archive&gt;</code></p>

    <p><span id="impl-8">The <code class="code">c:archive</code> root element may contain additional
    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> attributes.</span></p>

    <p>All entries in the archive must be present as <a href="#cv.entry"><code class="tag-element">c:entry</code></a> child elements:</p>

    <p id="cv.entry" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:entry<br/>  <strong>name</strong> = <var>string</var><br/>  <strong>href</strong> = <var>anyURI</var><br/>  comment? = <var>string</var><br/>  method? = <var>string</var><br/>  level? = <var>string</var><br/>  content-type? = <var>ContentType</var>&gt;<br/>    <var>anyElement</var>*<br/>&lt;/c:entry&gt;</code></p>

    <div class="itemizedlist">
      
      
      
      
      
    <ul><li>
        <p>The <code class="code">name</code> attribute specifies the name of the entry in the archive.</p>
      </li><li>
        <p>The <code class="code">href</code> attribute must be a valid URI according to
          [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. If its value is relative, it is made absolute
          against the base URI of the manifest. There are two possible cases:</p>

        <div class="itemizedlist">
        

        
        <ul><li>
        <p>If the (absolute) <code class="code">href</code> value is exactly the same as the base URI of a
        document appearing on the <code class="port">source</code> port, that document is associated with this
        entry. If this entry is to be added to the archive, the associated document will be used.
        (The <code class="code">serialization</code> document property can be used to provide serialization
        properties.)
        </p>
        </li><li>
        <p>If no document on the <code class="port">source</code> port has a base URI that is exactly the same
        as the (absolute) <code class="code">href</code> value, the document at the specified URI is associated
        with this entry. These documents are stored in the archive “as is”; they
        <span class="rfc2119" id="cv.archive-manifest.8.2.2.2.1.3">must not</span> be parsed and re-serialized.</p>
        </li></ul></div>
      </li><li>
        <p>The <code class="code">method</code> attribute specifies how the entry should be compressed.
            <span id="impl-9">The default compression method is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
          </span>Implementations <span class="rfc2119" id="cv.archive-manifest.8.3.1.3">must</span> support no compression, specified with the
          value <code class="code">none</code>. <span id="impl-10">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what
            other compression methods are supported.</span></p>
      </li><li>
        <p>The <code class="code">level</code> attribute specifies the level of compression. <span id="impl-11">The default
            compression method is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>. </span>
          <span id="impl-12">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what compression levels are
            supported.</span></p>
      </li><li>
        <p>The <code class="code">content-type</code> attribute specifies the content-type of the entry as
          detected by the processor. It will be set by <a href="#c.archive-manifest"><code class="tag-element">p:archive-manifest</code></a> in constructing
          the manifest. It will be ignored by <a href="#c.archive"><code class="tag-element">p:archive</code></a>.</p>
      </li></ul></div>

    <p>The <code class="code">p:archive</code> step <span class="rfc2119" id="cv.archive-manifest.9.2">should</span> strive to retain the order of
      the <a href="#cv.entry"><code class="tag-element">c:entry</code></a> elements when constructing the archive. For instance, an e-book in EPUB
      format has a non-compressed entry that must be first in the archive. It should be possible to
      construct such an archive using <code class="code">p:archive</code>.</p>

    <p><span id="impl-13">The <code class="code">c:entry</code> elements may contain additional
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> attributes.</span></p>

    <p>If no manifest entry is provided for a document appearing on the <code class="port">source</code> port,
      the step will create a manifest entry for the document.
      (If no document arrives on the <code class="port">manifest</code> port at all, a complete manifest
      document will be created.)</p>

    <p>In a constructed manifest entry:</p>

    <div class="itemizedlist">
    
    
    <ul><li>
    <p>The entry’s <code class="tag-attribute">href</code> value is the base URI of the document.
    </p>
    </li><li>
    <p>The entry’s <code class="tag-attribute">name</code> value is derived from the base URI of
    the document and the <code class="option">relative-to</code> option.</p>
    <div class="itemizedlist">
    
    
    <ul><li>
    <p>First, the value of the <code class="option">relative-to</code> option is made absolute. If the
    initial substring of the base URI is exactly the same as the resulting absolute value, then the
    <code class="tag-attribute">name</code> is the portion of the base URI that follows that initial
    substring.
    </p>
    </li><li>
    <p>If there is no <code class="option">relative-to</code> option or if its value is not the initial
    substring of the base URI of the document, the name is the <em>path</em> portion of
    the URI (per [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]). If the path portion begins with an initial slash,
    that slash is removed.
    </p>
    </li></ul></div>
    </li></ul></div>
    
    <p>
      <a id="err.inline.C0118"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0118"><code class="errqname">err:XC0118</code></a>) if an archive manifest is
        invalid according to the specification.</p>
  </div></section>

  

  <section id="cv.archive-zips" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.3.2. </bdi>Handling of ZIP archives<a aria-label="§" class="self-link" href="#cv.archive-zips"/></h4></div><div class="content">
    

    <p>The format of the archive can be specified using the <code class="option">format</code> option.
      Implementations <span class="rfc2119" id="cv.archive-zips.2.2">must</span> support the [<a href="#zip"><span class="abbrev">ZIP</span></a>] format,
      specified with the value <code class="code">zip</code>. </p>

   <p>When ZIP archives are processed, every <code class="tag-attribute">name</code> in the
   manifest must be a relative path without a leading slash.</p>

    <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
      archiving. For the <code class="code">zip</code> format, the following parameters <span class="rfc2119" id="cv.archive-zips.4.3">must</span>
      be supported:</p>

    <div class="variablelist">
      
      
      
    <dl><dt><span class="term"><code class="code">command</code></span></dt><dd>
          <p>Specifies what operation to perform. If not specified, its default value is
              <code class="literal">update</code>. Implementations must support the values <code class="literal">update</code>,
              <code class="literal">create</code>, <code class="literal">freshen</code>, and <code class="literal">delete</code>.
              <span id="impl-14">The <a href="#c.archive"><code class="tag-element">p:archive</code></a> step may support additional,
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> commands for ZIP files.</span>
              Unless otherwise specified, exactly zero or one ZIP archive can appear on the
              <code class="port">archive</code> port for the commands described below. If no archive appears,
              a new archive will be created.
          </p>

          <div class="variablelist">
            
            
            
            
          <dl><dt><span class="term"><code class="code">update</code></span></dt><dd>
                <p>When the <code class="code">command</code> parameter is set to <code class="code">update</code>, the
                ZIP archive will be updated:</p>

                <div class="orderedlist">
                  
                  
                <ol style="list-style: decimal;"><li>
                    <p>For every entry in the ZIP file:</p>
                    <div class="itemizedlist">
                      
                      
                    <ul><li>
                        <p>If the manifest contains a <a href="#cv.entry"><code class="tag-element">c:entry</code></a> with a matching
                        <code class="tag-attribute">name</code>, the entry in the ZIP file is updated with
                        the document identified by the <a href="#cv.entry"><code class="tag-element">c:entry</code></a> in the manifest.</p>
                      </li><li>
                        <p>If the manifest does not contain a matching <a href="#cv.entry"><code class="tag-element">c:entry</code></a>, the
                        ZIP entry name is resolved against the base URI of the ZIP file.</p>
                        <div class="itemizedlist">
                          
                          
                        <ul><li>
                            <p>If a document exists at that URI and either has no timestamp or has a timestamp
                            more than the timestamp in the ZIP file, the entry in the ZIP file will be updated
                            with the document at the resolved URI.</p>
                          </li><li>
                            <p>If no document exists at that URI, or the document cannot be accessed,
                            or the document has a timestamp and the timestamp in the ZIP archive is more recent
                            than the timestamp of the document, then the ZIP entry is unchanged.</p>
                          </li></ul></div>
                      </li></ul></div>
                  </li><li>
                    <p>For every <a href="#cv.entry"><code class="tag-element">c:entry</code></a> in the manifest that does not have a matching
                    entry in the ZIP file, the ZIP file will be updated by adding the document identified
                    by the <a href="#cv.entry"><code class="tag-element">c:entry</code></a> to the ZIP file.</p>
                  </li></ol></div>
              </dd><dt><span class="term"><code class="code">create</code></span></dt><dd>
                <p>When the <code class="code">command</code> parameter is set to <code class="code">create</code>,
                the ZIP archive will be created. Creating a ZIP archive behaves exactly like
                <code class="literal">update</code> except that any timestamps
                are ignored; every ZIP entry will be updated or created if there is a <a href="#cv.entry"><code class="tag-element">c:entry</code></a> or
                  matching document for it. The document must be obtained by dereferencing the URI in 
                  <code class="option">href</code>. <a id="err.inline.D0011"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>)
                    if the resource referenced by the <code class="option">href</code> option does not exist, cannot be
                    accessed or is not a file.</p>
              </dd><dt><span class="term"><code class="code">freshen</code></span></dt><dd>
                <p>When the <code class="code">command</code> parameter is set to <code class="code">freshen</code>,
                existing files in the ZIP archive may be updated, but no new files will be added.
                Freshing a ZIP archive behaves exactly like <code class="literal">update</code> except that
                only entries that already exist in the ZIP archive are considered.</p>
              </dd><dt><span class="term"><code class="code">delete</code></span></dt><dd>
                <p>When the <code class="code">command</code> parameter is set to <code class="code">delete</code>,
                exactly one document in ZIP format must appear on the <code class="port">archive</code> port.
                For every entry in the ZIP file:</p>
                <div class="itemizedlist">
                  
                <ul><li>
                    <p>If the manifest contains a <a href="#cv.entry"><code class="tag-element">c:entry</code></a> with a matching
                    <code class="tag-attribute">name</code>, the entry in the ZIP file is removed from
                    the ZIP archive.</p>
                  </li></ul></div>
                <p>If the manifest contains <a href="#cv.entry"><code class="tag-element">c:entry</code></a>
                elements which do not have a matching entry in the ZIP
                archive, they are simply ignored.</p>
              </dd></dl></div>
        </dd><dt><span class="term"><code class="code">level</code></span></dt><dd>
          <p>Specifies the default compression level for files added to or updated in the
            archive. If the <code class="tag-attribute">level</code> attribute is specified on a
            <a href="#cv.entry"><code class="tag-element">c:entry</code></a>, its value takes precedence for that entry.
            Values that must be supported for ZIP files are:
              “<code class="code">smallest</code>”, “<code class="code">fastest</code>”, “<code class="code">default</code>”,
              “<code class="code">huffman</code>”, and “<code class="code">none</code>”.</p>
        </dd><dt><span class="term"><code class="code">method</code></span></dt><dd>
          <p>Specifies the default compression method for files added to or updated in the
            archive. If the <code class="tag-attribute">method</code> attribute is specified on a
            <a href="#cv.entry"><code class="tag-element">c:entry</code></a>, its value takes precedence for that entry.
            Values that must be supported for ZIP files are:
              “<code class="code">none</code>” and “<code class="code">deflated</code>”.</p>
        </dd></dl></div>

    <p><a id="err.inline.C0080"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0080"><code class="errqname">err:XC0080</code></a>) if the number of
        documents on the <code class="port">archive</code> does not match the expected number of archive input
        documents for the given <code class="code">format</code> and <code class="code">command</code>.</p>

    <p>Implementations of other archive formats <span class="rfc2119" id="cv.archive-zips.7.1">should</span> use the same parameter
      names if applicable. The value spaces for these parameters may be format-specific though.
        <span id="impl-15">The actual parameter names supported by <a href="#c.archive"><code class="tag-element">p:archive</code></a> for a particular format
        are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

  </div></section>

  

  <section id="c.archive.16" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved.
The archive has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>
<section id="c.archive-manifest" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.4. </bdi>p:archive-manifest<a aria-label="§" class="self-link" href="#c.archive-manifest"/></h3></div><div class="content">

  

  <p>The <code class="code">p:archive-manifest</code> creates an XML manifest file describing the contents of
    the archive appearing on its <code class="port">source</code> port.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:archive-manifest</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">format</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>                      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">relative-to</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">override-content-types</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">array(array(xs:string))?</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="code">p:archive-manifest</code> step inspects the archive appearing on its
      <code class="port">source</code> port and outputs a manifest describing the contents of the archive on its
      <code class="port">result</code> port. </p>

  <p>The format of the archive is determined as follows:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>If the <code class="option">format</code> option is specified, this determines the format of the
        archive. Implementations <span class="rfc2119" id="c.archive-manifest.6.1.1.2">must</span> support the [<a href="#zip"><span class="abbrev">ZIP</span></a>]
        format, specified with the value <code class="code">zip</code>. <span id="impl-16">It is
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are supported.</span>
      </p>
    </li><li>
      <p>If no <code class="option">format</code> option is specified or if its value is the empty sequence,
        the archive's format will be determined by the step, using the <code class="code">content-type</code>
        document-property of the document on the <code class="port">source</code> port and/or by inspecting its
        contents. <span id="impl-17">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> how the step determines
          the archive's format.</span> Implementations <span class="rfc2119" id="c.archive-manifest.6.2.1.5">should</span> recognize archives
        in [<a href="#zip"><span class="abbrev">ZIP</span></a>] format. </p>
    </li></ul></div>

  <p><a id="err.inline.C0085.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0085"><code class="errqname">err:XC0085</code></a>) if the format of the
      archive does not match the specified format, cannot be understood, determined and/or
      processed.</p>

  <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
    archive manifest generation. <span id="impl-18">The semantics of the keys and the allowed values for these
      keys are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
    <a id="err.inline.C0079.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
        <code class="option">parameters</code> contains an entry whose key is defined by the implementation and
      whose value is not valid for that key.</p>

  <p>The <code class="option">relative-to</code> option, when present, is used in creating the value of the
    manifest's <code class="code">c:entry/@href</code> attribute. If the option is relative, it is made absolute
    against the base URI of the element on which it is specified (<code class="tag-element">p:with-option</code> or the
    step in case of a syntactic shortcut value). <a id="err.inline.D0064.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
        error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>

  <p>The generated manifest has the format as described in <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.
    Implementations <span class="rfc2119" id="c.archive-manifest.10.2">must</span> supply an <a href="#cv.entry"><code class="tag-element">c:entry</code></a> element and its
      <code class="code">name</code> and <code class="code">content-type</code> attributes for every entry in the archive. The
    value of the generated manifest's <code class="code">c:entry/@href</code> attribute will be determined in the
    same way as a base URI of an unarchived document by <a href="#c.unarchive" title="p:unarchive">Section 2.38, “p:unarchive”</a>. <a id="err.inline.C0120"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0120"><code class="errqname">err:XC0120</code></a>) if the <code class="option">relative-to</code>
      option is not present and the document on the <code class="port">source</code> port does not have a base
      URI.
    <span id="impl-19">Additional information provided for entries in <code class="tag-element">p:archive-manifest</code> is
        <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

  

  <section id="override-content-type" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.4.1. </bdi>Overriding content types<a aria-label="§" class="self-link" href="#override-content-type"/></h4></div><div class="content">
    

    <p>The <code class="option">override-content-types</code> option can be used to partially override the
      content-type determination mechanism. If present, it must be an array of arrays, where the
      inner arrays consist of exactly two strings: </p>
    <div class="itemizedlist">
      
      
    <ul><li>
        <p>The first member in an inner array <span class="rfc2119" id="override-content-type.3.1.1.1">must</span> be a regular expression as
          specified in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>], section 7.61 “<code class="literal">Regular
            Expression Syntax</code>”. <a id="err.inline.C0147"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
              error</a></em> (<a href="#err.C0147"><code class="errqname">err:XC0147</code></a>) if the specified value is not a valid XPath regular
            expression.</p>
      </li><li>
        <p>The second member in an inner array <span class="rfc2119" id="override-content-type.3.2.1.1">must</span> be a valid a MIME
          content-type. <a id="err.inline.D0079"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied 
            content-type is not a valid media type of the form 
            “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
            or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.</p>
      </li></ul></div>

    <p><a id="err.inline.C0146"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0146"><code class="errqname">err:XC0146</code></a>) if the specified value
        for the <code class="option">override-content-types</code> option is not an array of arrays, where the
        inner arrays have exactly two members of type <code class="code">xs:string</code>.</p>

    <p>Determining an archive entry's content-type is as follows:</p>
    <div class="itemizedlist">
      
      
      
    <ul><li>
        <p>The XPath regular expressions (the first members of the inner arrays) will be matched
          against the path of the entry <em>in</em> the archive. This will be done in
          the order of appearance in the outer array (so order is significant). The matching is done
          unanchored: it is a match if the regular expression matches part of the entry's path.
          Informally: matching behaves like applying the XPath <code class="code">matches#2</code> function, like
          in <code class="code">matches($path-in-archive, $regular-expression)</code>.</p>
        <div class="note admonition"><h3>Note</h3><div class="admonition-body">
          <p>Depending on how archives are constructed, the path of an entry in an archive can be
            with or without a leading slash. Usually it will be without. For archives constructed by
              <a href="#c.archive"><code class="tag-element">p:archive</code></a> no leading slash will be present.</p>
        </div></div>
      </li><li>
        <p>If a match is found, the content-type (the second member of the inner array for which
          the match was found) is used as the entry's content-type.</p>
      </li><li>
        <p>If no match was found for all inner arrays, the normal
            (implementation-defined) mechanism for determining the
          content-type is used. </p>
      </li></ul></div>

    <p>For example: setting the <code class="option">override-content-types</code> option to <code class="code">[
        ['.rels$', 'application/xml'], ['^special/', 'application/octet-stream'] ]</code> means that
      all files ending with <code class="code">.rels</code> will get the content-type
        <code class="code">application/xml</code>. All files in the archive's <code class="code">special</code> directory
      (including sub-directories) will get the content-type
      <code class="code">application/octet-stream</code>.</p>

  </div></section>

  

  <section id="c.archive-manifest.12" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved. The
      manifest has no <code class="property">base-uri</code>.</p>
  </div></section>
</div></section>
<section id="c.cast-content-type" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.5. </bdi>p:cast-content-type<a aria-label="§" class="self-link" href="#c.cast-content-type"/></h3></div><div class="content">
   
   
   <p>The <code class="tag-element">p:cast-content-type</code> step creates a new document by 
      changing the media type of its input. If the value of the <code class="option">content-type</code>
   option and the current media type of the document on <code class="port">source</code> port are
   the same, this document will appear unchanged on <code class="port">result</code> port.</p>
   
   <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:cast-content-type</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">content-type</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>
   
   <p>The input document is transformed from one media type to another.
      <a id="err.inline.D0079.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
         a valid media type of the form 
         “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
         or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.
      <a id="err.inline.C0071"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
         error</a></em> (<a href="#err.C0071"><code class="errqname">err:XC0071</code></a>) if the <code class="tag-element">p:cast-content-type</code> step
         cannot perform the requested cast.
   </p>
   
   <p>The <code class="option">parameters</code> can be used to supply parameters to
      control casting. <span id="impl-20">The semantics of the keys and the allowed values for
         these keys are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
      <a id="err.inline.C0079.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
         <code class="option">parameters</code> contains an entry whose key is defined by the
         implementation and whose value is not valid for that key.</p>
   
   <section id="casting-from-xml" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.5.1. </bdi>Casting from an XML media type<a aria-label="§" class="self-link" href="#casting-from-xml"/></h4></div><div class="content">
       
      <div class="itemizedlist">
         
         
         
         
         
      <ul><li>
            <p>Casting from one XML media type to another simply changes the
               “<code class="literal">content-type</code>” document property.
            </p>
         </li><li>
            <p>Casting from an XML media type to an HTML media type changes the
               “<code class="literal">content-type</code>” document property and removes any
               serialization property.
            </p>
         </li><li>
            <p>Casting from an XML media type to a JSON media type converts the
               XML into JSON. <span id="impl-21">The precise nature of the conversion from XML to JSON
                  is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
               If the input document is an XML representation of JSON as defined in
               [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>],
               implementations <span class="rfc2119" id="casting-from-xml.2.3.1.3">must</span> produce the same result as 
               <code class="literal">fn:parse-json(fn:xml-to-json())</code>
               by default. If the input document has a <code class="tag-element">c:param-set</code> document element,
               an instance of <code class="literal">map(xs:QName, xs:string)</code> 
               <span class="rfc2119" id="casting-from-xml.2.3.1.7">must</span> be returned that represents the document's 
               <code class="tag-element">c:param</code> elements. The serialization property is removed.
            </p>
         </li><li>
            <p>Casting from an XML media type to a text media type serializes the XML document
               by calling <code class="function">fn:serialize($doc, $param)</code> where <code class="literal">$doc</code> is
               the document on the <code class="port">source</code> port and <code class="literal">$param</code> is the serialization
               property of this document. The resulting string is wrapped by a document node and returned
               on the <code class="port">result</code> port. The serialization property is removed.</p>
         </li><li>
            <p>Casting from an XML media type to any other media type
               <span class="rfc2119" id="casting-from-xml.2.5.1.1">must</span> support the case where the input document is
               a <a href="#c.data"><code class="tag-element">c:data</code></a> document. The resulting document will
               have the specified media type and a representation that
               is the content of the <a href="#c.data"><code class="tag-element">c:data</code></a> element after decoding the base64
               encoded content The serialization property is removed.</p>
            <p><a id="err.inline.C0072"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
               error</a></em> (<a href="#err.C0072"><code class="errqname">err:XC0072</code></a>) if the <a href="#c.data"><code class="tag-element">c:data</code></a> contains content is not
               a valid base64 string.</p>
            <p><a id="err.inline.C0073"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
               error</a></em> (<a href="#err.C0073"><code class="errqname">err:XC0073</code></a>) if the <a href="#c.data"><code class="tag-element">c:data</code></a> element does not have
               a <code class="tag-attribute">content-type</code> attribute.</p>
            <p><a id="err.inline.C0074"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
               error</a></em> (<a href="#err.C0074"><code class="errqname">err:XC0074</code></a>) if the <code class="option">content-type</code> is supplied and is
               not the same as the <code class="tag-attribute">content-type</code> specified on
               the <a href="#c.data"><code class="tag-element">c:data</code></a> element.
            </p>
            <p><span id="impl-22">Casting from an XML media type to any other media type when
               the input document is not a <a href="#c.data"><code class="tag-element">c:data</code></a> document is
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li></ul></div>
   </div></section>
   <section id="casting-from-html" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.5.2. </bdi>Casting from an HTML media type<a aria-label="§" class="self-link" href="#casting-from-html"/></h4></div><div class="content">
      
      <div class="itemizedlist">
         
         
         
         
         
      <ul><li>
            <p>Casting from an HTML media type to an XML media type changes
               “<code class="literal">content-type</code>” document property and removes any
               serialization property. </p>
         </li><li>
            <p>Casting from an HTML media type to another HTML media type
               changes “<code class="literal">content-type</code>” document property.</p>
         </li><li>
            <p><span id="impl-23">Casting from an HTML media type to a JSON media type is 
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li><li>
            <p>Casting an an HTML media type to a text media type serializes the HTML document
               by calling <code class="function">fn:serialize($doc, $param)</code> where <code class="literal">$doc</code> is
               the document on the <code class="port">source</code> port and <code class="literal">$param</code> is the serialization
               property of this document. The resulting string is wrapped by a document node and returned
               on the <code class="port">result</code> port. The serialization property is removed.</p>
         </li><li>
            <p><span id="impl-24">Casting from an HTML media type to any other media type is
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li></ul></div>
   </div></section>
   <section id="casting-from-json" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.5.3. </bdi>Casting from a JSON media type<a aria-label="§" class="self-link" href="#casting-from-json"/></h4></div><div class="content">
      
      <div class="itemizedlist">
         
         
         
         
         
      <ul><li>
            <p>Casting from a JSON media type to an XML media type converts the
               JSON into XML. An implementation <span class="rfc2119" id="casting-from-json.2.1.1.1">must</span> support the format
               specified in section “XML Representation of JSON” of [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>]
               as default for the resulting XML. <span id="impl-25">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> whether
                  other result formats are supported.</span> The serialization property is removed.</p>
         </li><li>
            <p><span id="impl-26">Casting from a JSON media type to an HTML media type is
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li><li>
            <p>Casting from a JSON media type to another JSON media type
               changes “<code class="literal">content-type</code>” document property.</p>
         </li><li>
            <p>Casting from a JSON media type to a text media type serializes the JSON document
               by calling <code class="function">fn:serialize($doc, $param)</code> where <code class="literal">$doc</code> is
               the document on the <code class="port">source</code> port and <code class="literal">$param</code> is the serialization
               property of this document. The resulting string is wrapped by a document node and returned
               on the <code class="port">result</code> port. The serialization property is removed.</p>
         </li><li>
            <p><span id="impl-27">Casting from a JSON media type to any other media type is
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li></ul></div>
   </div></section>
   <section id="casting-from-text" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.5.4. </bdi>Casting from a text media type<a aria-label="§" class="self-link" href="#casting-from-text"/></h4></div><div class="content">
      
      <div class="itemizedlist">
         
         
         
         
         
      <ul><li>
            <p>Casting from a text media type to an XML media type parses the text value
               of the document on <code class="port">source</code> port by calling <code class="function">fn:parse-xml</code>.
               <a id="err.inline.D0049"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0049"><code class="errqname">err:XD0049</code></a>) if the text value is not
                  a well-formed XML document. The serialization property is removed.</p>
         </li><li>
            <p>Casting from a text media type to an HTML media type parses the text value
               of the document on <code class="port">source</code> port into an XPath data model document that 
               contains a tree of elements, attributes, and other nodes. <span id="impl-28">The precise way in which 
                  text documents are parsed into the XPath data model is 
                  <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> <a id="err.inline.D0060"/>It is a 
                     <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0060"><code class="errqname">err:XD0060</code></a>) if the text document can not be converted into
                     the XPath data model. The serialization property is removed.</p> 
         </li><li>
            <p>Casting from a text media type to a JSON media type parses the text value 
               of the document on <code class="port">source</code> port by calling <code class="function">fn:parse-json($doc, $par)</code>
               where <code class="literal">$doc</code> is the text document and <code class="literal">$par</code> is the 
               <code class="option">parameter</code> option. <a id="err.inline.D0057"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
                  error</a></em> (<a href="#err.D0057"><code class="errqname">err:XD0057</code></a>) if the text document does not conform to the JSON grammar, unless the 
                  parameter liberal is true and the processor chooses to accept the deviation.
               <a id="err.inline.D0058"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0058"><code class="errqname">err:XD0058</code></a>) if the parameter duplicates is 
                  reject and the text document contains a JSON object with duplicate keys.
               <a id="err.inline.D0059"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0059"><code class="errqname">err:XD0059</code></a>) if the parameter map contains 
                  an entry whose key is defined in the specification of <code class="function">fn:parse-json</code> and 
                  whose value is not valid for that key, or if it contains an entry with the key fallback 
                  when the parameter <code class="literal">escape</code> with <code class="literal">true()</code> is also 
                  present. The serialization property is removed.
            </p>
         </li><li>
            <p>Casting from a text media type to another text media type changes 
               “<code class="literal">content-type</code>” document property.</p>
         </li><li>
            <p><span id="impl-29">Casting from a text media type to any other media type is
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li></ul></div>
   </div></section>
   <section id="casting-from-other" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.5.5. </bdi>Casting from any other media type<a aria-label="§" class="self-link" href="#casting-from-other"/></h4></div><div class="content">
      
      <div class="itemizedlist">
         
         
         
      <ul><li id="c.data">
            <p>Casting from a non-XML media type to an XML media type produces an
               XML document with a <a href="#c.data"><code class="tag-element">c:data</code></a> document element. The original
               media type will be preserved in the
               <code class="tag-attribute">content-type</code> attribute on the
               <a href="#c.data"><code class="tag-element">c:data</code></a> element.</p>
            
            <p id="d814e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:data<br/>  <strong>content-type</strong> = <var>ContentType</var><br/>  charset? = <var>string</var><br/>  encoding? = <var>string</var>&gt;<br/>    <var>string</var><br/>&lt;/c:data&gt;</code></p>
            
            <p>The content of the <a href="#c.data"><code class="tag-element">c:data</code></a> element is the base64 encoded
               representation of the non-XML content. The serialization property is removed.</p>
         </li><li>
            <p><span id="impl-30">Casting from any other media type to a HTML media type, a JSON media type
               or a text document is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li><li>
            <p><span id="impl-31">Casting from any other media type to any other media type is 
               <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
         </li></ul></div>
   </div></section>
   <section id="c.cast-content-type.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
      
      <p>All document
         properties are preserved except the <code class="code">content-type</code> property
         which is updated accordingly and the <code class="code">serialization</code> property
         which is removed by some casting methods.</p>
   </div></section>
</div></section>
<section id="c.compare" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.6. </bdi>p:compare<a aria-label="§" class="self-link" href="#c.compare"/></h3></div><div class="content">


<p>The <code class="code">p:compare</code> step compares two documents for
equality.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:compare</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">alternate</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">differences</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">method</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>                      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-if-not-equal</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>This step takes single documents on each of two ports and
compares them. If <code class="option">method</code> is not specified, or if
<code class="code">deep-equal</code> is specified, the comparison
uses <code class="function">fn:deep-equal</code>
(as defined in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>]). <span id="impl-32">Implementations of <code class="tag-element">p:compare</code>
<span class="rfc2119" id="c.compare.4.5.2">must</span> support the <code class="code">deep-equal</code> <code class="option">method</code>;
other supported methods are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
<a id="err.inline.C0076"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0076"><code class="errqname">err:XC0076</code></a>) if
the comparison <code class="option">method</code> specified in <code class="tag-element">p:compare</code>
is not supported by the implementation.
<a id="err.inline.C0077"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0077"><code class="errqname">err:XC0077</code></a>) if
the media types of the documents supplied are incompatible with the
comparison <code class="option">method</code>.
</p>

<p><a id="err.inline.C0019"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0019"><code class="errqname">err:XC0019</code></a>)
if the documents are not equal according to the specified comparison
<code class="option">method</code>, and the value of the
<code class="option">fail-if-not-equal</code> option is
<code class="literal">true</code>. If the documents are equal, or if the
value of the <code class="option">fail-if-not-equal</code> option is
<code class="literal">false</code>, a <a href="#cv.result"><code class="tag-element">c:result</code></a> document is produced
with contents <code class="literal">true</code> if the documents are equal,
otherwise <code class="literal">false</code>.</p>

<p><span id="impl-33">If
<code class="option">fail-if-not-equal</code> is <code class="code">false</code>, and the
documents differ, an <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>
summary of the differences between the two documents may appear on the
<code class="port">differences</code> port.</span></p>

<section id="c.compare.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.
The comparison document has no <code class="property">base-uri</code>.</p>
</div></section>
</div></section>
<section id="c.compress" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.7. </bdi>p:compress<a aria-label="§" class="self-link" href="#c.compress"/></h3></div><div class="content">

  

  <p>The <code class="tag-element">p:compress</code> step serializes the document appearing on its <code class="port">source</code>
    port and outputs a compressed version of this on its <code class="port">result</code> port.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:compress</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">format</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'gzip'</code><code>"</code><code>/&gt;</code><code>       </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">serialization</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>  </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:compress</code> step first serializes the document appearing on its
      <code class="port">source</code>. It then compresses the outcome of this serialization and outputs the
    result on its <code class="port">result</code> port.</p>

  <p>The <code class="tag-element">p:compress</code> step has the following options:</p>
  <div class="variablelist">
    
    
    
  <dl><dt><span class="term"><code class="option">format</code></span></dt><dd>
        <p>The format of the compression can be specified using the <code class="option">format</code>
          option. Implementations <span class="rfc2119" id="c.compress.6.1.2.1.2">must</span> support the [<a href="#gzip"><span class="abbrev">GZIP</span></a>]
          format, specified with the value <code class="code">gzip</code>. <span id="impl-34">It is
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are supported.</span>
          <a id="err.inline.C0202"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0202"><code class="errqname">err:XC0202</code></a>) if the compression
              format cannot be understood, determined and/or processed.
        </p>
      </dd><dt><span class="term"><code class="option">parameters</code></span></dt><dd>
        <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
          compression. <span id="impl-35">The semantics of the keys and the allowed values for these keys are
              <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
          <a id="err.inline.C0079.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
              <code class="option">parameters</code> contains an entry whose key is defined by the
            implementation and whose value is not valid for that key.</p>
      </dd><dt><span class="term"><code class="option">serialization</code></span></dt><dd>
        <p>The <code class="option">serialization</code> option is provided to control the serialization of
          content before compression takes place. If the document to be stored has a
            <code class="code">serialization</code> property, the serialization is controlled by the merger of
          the two maps where the entries in the <code class="code">serialization</code> property take precedence.
          Serialization is described in [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>].</p>
      </dd></dl></div>

  

  <section id="c.compress.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved, except for the
        <code class="code">content-type</code> property which is updated accordingly and the
        <code class="code">serialization</code> property which is removed.</p>
  </div></section>

</div></section>
<section id="c.count" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.8. </bdi>p:count<a aria-label="§" class="self-link" href="#c.count"/></h3></div><div class="content">


<p>The <code class="code">p:count</code> step counts the number of documents in
the <code class="code">source</code> input sequence and returns a single document
on <code class="code">result</code> containing that number. The generated document
contains a single <a href="#cv.result"><code class="tag-element">c:result</code></a> element whose contents is the
string representation of the number of documents in the
sequence.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:count</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">limit</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:integer</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">0</code><code>"</code><code>/&gt;</code><code>           </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>If the <code class="tag-attribute">limit</code> option is specified
and is greater than zero, the <code class="tag-element">p:count</code> step will count at most
that many documents. This provides a convenient mechanism to discover,
for example, if a sequence consists of more than 1 document, without
requiring every single document to be buffered before processing can
continue.</p>

<section id="c.count.5" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.
The count document has no <code class="property">base-uri</code>.</p>
</div></section>
</div></section>
<section id="c.delete" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.9. </bdi>p:delete<a aria-label="§" class="self-link" href="#c.delete"/></h3></div><div class="content">


<p>The <code class="code">p:delete</code> step deletes items specified by a <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> from the
<code class="code">source</code> input document and produces the resulting document,
with the deleted items removed, on the <code class="port">result</code> port.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:delete</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option <span class="rfc2119" id="c.delete.4.2">must</span> be an
XSLTSelectionPattern. A <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> may match multiple items to be
deleted.</p>

<p>If an element is selected by the <code class="option">match</code> option, the
entire subtree rooted at that element is deleted.</p>

<p><a id="err.inline.C0023.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if the
<code class="option">match</code> option matches the document node.</p>

<p>This step cannot be used to remove namespaces. <a id="err.inline.C0062"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0062"><code class="errqname">err:XC0062</code></a>) if the
<code class="option">match</code> option matches a namespace node.
Also, note that deleting an attribute named
<code class="tag-attribute">xml:base</code> does not change the base URI
of the element on which it occurred.</p>

<section id="c.delete.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

   <p>If the resulting document contains exactly one text node,
      the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
      <code class="literal">serialization</code> property is removed, while all other document properties are 
      preserved. In all other cases, all document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.error" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.10. </bdi>p:error<a aria-label="§" class="self-link" href="#c.error"/></h3></div><div class="content">


<p>The <code class="code">p:error</code> step generates a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> using the input provided
to the step.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:error</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">code</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>         </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>This step uses the document provided on its input as the content
of the error raised. An instance of the
<code class="tag-element">c:errors</code> element will be produced on the error output port, as is
always the case for <em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
The error generated can be caught by a <code class="tag-element">p:try</code> just like any
other dynamic error.</p>

<p>For authoring convenience, the <code class="tag-element">p:error</code> step is
declared with a single, primary output port. With respect to connections,
this port behaves like
any other output port even though nothing can ever
appear on it since the step always fails.</p>

<p>For example, given the following invocation:</p>
<pre class="programlisting language-markup xml"><code>&lt;p:error xmlns:my="http://www.example.org/error"
         name="bad-document" code="my:unk12"&gt;
   &lt;p:with-input port="source"&gt;
     &lt;message&gt;The document element is unknown.&lt;/message&gt;
   &lt;/p:with-input&gt;
&lt;/p:error&gt;</code></pre>

<p>The error vocabulary element (and document) generated on the
error output port would be:</p>
<pre class="programlisting language-markup xml"><code>&lt;c:errors xmlns:c="http://www.w3.org/ns/xproc-step"
          xmlns:p="http://www.w3.org/ns/xproc"
          xmlns:my="http://www.example.org/error"&gt;
 &lt;c:error name="bad-document" type="p:error"
          code="my:unk12"&gt;&lt;message
          &gt;The document element is unknown.&lt;/message&gt;
&lt;/c:error&gt;
&lt;/c:errors&gt;</code></pre>

<p>The <code class="tag-attribute">href</code>,
<code class="tag-attribute">line</code> and <code class="tag-attribute">column</code>,
or <code class="tag-attribute">offset</code>, might also be present on the
<code class="tag-element">c:error</code> to identify the location of the <code class="tag-element">p:error</code>
element in the pipeline.</p>

<section id="c.error.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved but
that’s irrelevant as no document is ever produced.</p>
</div></section>
</div></section>
<section id="c.filter" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.11. </bdi>p:filter<a aria-label="§" class="self-link" href="#c.filter"/></h3></div><div class="content">


<p>The <code class="code">p:filter</code> step selects portions of the source document
based on a (possibly dynamically constructed) XPath select expression.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:filter</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">select</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>      </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>This step behaves just like an <code class="tag-element">p:input</code> with
a <code class="tag-attribute">select</code> expression except that the select
expression is computed dynamically.</p>

<section id="c.filter.5" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.
The <code class="property">base-uri</code> property of each document will reflect the
base URI of the selected node(s).
</p>
</div></section>
</div></section>
<section id="c.hash" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.12. </bdi>p:hash<a aria-label="§" class="self-link" href="#c.hash"/></h3></div><div class="content">


<p>The <code class="tag-element">p:hash</code> step generates a hash, or digital “fingerprint”,
for some value and injects it into the <code class="port">source</code> document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:hash</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">value</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">algorithm</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*/node()'</code><code>"</code><code>/&gt;</code><code>  </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">algorithm</code> option must be a QName.
If it does not have a prefix, then it must be one of the following values:
“crc”, “md”, or “sha”.</p>

<p>If a <code class="tag-attribute">version</code> is not specified, the
default version is algorithm-defined. For “<code class="literal">crc</code>” it
is 32, for “<code class="literal">md</code>” it is 5, for “<code class="literal">sha</code>”
it is 1.</p>

<p>A hash is constructed from the string specified in the
<code class="option">value</code> option using the specified algorithm and version.
Implementations <span class="rfc2119" id="c.hash.6.2">must</span> support
[<a href="#bib.crc"><span class="abbrev">CRC32</span></a>],
[<a href="#rfc1321"><span class="abbrev">RFC 1321</span></a>], and [<a href="#bib.sha"><span class="abbrev">SHA1</span></a>]
hashes. <span id="impl-36">It is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other algorithms are
supported.</span>
The resulting hash <span class="rfc2119" id="c.hash.6.7">should</span> be returned as a string of
hexadecimal characters.
</p>

<p>The value of the <code class="option">match</code> option must be an
XSLTSelectionPattern.</p>

<p>The hash of the specified value is computed using the algorithm and
parameters specified. <a id="err.inline.C0036"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0036"><code class="errqname">err:XC0036</code></a>) if the requested hash algorithm is not
one that the processor understands or if the value or parameters are
not appropriate for that algorithm.</p>

<p>The matched nodes are specified with the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> in the
<code class="option">match</code> option. For each matching node, the string
value of the computed hash is used in the output (if more than one node
matches, the <em>same</em> hash value is used in each match).
Nodes that do not
match are copied without change.</p>

<p>If the expression given in the <code class="option">match</code> option
matches an <em>attribute</em>, the hash is used as the new
value of the attribute in the output.
If the attribute is named “<code class="tag-attribute">xml:base</code>”, the base URI
of the element <span class="rfc2119" id="c.hash.10.4">must</span> also be amended accordingly.</p>

<p>If the document node is matched, the entire document is replaced by a text node
with the hash. What appears on port <code class="port">result</code> is a text document with the
text node wrapped in a document node.</p>

<p>If the expression matches any
other kind of node, the entire node (and <em>not</em> just
  its contents) is replaced by the hash.</p>

  <section id="c.hash.13" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>If the resulting document contains exactly one text node,
      the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
      <code class="literal">serialization</code> property is removed, while all other document properties are 
      preserved. For other document types, all document properties are preserved.</p>
  </div></section>
</div></section>
<section id="c.http-request" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.13. </bdi>p:http-request<a aria-label="§" class="self-link" href="#c.http-request"/></h3></div><div class="content">


<p>The <code class="code">p:http-request</code> step allows authors to interact
with resources over HTTP or related protocols. Implementations
<span class="rfc2119" id="c.http-request.2.2">must</span> support the <code class="literal">http</code> and
<code class="literal">https</code> protocols.
(Implementors are encouraged to support as many protocols as
practical. In particular, pipeline authors may attempt to use
<code class="tag-element">p:http-request</code> to load documents with computed URIs using
the <code class="literal">file:</code> scheme.)</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:http-request</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">method</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'GET'</code><code>"</code><code>/&gt;</code><code>      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">serialization</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>  </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">headers</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:string, xs:string)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">auth</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:string, item()+)?</code><code>"</code><code>/&gt;</code><code>         </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'.?status-code lt 400'</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The <code class="tag-element">p:http-request</code> step performs the HTTP request
specified by the <code class="option">method</code> option against the URI specified in
the <code class="option">href</code> option. In simple cases, for example, a GET
request on an unauthenticated URI, nothing else is necessary to form a
complete request.</p>

<p>If the method, for example, POST, supports a body, the request
body is constructed using the document(s) appearing on the
<code class="port">source</code> port. For the convenience of pipeline authors,
documents may appear on the <code class="port">source</code> port even when the
request method (such as GET or HEAD) does not define the semantics of
a payload. If the semantics are undefined, the documents are
ignored when constructing the request unless the
<code class="option">parameters</code> option specifies
“<code class="literal">send-body-anyway</code>” as <code class="code">true()</code>.</p>

<p>The headers for the request come from the
<code class="option">headers</code> option (see below). If exactly one document
appears on the <code class="port">source</code> port, its document properties also
contribute to the overall request headers.</p>

<p>The response from the HTTP request appears on the
<code class="port">result</code> and <code class="port">report</code> ports. Any documents
contained in the response body will appear on the <code class="port">result</code>
port. Each document in the response will be parsed according to
its content-type (but see “<code class="literal">override-content-type</code>”
in the <code class="option">parameters</code> option).
Details about the outcome of the request will appear as a map on
the <code class="port">report</code> port. The map will always contain:
</p>

<div class="variablelist">



<dl><dt><span class="term"><code class="literal">status-code</code> (an <code class="code">xs:integer</code>)</span></dt><dd>
    <p>This is the HTTP status code returned for the request.</p>
  </dd><dt><span class="term"><code class="literal">base-uri</code> (an <code class="code">xs:anyURI</code>)</span></dt><dd>
    <p>This is the URI of the last request made and is always
    available in the report even when the request does not return any
    documents. In the case of HTTP redirection, the base URI returned
    may be different from the original request URI.
    </p>
  </dd><dt><span class="term"><code class="literal">headers</code> (a <code class="code">map(xs:string, xs:string)</code>)</span></dt><dd>
    <p>These are the HTTP headers returned for the request. The map may be
empty. Header names are converted to lowercase.</p>
  </dd></dl></div>

<p>The <code class="tag-element">p:http-request</code> step has the following options:</p>
<div class="variablelist">






    
  <dl><dt><span class="term"><code class="option">href</code></span></dt><dd>
  <p>The <code class="option">href</code> option specifies the request’s IRI.
  Relative values are resolved against the base URI of the element on
  which the option is specified (the relevant <code class="tag-element">p:with-option</code>
  or the step element in the case of a syntactic shortcut value).</p>

  <p>Fragment identifiers are removed before making the request.
  Query parameters are passed through unchanged.
  <a id="err.inline.C0128"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0128"><code class="errqname">err:XC0128</code></a>) if the
  URI’s scheme is unknown or not supported. It is the pipeline
  author’s responsibility to escape problematic UTF-8 characters in the
  <code class="option">href</code> value, for example with <code class="function">escape-html-uri()</code>.
  </p>
</dd><dt><span class="term"><code class="option">method</code></span></dt><dd>
  <p>The <code class="option">method</code> specifies the HTTP request method.
  The value is implicitly turned into an uppercase string if
  necessary. <span id="impl-37">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>
  which HTTP methods are supported.</span> An implementation
  <span class="rfc2119" id="c.http-request.10.2.2.1.3">should</span> implement at least the methods
  <code class="literal">GET</code>, <code class="literal">POST</code>,
  <code class="literal">PUT</code>, <code class="literal">DELETE</code>, and
  <code class="literal">HEAD</code> (for HTTP and HTTPS).
  <a id="err.inline.C0122"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0122"><code class="errqname">err:XC0122</code></a>) if
  the given method is not supported.</p>
</dd><dt><span class="term"><code class="option">serialization</code></span></dt><dd>
  <p>The <code class="option">serialization</code> option is used to control
  the serialization of documents for the request body. If a document
  has a “<code class="literal">serialization</code>” document property, the
  effective value of the serialization options is the union of the two
  maps, where the entries in the “<code class="literal">serialization</code>”
  document property take precedence.</p>
</dd><dt><span class="term"><code class="option">headers</code></span></dt><dd>
  <p>The key/value pairs in the <code class="option">headers</code> map are
  used to construct the request headers. Each map key is used as a
  header name and the value associated with that key in the map is
  used as the header value.</p>

  <p>If a single document appears on the <code class="port">source</code> port,
  then document properties on that document may be added as additional
  headers. For XML, HTML, and text documents with a 
  <code class="literal">serialization</code> document property having an 
    <code class="literal">encoding</code> key, a <code class="literal">charset</code> is
    appended to the created <code class="literal">content-type</code> header of
    the HTTP request.
  Properties in the <code class="code">http://www.w3.org/ns/xproc-http</code>
  namespace will be added to the headers, using the local-name of the
  property QName as the header name. These properties are only copied
  if they are not specified in the <code class="option">header</code> map. In
  other words, if the same header name appears in both places, the
  value from the map is used and the value from the document
  properties is ignored. (Header names are case-insensitive, so a case-insensitive
  comparison must be performed.) If multiple documents appear on the
  <code class="port">source</code> port, none of their properties are used in the
  request headers.</p>

  <p>The behavior of the <code class="tag-element">p:http-request</code> depends on the
  headers specified. In particular:</p>

  <div class="variablelist">
  
  
  
  <dl><dt><span class="term"><code class="literal">content-type</code></span></dt><dd>
      <p>If a <code class="literal">content-type</code> header is provided,
      it will be used. For a single document request, this overrides
      the content type value of the document. If the content type
      specified begins with “<code class="literal">multipart/</code>”, a
      multipart request will be sent to the server.</p>
      <p><a id="err.inline.D0079.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
        a valid media type of the form 
        “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
        or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.</p>
    </dd><dt><span class="term"><code class="literal">transfer-encoding</code></span></dt><dd>
      <p>If a <code class="literal">transfer-encoding</code> header is provided,
      the request <span class="rfc2119" id="c.http-request.10.4.2.4.2.2.1.2">must</span> be sent with that encoding.
      <a id="err.inline.C0131"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0131"><code class="errqname">err:XC0131</code></a>) if
      the processor cannot support the requested encoding.</p>
    </dd><dt><span class="term"><code class="literal">authorization</code></span></dt><dd>
      <p>The <code class="literal">authorization</code> header is used to
      authenticate a request. If the <code class="option">auth</code>
      <em>option</em> is specified, any key or property
      that would have contributed a header named
      “<code class="literal">authorization</code>” (irrespective of case) is
      ignored. The authorization header is determined exclusively by
      the <code class="option">auth</code> option when it is present.</p>
    </dd></dl></div>

  <p>HTTP headers are case-insensitive but keys in maps are not;
  be careful when specifying the request headers.
  <a id="err.inline.C0127"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0127"><code class="errqname">err:XC0127</code></a>) if
  the <code class="option">headers</code> map contains two keys that are the same
  when compared in a case-insensitive manner.
  (That is, when <code class="code">fn:uppercase($key1) = fn:uppercase($key2)</code>.)
  </p>
</dd><dt><span class="term"><code class="option">auth</code></span></dt><dd>
  <p>Many web services are only available to authenticated users,
  that is, to users who have “logged in”. The <code class="option">auth</code>
  option allows the pipeline author to specify information that may be
  required to generate an “<code class="literal">Authorization</code>” header.
  The standard values support HTTP “Basic” and “Digest”
  authentication, but other authentication methods are allowed.</p>

  <p>The following standard keys are defined:</p>

  <div class="variablelist">
  
  
  
  
  <dl><dt><span class="term"><code class="literal">username</code> (<code class="code">xs:string</code>)</span></dt><dd>
  <p>The username.</p>
  </dd><dt><span class="term"><code class="literal">password</code> (<code class="code">xs:string</code>)</span></dt><dd>
  <p>The password associated with the username.</p>
  </dd><dt><span class="term"><code class="literal">auth-method</code> (<code class="code">xs:string</code>)</span></dt><dd>
  <p>The authentication method. Appropriate values for the
  “<code class="literal">auth-method</code>” key are “<code class="literal">Basic</code>”
  or “<code class="literal">Digest</code>” but other values are allowed. If the
  authentication method is “<code class="literal">Basic</code>” or
  “<code class="literal">Digest</code>”, authentication is handled as per
  [<a href="#rfc2617"><span class="abbrev">RFC 2617</span></a>]. <span id="impl-38">The interpretation of values
  associated with the “<code class="literal">auth-method</code>” key other than
  “<code class="literal">Basic</code>” or “<code class="literal">Digest</code>” is
  <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>.</span></p>
  </dd><dt><span class="term"><code class="literal">send-authorization</code> (<code class="code">xs:boolean</code>)</span></dt><dd>
  <p>The “<code class="literal">send-authorization</code>” key can be used to
  attempt to allow the request to avoid an authentication challenge.
  If the “<code class="literal">send-authorization</code>” key is
  “<code class="literal">true()</code>”, and the authentication method specified
  by the value associated with the “<code class="literal">auth-method</code>”
  key supports generation of an “<code class="literal">Authorization</code>”
  header without a challenge, then the header is generated and sent on
  the first request. If the “<code class="literal">send-authorization</code>”
  key is absent or does not have the value “<code class="literal">true</code>”,
  the first request is sent without an
  “<code class="literal">Authorization</code>” header.</p>
  </dd></dl></div>

  <p><span id="impl-39">Other key value pairs in map “<code class="literal">auth</code>”
  are <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>.</span> <a id="err.inline.C0123"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0123"><code class="errqname">err:XC0123</code></a>) if any key
  in the “<code class="literal">auth</code>” map is associated with a value that
  is not an instance of the required type.</p>

  <p>If the initial response to the request is an authentication
  challenge, the values provided in the <code class="literal">auth</code> map
  and any relevant data from the challenge are used to generate an
  “<code class="literal">Authorization</code>” header and the request is sent
  again. If that authorization fails, the request is not
  retried.</p>

  <p><a id="err.inline.C0003"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
  error</a></em> (<a href="#err.C0003"><code class="errqname">err:XC0003</code></a>) if a “<code class="literal">username</code>” or a
  “<code class="literal">password</code>” key is present without specifying a
  value for the “<code class="literal">auth-method</code>” key, if the requested
  <code class="literal">auth-method</code> isn't supported, or the
  authentication challenge contains an authentication method that
  isn't supported. All implementations <span class="rfc2119" id="c.http-request.10.5.2.6.2">must</span>
  support “Basic” and “Digest” authentication per [<a href="#rfc2617"><span class="abbrev">RFC 2617</span></a>].</p>

</dd><dt><span class="term">parameters</span></dt><dd>
    <p>The <code class="option">parameter</code> option can be used to provide
    values for fine tuning the construction of the request and/or
    handling of the server response. A number of parameters are
    defined in this specification. <span id="impl-40">It is
    <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em> which other
    key/value pairs in the <code class="option">parameters</code> option are
    supported.</span></p>

    <div class="variablelist">
      
      
      
      
      
      
      
      
      
      
      
      
        <dl><dt><span class="term">override-content-type (<code class="code">xs:string</code>)</span></dt><dd>
      <p>Ordinarily, the value of the
      <code class="literal">content-type</code> header provided in the server
      response controls the interpretation of any body in the
      response. If the “<code class="literal">override-content-type</code>”
      parameter is provided, then its value is used to interpret the
      body. The content-type header that appears on the
        <code class="port">report</code> port is not changed. 
        <a id="err.inline.D0079.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
          a valid media type of the form 
          “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
          or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”. <a id="err.inline.C0030"/>It
      is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0030"><code class="errqname">err:XC0030</code></a>) if the response body cannot
      be interpreted as requested (e.g. <code class="literal">application/json</code>
      to override <code class="literal">application/xml</code> content).</p>
      </dd><dt><span class="term">http-version (<code class="code">xs:string</code>)</span></dt><dd>
        <p>The <code class="literal">http-version</code> parameter indicates
        which version of HTTP <span class="rfc2119" id="c.http-request.10.6.2.2.2.2.1.2">must</span> be used for the request.</p>
      </dd><dt><span class="term">accept-multipart (<code class="code">xs:boolean</code>)</span></dt><dd>
        <p>If the <code class="literal">accept-multipart</code> parameter is
        present and explicitly has the value <code class="code">false()</code>, a
        dynamic error will be raised, if a multipart response is
        received from the server. This feature is a convenience for
        pipeline authors as it will raise an error when the multipart
        request is received, rather than having the presence of a
        sequence raise an error further along in the pipeline, or
        simply producing anomalous results. <a id="err.inline.C0125"/>It is
        a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0125"><code class="errqname">err:XC0125</code></a>) if the key
        “<code class="literal">accept-multipart</code>” as the value
        <code class="code">false()</code> and a multipart response is
        detected.</p>
      </dd><dt><span class="term">override-content-encoding (<code class="code">xs:string</code>)</span></dt><dd>
          <p>If the “<code class="literal">override-content-encoding</code>”
          parameter is present, the response will be treated as if the
          response contained a “<code class="literal">content-encoding</code>”
          header with the specified value. The content-encoding header
          that appears on the <code class="port">report</code> port is not changed.
          <a id="err.inline.C0132"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0132"><code class="errqname">err:XC0132</code></a>) if
          the override content encoding cannot be supported.
          </p>
        </dd><dt><span class="term">permit-expired-ssl-certificate (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If “<code class="literal">permit-expired-ssl-certificate</code>” is true, then the processor
          should not reject responses where the server provides an expired SSL certificate.</p>
        </dd><dt><span class="term">permit-untrusted-ssl-certificate (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If “<code class="literal">permit-untrusted-ssl-certificate</code>” is true, then the
          processor should not reject response where the server provides an SSL certificate which
          is not trusted, for example, because the certificate authority (CA) is unknown.</p>
        </dd><dt><span class="term">follow-redirect (<code class="code">xs:integer</code>)</span></dt><dd>
          <p>The “<code class="literal">follow-redirect</code>” parameter
          allows the pipeline author to specify the step’s behaviour in the case of a redirect
          response. A value of <code class="literal">0</code> indicates that redirects are not to be followed, 
          <code class="literal">-1</code> indicates that redirects are to be followed indefinitely, and a
          specific number indicates the maximum number of redirects to follow. <span id="impl-41">The default
          behaviour in case of a redirect response is <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>.</span>
          </p>
        </dd><dt><span class="term">timeout (<code class="code">xs:integer</code>)</span></dt><dd>
          <p>If a “<code class="literal">timeout</code>” is specified, it
          <span class="rfc2119" id="c.http-request.10.6.2.2.8.2.1.2">must</span> be a non-negative integer. It
          controls the time the XProc processor waits for the request
          to be answered. If a value is given, it is taken as the
          number of seconds to wait for the response to be delivered.
          If no response is received after that time, the request is
          terminated and a status-code <code class="literal">408</code> is
          assumed.</p>
        </dd><dt><span class="term">fail-on-timeout (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If “<code class="literal">fail-on-timeout</code>” is true, a
          dynamic error is raised if a <code class="literal">408</code> response
          is received (either as a consequence of setting a value for
          the “<code class="literal">timeout</code>” parameter or as status code
          returned by a server). <a id="err.inline.C0078"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0078"><code class="errqname">err:XC0078</code></a>) if the value associated
          with the “<code class="literal">fail-on-timeout</code>” is associated
          with <code class="code">true()</code> and a HTTP status code
          <code class="literal">408</code> is encountered. If “<code class="literal">fail-on-timeout</code>”
          is true, it prevents any dynamic error with code <code class="literal">C0126</code> resulting
          from the <code class="option">assert</code> option to be raised for request's timeout.</p>
          <div class="note admonition"><h3>Note</h3><div class="admonition-body">
            
            <p>Please note that the “<code class="literal">fail-on-timeout</code>” parameter
            is different from the “<code class="literal">timeout</code>” option on the
            <code class="tag-element">p:http-request</code> step (see <cite><a href="../xproc/#timeout">Controlling long running steps</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>).
            If the <em>step</em> does not finish in the specified time,
            <code class="code">D0053</code> is raised. If the <em>request</em> does not finish in time,
            and <code class="literal">fail-on-timeout</code> is true,
            <code class="code">C0078</code> is raised. The actual
            times after which a timeout is detected may also differ slightly.
            </p>
          </div></div>
        </dd><dt><span class="term">status-only (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If the “<code class="literal">status-only</code>” parameter is
          true, this indicates that the pipeline author is only
          interested in the response code. An empty sequence is always
          returned on the <code class="port">result</code> port in this case. The
          implementation may save resources by ignoring the response
          body. The map on the <code class="port">report</code> will contain the
          status code and an empty map for
          “<code class="literal">headers</code>”.</p>
        </dd><dt><span class="term">suppress-cookies (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If the “<code class="literal">suppress-cookies</code>” parameter is true,
          the implementation <span class="rfc2119" id="c.http-request.10.6.2.2.11.2.1.2">must not</span> send any cookies with the request.</p>
        </dd><dt><span class="term">send-body-anyway (<code class="code">xs:boolean</code>)</span></dt><dd>
          <p>If the “<code class="literal">send-body-anyway</code>” parameter
          is true, and one or more documents appear on the
          <code class="port">source</code> port, a request body is constructed from
          the documents and sent with the request, even if the
          semantics of sending a body are not specified for the HTTP method in use.
          </p>
            </dd></dl></div>
        <p><a id="err.inline.C0124"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
        error</a></em> (<a href="#err.C0124"><code class="errqname">err:XC0124</code></a>) if any key in the “parameters” map is
        associated with a value that is not an instance of the
        required type.</p>
      </dd><dt><span class="term">assert (<code class="code">xs:string</code>)</span></dt><dd>
        <p>The <code class="option">assert</code> option can be used by
        pipeline authors to raise a dynamic error if the response does
        not fulfill the expectations of the receiver. The option's
        value (if present) is interpreted as an XPath expression which
        will be executed using the map that appears on the
        <code class="port">report</code> port as its context item. If the effective
        boolean value of the expression is <code class="code">false()</code>, a
        dynamic error is raised. <a id="err.inline.C0126"/>It is a
        <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0126"><code class="errqname">err:XC0126</code></a>) if the XPath expression
        in <code class="option">assert</code> evaluates to
        <code class="code">false</code>. Implementations
        <span class="rfc2119" id="c.http-request.10.7.2.1.5">should</span> provide an XML representation of the
        map used as the context item with the error document to enable
        pipelines to access the error's cause.</p>
      </dd></dl></div>

<section id="c.http-multipart-request" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.13.1. </bdi>Construction of a multipart request<a aria-label="§" class="self-link" href="#c.http-multipart-request"/></h4></div><div class="content">


<p>If more than one document appears on the <code class="port">source</code>
port, or if the specified “<code class="literal">content-type</code>” header
begins “<code class="literal">multipart/</code>”, a multipart request will be
constructed, per [<a href="#rfc1521"><span class="abbrev">RFC 1521</span></a>]. The content type of
the request is derived from the “<code class="literal">content-type</code>”
header:</p>

<div class="itemizedlist">



<ul><li>
<p>If the “<code class="literal">content-type</code>” header specifies a
multipart content type, that value will be used as the content type. If the
header includes a <code class="literal">boundary</code> parameter, that value
will be used as the boundary.
<a id="err.inline.C0203"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0203"><code class="errqname">err:XC0203</code></a>)
if the specified boundary is not valid (for example, if it begins with two hyphens “--”).
</p>
</li><li>
<p>If the “<code class="literal">content-type</code>” header is not specified,
“<code class="literal">multipart/mixed</code>” will be used.</p>
</li><li>
<p><a id="err.inline.C0133"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0133"><code class="errqname">err:XC0133</code></a>)
if more than one document appears on the <code class="port">source</code> port and
a <code class="literal">content-type</code> header is present and the content
type specified is not a multipart content type.
</p>
</li></ul></div>

<p>A multipart request must have a boundary marker, if one isn’t
specified in the content type, the implementation
<span class="rfc2119" id="c.http-multipart-request.4.1">must</span> construct one. <span id="impl-42">It is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> how a multipart boundary
is constructed.</span> Implementations <em>are not</em>
required to guarantee that the constructed value does not appear
accidentally in the multipart data. If it does, the request will be
malformed; pipeline authors must provide a boundary if they wish to
assure that this cannot happen.</p>

<p>Each document in the sequence is serialized. If the document has
a “<code class="literal">serialization</code>” document property, its values
are used to determine how serialization is performed.</p>

<p>All of the document properties in the
<code class="code">http://www.w3.org/ns/xproc-http</code> namespace will be added
as headers for the part, using the local-name of the property QName as
the header name. In particular, this is how the
“<code class="literal">id</code>”, “<code class="literal">description</code>”,
“<code class="literal">disposition</code>” and other multipart headers can be
provided.</p>
</div></section>

<section id="c.http-multipart-response" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.13.2. </bdi>Managing a multipart response<a aria-label="§" class="self-link" href="#c.http-multipart-response"/></h4></div><div class="content">


<p>When a multipart response is received, each part is interpreted
according to it’s content type and a pipeline document is constructed.
Any additional headers associated with the part are added to the
document properties of the constructed document.</p>

<p>The multipart response is the resulting sequence of documents.</p>

</div></section>
  
<section id="c.http-request.13" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.identity" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.14. </bdi>p:identity<a aria-label="§" class="self-link" href="#c.identity"/></h3></div><div class="content">


<p>The <code class="code">p:identity</code> step makes a verbatim copy of its input
available on its output.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:identity</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>If the implementation supports passing PSVI annotations between
steps, the <code class="tag-element">p:identity</code> step <span class="rfc2119" id="c.identity.4.2">must</span> preserve
any annotations that appear in the input.</p>

<section id="c.identity.5" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.insert" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.15. </bdi>p:insert<a aria-label="§" class="self-link" href="#c.insert"/></h3></div><div class="content">


<p>The <code class="code">p:insert</code> step inserts the
<code class="code">insertion</code> port's document into the <code class="port">source</code>
port's document relative to the matching elements in the
<code class="code">source</code> port's document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:insert</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">insertion</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">position</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('first-child','last-child','before','after')</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'after'</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option
<span class="rfc2119" id="c.insert.4.2">must</span> be an XSLTSelectionPattern. <a id="err.inline.C0023.2"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if that pattern matches
an attribute or a namespace node.
Multiple matches are
allowed, in which case multiple copies of the <code class="port">insertion</code>
documents will occur. If no elements match, then the document is
unchanged.</p>

<p>The value of the <code class="option">position</code> option <span class="rfc2119" id="c.insert.5.2">must</span> be an NMTOKEN in
the following list:
</p>

<div class="itemizedlist">




<ul><li>
<p>“<code class="literal">first-child</code>” - the insertion is made as the first child of the match;</p>
</li><li>
<p>“<code class="literal">last-child</code>” - the insertion is made as the last child of the match;</p>
</li><li>
<p>“<code class="literal">before</code>” - the insertion is made as the immediate preceding sibling of the match;</p>
</li><li>
<p>“<code class="literal">after</code>” - the insertion is made as the immediate following sibling of the match.</p>
</li></ul></div>

<p><a id="err.inline.C0025"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0025"><code class="errqname">err:XC0025</code></a>)
if the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> matches anything other than an element or a document
node and the value of the <code class="option">position</code> option is
“<code class="literal">first-child</code>” or
“<code class="literal">last-child</code>”. <a id="err.inline.C0024"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0024"><code class="errqname">err:XC0024</code></a>) if the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> matches a document
node and the value of the <code class="option">position</code> is “<code class="literal">before</code>” or
“<code class="literal">after</code>”.</p>

<p>As the inserted elements are part of the output of the step they
are not considered in determining matching elements. If an empty sequence
appears on the <code class="port">insertion</code> port, the result will be the same
as the source.</p>

<section id="c.insert.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties on the
<code class="port">source</code> port are preserved. The document properties on the
<code class="port">insertion</code> port are not preserved or present in the result document.</p>
</div></section>
</div></section>
<section id="c.json-join" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.16. </bdi>p:json-join<a aria-label="§" class="self-link" href="#c.json-join"/></h3></div><div class="content">


<p>The <code class="code">p:json-join</code> step joins the sequence of documents on port <code class="port">source</code>
into a single JSON document (an array) appearing on port <code class="port">result</code>. If the sequence on
port <code class="code">source</code> is empty, the empty sequence is returned on
port <code class="code">result</code>.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:json-join</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">flatten-to-depth</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'0'</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The step inspects the documents on port <code class="port">source</code> in turn to create the
  resulting array:</p>
<div class="itemizedlist">
  
  
  
<ul><li>
    <p>If the document under inspection is a JSON document representing an array, the array is copied 
     to the resulting array according to the setting of option <code class="option">flatten-to-depth</code>.</p>
  </li><li>
    <p>For every other type of JSON document, for XML documents, HTML documents, or text
    documents, their XDM representation is appended to the resulting array.</p>
  </li><li>
    <p><span id="impl-43">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em> if <code class="code">p:json-join</code> is
      able to process document types not mentioned yet, i.e. types of binary documents.</span> If a processor
      supports a given type of documents, an entry is created as described above. <a id="err.inline.C0111"/>
        It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0111"><code class="errqname">err:XC0111</code></a>) if a document of an unsupported document type appears on 
        port <code class="port">source</code> of <code class="code">p:json-join</code>.
    </p>  </li></ul></div>
  
<p>The option <code class="option">flatten-to-depth</code> controls whether and to which
depth members of an array appearing on port <code class="port">source</code> are flattened.
<a id="err.inline.C0119"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0119"><code class="errqname">err:XC0119</code></a>) if <code class="option">flatten</code> is
neither “<code class="literal">unbounded</code>”, nor a string that may be cast to a non-negative integer.
An integer value of <code class="literal">0</code>, which is the default, means that no 
flattening takes place, so the array appearing on port <code class="port">source</code> will
be contained as an array in the resulting array. An integer value of <code class="literal">1</code>
means that an array on port <code class="port">source</code> is flattened, i.e. the members
of that array will appear as individual members in the resulting array. Any value greater
than <code class="literal">1</code> means that the flattening is applied recursively to arrays in
arrays up to the given depth. A value of “<code class="literal">unbounded</code>” means that all
arrays in arrays will be flattened. As a consequence, the resulting array appearing on
port <code class="port">result</code> will not have any arrays as members. </p>


<section id="c.json-join.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
  
  <p>No document properties are preserved.
The joined document has no <code class="property">base-uri</code>.
</p>
</div></section>
</div></section>
<section id="c.json-merge" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.17. </bdi>p:json-merge<a aria-label="§" class="self-link" href="#c.json-merge"/></h3></div><div class="content">


<p>The <code class="tag-element">p:json-merge</code> step merges the sequence of appearing
on port <code class="port">source</code> into a single JSON object appearing on port
<code class="port">result</code>. If the sequence on
port <code class="port">source</code> is empty, the empty sequence is returned on
port <code class="port">result</code>.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:json-merge</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">duplicates</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('reject', 'use-first', 'use-last', 'use-any', 'combine')</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'use-first'</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">key</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'concat("_",$p:index)'</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The step inspects the documents on port <code class="port">source</code> in turn to create the resulting
  map:</p>
<div class="itemizedlist">
  
  
  
<ul><li>
    <p>If the document under inspection is a JSON document representing a map,
    all key-value pairs are copied into the result map unless this map already contains
    an entry with the given key. In this case the value of option <code class="option">duplicates</code>
    determines the policy for handling duplicate keys as specified for function <code class="code">map:merge</code>
      in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>].  
      <a id="err.inline.C0106"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0106"><code class="errqname">err:XC0106</code></a>) if duplicate keys are encountered and 
      option <code class="option">duplicates</code> has value “<code class="literal">reject</code>”.</p>
  </li><li>
    <p>For every other type of JSON document, for XML documents, HTML documents, or text documents a
    new key-value pair is created and put into the resulting map. The key is created by evaluating
    the XPath expression in option <code class="option">key</code> with the inspected document as context item. If the
      evaluation result is a single atomic value, it is taken as key. If the evaluation result is a node, its
      string value is taken as key. <a id="err.inline.C0110"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0110"><code class="errqname">err:XC0110</code></a>) if the
      evaluation of the XPath expression in option <code class="option">key</code> for a given item returns either a
      sequence, an array, a map, or a function. Duplicate
    keys are handled as described above. The XDM representation of the inspected document is taken as value of
    the key-value pair.</p>
  </li><li>
    <p><span id="impl-44">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em> if <code class="code">p:json-merge</code> is
    able to process document types not mentioned yet, i.e. types of binary documents.</span> If a processor
    supports a given type of documents, the key-value pair is created as described above. <a id="err.inline.C0107"/>
    It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0107"><code class="errqname">err:XC0107</code></a>) if a document of a not supported document type appears on 
      port <code class="port">source</code> of <code class="code">p:json-merge</code>.
    </p>
  </li></ul></div> 
  <p>An implementation must bind the variable “<code class="code">p:index</code>” in the static context of 
    each evaluation of the XPath expression to the position of the document in the sequence 
    of documents on port <code class="port">source</code>, starting with “<code class="literal">1</code>”.
    </p>
  <section id="c.json-merge.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved.
The merged document has no <code class="property">base-uri</code>.
</p>
  </div></section>
</div></section>
<section id="c.label-elements" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.18. </bdi>p:label-elements<a aria-label="§" class="self-link" href="#c.label-elements"/></h3></div><div class="content">


<p>The <code class="code">p:label-elements</code> step generates a label for each matched
element and stores that label in the specified attribute.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:label-elements</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">attribute</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'xml:id'</code><code>"</code><code>/&gt;</code><code>  </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">label</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'concat("_",$p:index)'</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'*'</code><code>"</code><code>/&gt;</code><code>          </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">replace</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code>    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">label</code> option is an XPath
expression used to generate the value of the attribute label.</p>

<p>The value of the <code class="option">match</code> option
<span class="rfc2119" id="c.label-elements.5.2">must</span> be an XSLTSelectionPattern. <a id="err.inline.C0023.3"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if that expression matches
anything other than element nodes.</p>

<p>The value of the <code class="option">replace</code>
<span class="rfc2119" id="c.label-elements.6.2">must</span> be a boolean value and is used to indicate
whether existing attribute values are replaced.</p>

<p>This step operates by generating attribute labels for each
element matched. For every matched element, the expression is
evaluated with the context node set to the matched element. An
attribute is added to the matched element using the attribute name is
specified the <code class="option">attribute</code> option and the string value
of result of evaluating the expression. If the attribute already
exists on the matched element, the value is replaced with the string
value only if the <code class="option">replace</code> option has the value of
<code class="literal">true</code>.</p>

<p>If this step is used to add or change the value
of an attribute named “<code class="literal">xml:base</code>”, the base URI
of the element <span class="rfc2119" id="c.label-elements.8.2">must</span> also be amended accordingly.</p>

<p>An implementation must bind the variable
“<code class="literal">p:index</code>” in the static context of each evaluation
of the XPath expression to the position of the element in the sequence
of matched elements. In other words, the first element (in document
order) matched gets the value “<code class="literal">1</code>”, the second gets
the value “<code class="literal">2</code>”, the third, “<code class="literal">3</code>”,
etc.</p>

<p>The result of the p:label-elements step is the input document with the
attribute labels associated with matched elements.  All other non-matching content
remains the same.</p>

<section id="c.label-elements.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.load" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.19. </bdi>p:load<a aria-label="§" class="self-link" href="#c.load"/></h3></div><div class="content">


<p>The <code class="code">p:load</code> step has no inputs but produces as its
result a document specified by an IRI.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:load</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">content-type</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>               </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">document-properties</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>If the option is relative, it
    is made absolute against the base URI of the element on which it is specified
      (<code class="tag-element">p:with-option</code> or the step in case of a syntactic shortcut value). If the
      <code class="option">href</code> is relative, it is made absolute against the base URI of the element on
    which it is specified (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:load</code> in the case of a syntactic
    shortcut value). <a id="err.inline.D0064.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>

<p>The document identified by the
<code class="option">href</code> URI is loaded and returned. If the URI protocol
supports redirection, then redirects <span class="rfc2119" id="c.load.5.2">must</span> be
followed.</p>

<p><a id="err.inline.D0011.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>)
if the resource referenced by a <code class="code">p:load</code> element does not exist
or cannot be accessed.</p>

<p>The behavior of this step depends on the content type of the
document loaded. The content type of a document is
determined as follows:</p>

<div class="orderedlist">



<ol style="list-style: decimal;"><li>
<p>If a <code class="property">content-type</code> property is specified
in <code class="option">document-properties</code> or <code class="option">content-type</code> is present,
then the document <span class="rfc2119" id="c.load.8.1.1.4">must</span> be interpreted according to
that content type.
  <a id="err.inline.D0079.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
    a valid media type of the form 
    “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
    or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”. 
<a id="err.inline.D0062"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0062"><code class="errqname">err:XD0062</code></a>)
if the <code class="tag-attribute">content-type</code> is specified and the
document-properties has a “<code class="code">content-type</code>” that is not the
same.
</p>
</li><li>
<p>If the document is retrieved with a URI protocol that specifies
a content type (for example, <code class="literal">http:</code>), then the document
<span class="rfc2119" id="c.load.8.2.1.2">must</span> be interpreted according to that content type.
</p>
</li><li>
<p><span id="impl-45">In the absence of an explicit type, the content
type is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></span>.</p>
</li></ol></div>

<p>The <code class="option">parameters</code> map contains additional, optional
parameters that may influence the way that content is loaded. The interpretation
of this map varies according to the content type. Parameter names that are in
no namespace are treated as strings using only the local-name where appropriate.</p>

<p>Broadly speaking, there are five categories of data that might
be loaded:
<a href="#c.load.xml">XML</a>,
<a href="#c.load.text">text</a>,
<a href="#c.load.json">JSON</a>,
<a href="#c.load.html">HTML</a>,
and “other”
<a href="#c.load.binary">binary</a> data.</p>

<section id="c.load.xml" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.19.1. </bdi>Loading XML data<a aria-label="§" class="self-link" href="#c.load.xml"/></h4></div><div class="content">


<p>For an XML media type, the content is loaded and parsed as XML.</p>

<p><a id="err.inline.D0049.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0049"><code class="errqname">err:XD0049</code></a>) if
the loaded content is not a well-formed XML document.</p>

<p>If the <code class="option">dtd-validate</code> parameter is <code class="literal">true</code>,
then DTD validation must be performed when parsing the document.
<a id="err.inline.D0023"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0023"><code class="errqname">err:XD0023</code></a>) if a DTD validation
is performed and either the document is not valid or no DTD is found.
<a id="err.inline.D0043"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0043"><code class="errqname">err:XD0043</code></a>)
if the <code class="option">dtd-validate</code> parameter is <code class="literal">true</code> and
the processor does not support DTD validation.</p>

<p><span id="impl-46">Additional XML parameters are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span></p>
</div></section>

<section id="c.load.text" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.19.2. </bdi>Loading text data<a aria-label="§" class="self-link" href="#c.load.text"/></h4></div><div class="content">

<p>For a text media type, the content is loaded as a text document. (A text
document is an XPath data model document consisting of a single text node.)</p>

<p><a id="err.inline.D0060.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0060"><code class="errqname">err:XD0060</code></a>) if the
<code class="option">content-type</code> specifies an encoding, which is not supported
by the processor.</p>

<p><span id="impl-47">Text parameters are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span></p>

</div></section>

<section id="c.load.json" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.19.3. </bdi>Loading JSON data<a aria-label="§" class="self-link" href="#c.load.json"/></h4></div><div class="content">


<p>For a JSON media type, the content is loaded and parsed as JSON.</p>

<p>The parameters specified for the <code class="code">fn:parse-json</code> function
in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>]
<span class="rfc2119" id="c.load.json.3.3">must</span> be supported.
<span id="impl-48">Additional JSON parameters are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span></p>
<p><a id="err.inline.D0057.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0057"><code class="errqname">err:XD0057</code></a>) if the loaded content
does not conform to the JSON grammar, unless the parameter <code class="option">liberal</code> is
<code class="literal">true</code> and the processor chooses to accept the deviation.</p>

<p><a id="err.inline.D0058.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0058"><code class="errqname">err:XD0058</code></a>) if the parameter
<code class="option">duplicates</code> is <code class="literal">reject</code> and the value of
loaded content contains a JSON object with duplicate keys.</p>

<p><a id="err.inline.D0059.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0059"><code class="errqname">err:XD0059</code></a>) if the parameter
map contains an entry whose key is defined in the specification of
<code class="code">fn:parse-json</code> and whose value is not valid for that key, or if it contains
an entry with the key fallback when the parameter <code class="option">escape</code> with
<code class="literal">true()</code> is also present.</p>
</div></section>

<section id="c.load.html" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.19.4. </bdi>Loading HTML data<a aria-label="§" class="self-link" href="#c.load.html"/></h4></div><div class="content">


<p>For an HTML media type, the content is loaded and parsed into an
XPath data model
document that contains a tree of elements, attributes, and other nodes.</p>

<p><span id="impl-49">The precise way in which HTML documents are parsed into the
XPath data model is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>

<p><a id="err.inline.D0078"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0078"><code class="errqname">err:XD0078</code></a>)
if the loaded document cannot be represented as an HTML document in
the XPath data model.</p>

<p><span id="impl-50">HTML parameters are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span></p>
</div></section>

<section id="c.load.binary" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.19.5. </bdi>Loading binary data<a aria-label="§" class="self-link" href="#c.load.binary"/></h4></div><div class="content">


<p>An XProc processor may load other, arbitrary data types. <span id="impl-51">How a
processor interprets other media types is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span>
</p>

<p><span id="impl-52">Parameters for other media types
are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span></p>
</div></section>

<section id="c.load.16" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>The properties specified in <code class="option">document-properties</code> are applied.
If the properties do not specify a <code class="property">base-uri</code>, the 
<code class="property">base-uri</code> property will reflect the base URI of the loaded document.
</p>
</div></section>
</div></section>
<section id="c.make-absolute-uris" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.20. </bdi>p:make-absolute-uris<a aria-label="§" class="self-link" href="#c.make-absolute-uris"/></h3></div><div class="content">


<p>The <code class="code">p:make-absolute-uris</code> step makes an element or
attribute's value in the source document an absolute IRI value in the
result document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:make-absolute-uris</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">base-uri</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                   </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option <span class="rfc2119" id="c.make-absolute-uris.4.2">must</span> be an
XSLTSelectionPattern.
<a id="err.inline.C0023.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if
the pattern matches anything other than element or attribute
nodes.</p>

<p>The value of the <code class="option">base-uri</code> option
<span class="rfc2119" id="c.make-absolute-uris.5.2">must</span> be an <code class="type">anyURI</code>. It is interpreted
as an IRI reference. If it is relative, it is made absolute against
the base URI of the element on which it is specified
(<code class="tag-element">p:with-option</code> or <code class="tag-element">p:make-absolute-uris</code> in the case of
  a syntactic shortcut value). <a id="err.inline.D0064.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
    error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>

<p>For every element or attribute in the input document which
matches the specified pattern, its XPath string-value is resolved
against the specified base URI and the resulting absolute IRI is used
as the matched node's entire contents in the output.</p>

<p>The base URI used for resolution defaults to the matched
attribute's element or the matched element's base URI unless the
<code class="option">base-uri</code> option is specified. When the
<code class="option">base-uri</code> option is specified, the option value is
used as the base URI regardless of any contextual base URI value in
the document. This option value is resolved against the base URI of
the <code class="tag-element">p:option</code> element used to set the option.</p>

<p><span id="impl-53">If the IRI reference specified by the <code class="option">base-uri</code> option
on <code class="tag-element">p:make-absolute-uris</code> is absent and the input document has no base URI,
the results are <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
</p>

<section id="c.make-absolute-uris.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.namespace-delete" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.21. </bdi>p:namespace-delete<a aria-label="§" class="self-link" href="#c.namespace-delete"/></h3></div><div class="content">


<p>The <code class="tag-element">p:namespace-delete</code> step deletes all of the namespaces identified by the specified 
      prefixes from the document appearing on port <code class="port">source</code>.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:namespace-delete</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">prefixes</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of option <code class="option">prefixes</code> is taken as a space separated list of
prefixes. <a id="err.inline.C0108"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0108"><code class="errqname">err:XC0108</code></a>) if any
prefix is not in-scope at the point where the <code class="code">p:namespace-delete</code> occurs.</p>

<p>For any prefix the associated namespace is removed from the elements and 
attributes in the document appearing on port <code class="port">source</code>. The respective
elements or attributes in the document appearing on port <code class="port">result</code> will be
in no namespace.</p>

<p><a id="err.inline.C0109"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0109"><code class="errqname">err:XC0109</code></a>) if
a namespace is to be removed from an attribute and the element already has an attribute
with the resulting name.</p>

<section id="c.namespace-delete.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.namespace-rename" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.22. </bdi>p:namespace-rename<a aria-label="§" class="self-link" href="#c.namespace-rename"/></h3></div><div class="content">


<p>The <code class="code">p:namespace-rename</code> step renames any namespace declaration or
use of a namespace in a document to a new IRI value.</p>

 <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:namespace-rename</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">from</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                       </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">to</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                         </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">apply-to</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'all'</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('all','elements','attributes')</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">from</code> option
<span class="rfc2119" id="c.namespace-rename.4.2">must</span> be an <code class="type">anyURI</code>. It
<span class="rfc2119" id="c.namespace-rename.4.4">should</span> be either empty or absolute, but will not be
resolved in any case.</p>

<p>The value of the <code class="option">to</code> option
<span class="rfc2119" id="c.namespace-rename.5.2">must</span> be an <code class="type">anyURI</code>. It
<span class="rfc2119" id="c.namespace-rename.5.4">should</span> be empty or absolute, but will not be
resolved in any case.</p>

<p>The value of the <code class="option">apply-to</code> option
<span class="rfc2119" id="c.namespace-rename.6.2">must</span> be one of “<code class="literal">all</code>”,
“<code class="literal">elements</code>”, or “<code class="literal">attributes</code>”.
If the value is “<code class="literal">elements</code>”, only elements will be
renamed, if the value is “<code class="literal">attributes</code>”, only attributes
will be renamed, if the value is “<code class="literal">all</code>”, both elements
and attributes will be renamed.</p>

<p><a id="err.inline.C0014"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0014"><code class="errqname">err:XC0014</code></a>)
if the XML namespace (<code class="uri">http://www.w3.org/XML/1998/namespace</code>)
or the
XMLNS namespace (<code class="uri">http://www.w3.org/2000/xmlns/</code>) is
the value of either the <code class="option">from</code> option or the
<code class="option">to</code> option.</p>

<p>If the value of the <code class="option">from</code> option is the same as
the value of the <code class="option">to</code> option, the input is reproduced
unchanged on the output. Otherwise, namespace bindings, namespace
attributes and element and attribute names are changed as
follows:</p>

<div class="itemizedlist">
  
  
  
 <ul><li>
   <p>Namespace bindings:  If the <code class="option">from</code> option is present
and its value is not the empty string,
then every binding of a prefix (or the default namespace) in the input
document whose value is the same as the value of the <code class="option">from</code>
option is</p>
   <div class="itemizedlist">
    
    
   <ul><li>
     <p>replaced in the output with a binding to the value of the <code class="option">to</code>
option, provided it is present and not the empty string;</p>
    </li><li>
     <p>otherwise (the <code class="option">to</code> option is
not specified or has an empty string as its value) absent from the output.</p>
    </li></ul></div>
   <p>If the <code class="option">from</code> option is absent, or its value is the empty string,
then no bindings are changed or removed.</p>
  </li><li>
   <p>Elements and attributes: If the <code class="option">from</code> option is present
and its value is not the empty string, for every element and attribute,
as appropriate, in the input whose namespace name is the same as the value of the
<code class="option">from</code> option, in the output its namespace name is</p>
   <div class="itemizedlist">
    
    
   <ul><li>
     <p>replaced with the value of the <code class="option">to</code>
option, provided it is present and not the empty string;</p>
    </li><li>
     <p>otherwise (the <code class="option">to</code> option is
not specified or has an empty string as its value) changed to have no value.</p>
    </li></ul></div>
   <p>If the <code class="option">from</code> option is absent, or its value
   is the empty string, then for every element and attribute, as appropriate,
   whose namespace name has no value, in the
   output its namespace name is set to the value of the
   <code class="option">to</code> option.</p>
      <p><a id="err.inline.C0092"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0092"><code class="errqname">err:XC0092</code></a>)
          if as a consequence of changing or removing the namespace of an attribute
          the attribute's name is not unique on the respective element.</p>
  </li><li>
   <p>Namespace attributes:  If the <code class="option">from</code> option is present
and its value is not the empty string, for every namespace attribute in the
input whose value is the same as the value of the <code class="option">from</code> option, in the output</p>
   <div class="itemizedlist">
    
    
   <ul><li>
     <p>the namespace attribute's value is replaced with the value of the <code class="option">to</code>
option, provided it is present and not the empty string;</p>
    </li><li>
     <p>otherwise (the <code class="option">to</code> option is
not specified or has an empty string as its value) the namespace attribute is absent.</p>
    </li></ul></div>
  </li></ul></div>

<div id="note-apply-to" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>The <code class="option">apply-to</code> option is primarily intended to make
it possible to avoid renaming attributes when the <code class="option">from</code> option
specifies no namespace, since many attributes are in no namespace.</p>

<p>Care should be taken when specifying no namespace with the
<code class="option">to</code> option.  Prefixed names in content, for example QNames and
XPath expressions, may end up with no appropriate namespace binding.</p></div></div>

<section id="c.namespace-rename.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.pack" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.23. </bdi>p:pack<a aria-label="§" class="self-link" href="#c.pack"/></h3></div><div class="content">


<p>The <code class="code">p:pack</code> step merges two document sequences in a pair-wise
fashion.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:pack</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">alternate</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">wrapper</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The step takes each pair of documents, in order, one from the
<code class="port">source</code> port and one from the <code class="port">alternate</code> port,
wraps them with a new element node whose QName is the value specified
in the <code class="option">wrapper</code> option, and writes that element to the
<code class="port">result</code> port as a document.</p>

<p>If the step reaches the end of one input sequence before the
other, then it simply wraps each of the remaining documents in the
longer sequence.</p>

<div id="note-two-docs" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>In the common case, where the document element of a document in
the <code class="port">result</code> sequence has two element children, any
comments, processing instructions, or white space text nodes that
occur between them may have come from either of the input documents;
this step does not attempt to distinguish which one.</p>
</div></div>

<section id="c.pack.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.
The result documents do not have a <code class="property">base-uri</code> property.
</p>
</div></section>
</div></section>
<section id="c.rename" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.24. </bdi>p:rename<a aria-label="§" class="self-link" href="#c.rename"/></h3></div><div class="content">


<p>The <code class="code">p:rename</code> step renames elements, attributes, or
processing-instruction targets in a document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:rename</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">new-name</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>     </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option must be an
XSLTSelectionPattern. <a id="err.inline.C0023.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if the pattern matches anything other than element,
attribute or processing instruction nodes.</p>

<p>Each element, attribute, or processing-instruction in the input
matched by the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> specified in the <code class="option">match</code>
option is renamed in the output to the name specified by the
<code class="option">new-name</code> option.</p>

<p>If the <code class="option">match</code> option matches an attribute and if
the element on which it occurs already has an attribute whose expanded
name is the same as the expanded name of the specified
<code class="option">new-name</code>, then the results is as if the current
attribute named “<em class="replaceable"><code>new-name</code></em>” was deleted before
renaming the matched attribute.</p>

<p>With respect to attributes named “<code class="literal">xml:base</code>”, the
following semantics apply: renaming an <em>from</em>
“<code class="literal">xml:base</code>” <em>to</em> something else has
no effect on the underlying base URI of the element; however,
if an attribute is renamed <em>from</em> something else
<em>to</em> “<code class="literal">xml:base</code>”, the base URI
of the element <span class="rfc2119" id="c.rename.7.8">must</span> also be amended accordingly.</p>

<p>If the pattern matches processing instructions, then it is the
processing instruction target that is renamed. <a id="err.inline.C0013"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0013"><code class="errqname">err:XC0013</code></a>) if the pattern matches
a processing instruction and the new name has a non-null namespace.
</p>

<section id="c.rename.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.replace" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.25. </bdi>p:replace<a aria-label="§" class="self-link" href="#c.replace"/></h3></div><div class="content">


<p>The <code class="code">p:replace</code> step replaces matching nodes in
its primary input with the top-level node(s) of the
<code class="code">replacement</code> port's document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:replace</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">replacement</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option
<span class="rfc2119" id="c.replace.4.2">must</span> be an XSLTSelectionPattern. <a id="err.inline.C0023.6"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if that pattern matches
an attribute or a namespace nodes.  Multiple matches are allowed, in which case multiple
copies of the <code class="port">replacement</code> document will occur.</p>

<p>Every node in the primary input matching the specified
pattern is replaced in the output by the top-level node(s)
of the <code class="port">replacement</code> document. Only non-nested matches are
replaced. That is, once a node is replaced, its descendants cannot
be matched.</p>
   
<p>If the document node is matched and port <code class="port">replacement</code> contains
a text document, the entire document is replaced by the text node. What appears on port 
<code class="port">result</code> is a text document with the text node wrapped in a document node.</p>

<section id="c.replace.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>If the resulting document contains exactly one text node,
the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
   <code class="literal">serialization</code> property is removed, while all other document properties are 
   preserved. For other document types, all document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.set-attributes" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.26. </bdi>p:set-attributes<a aria-label="§" class="self-link" href="#c.set-attributes"/></h3></div><div class="content">


<p>The <code class="tag-element">p:set-attributes</code> step sets attributes on
matching elements.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:set-attributes</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">attributes</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, xs:anyAtomicType)</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

 <p>The value of the <code class="option">match</code> option <span class="rfc2119" id="c.set-attributes.4.2">must</span> be an
 XSLTSelectionPattern. <a id="err.inline.C0023.7"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
 error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if that pattern matches anything other than element
 nodes.</p>

<p>A new attribute is created for each entry in the map appearing
on the <code class="option">attributes</code> option. The attribute name is taken
from the entry's key while the attribute value is taken from the string value of
the entry's value.</p>

<p>If an attribute with the same name as one of the attributes to
be created already exists, the value specified on the
<code class="option">attributes</code> option is used. The result port of
this step produces a copy of the <code class="port">source</code> port's document
with the matching elements' attributes modified.</p>

<p>The matching elements are specified by the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> in the
<code class="option">match</code> option. All matching elements are processed.
If no elements match, the step will not change any elements.</p>

<p>If the attributes taken from the <code class="option">attributes</code> use namespaces, 
prefixes, or prefixes bound to different namespaces, the document produced on the
<code class="port">result</code> output port will require namespace fixup.</p>

<p>If an attribute named
<code class="tag-attribute">xml:base</code> is added or changed, the base URI
of the element <span class="rfc2119" id="c.set-attributes.9.2">must</span> also be amended accordingly.</p>

<section id="c.set-attributes.10" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.set-properties" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.27. </bdi>p:set-properties<a aria-label="§" class="self-link" href="#c.set-properties"/></h3></div><div class="content">


<p>The <code class="tag-element">p:set-properties</code> step sets document
properties on the source document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:set-properties</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">properties</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">merge</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code>      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

 <p>The document properties of the document
on the <code class="port">source</code> port are augmented with the values specified
in the <code class="option">properties</code> option. The document produced on
the <code class="port">result</code> port has the same representation but the
adjusted property values.</p>

<p>If the <code class="option">merge</code>
option is true, then the supplied properties are added to the existing
properties, overwriting already existing values for a given key. 
If it is false, the document’s properties are replaced by
the new set.</p>

<p><a id="err.inline.D0070"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0070"><code class="errqname">err:XD0070</code></a>) if a value is 
assigned to the <code class="code">serialization</code> document property that cannot be converted 
into <code class="code">map(xs:QName, item()*)</code> according
to the rules in section “QName handling” of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>].</p>

<p><a id="err.inline.C0069"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0069"><code class="errqname">err:XC0069</code></a>) if the <code class="option">properties</code> map contains
a key equal to the string “<code class="literal">content-type</code>”.
</p>

<p>If the <code class="option">properties</code> map contains a key equal to the string
“<code class="literal">base-uri</code>” the associated value is taken as the new base URI of
   the resulting document. <a id="err.inline.D0064.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
   error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according 
      to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>

<section id="c.set-properties.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>If <code class="option">merge</code> is true, document 
properties not overridden by settings in the <code class="option">properties</code> map are preserved, 
otherwise the resulting document has only the <code class="literal">content-type</code> property and the
properties specified in the <code class="option">properties</code> map. In particular, if <code class="option">merge</code> 
is false, the <code class="literal">base-uri</code> property will not be preserved. This means that the resulting
document will not have a base URI if the <code class="option">properties</code> map does not contain 
a <code class="literal">base-uri</code> entry.
</p>
</div></section>
</div></section>
<section id="c.sink" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.28. </bdi>p:sink<a aria-label="§" class="self-link" href="#c.sink"/></h3></div><div class="content">


<p>The <code class="tag-element">p:sink</code> step accepts a sequence of documents and
discards them. It has no output.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:sink</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<section id="c.sink.4" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>Not applicable.</p>
</div></section>
</div></section>
<section id="c.split-sequence" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.29. </bdi>p:split-sequence<a aria-label="§" class="self-link" href="#c.split-sequence"/></h3></div><div class="content">


<p>The <code class="tag-element">p:split-sequence</code> step accepts a sequence of
documents and divides it into two sequences.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:split-sequence</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">matched</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">not-matched</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">initial-only</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">test</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>        </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

 <p>The value of the <code class="option">test</code> option <span class="rfc2119" id="c.split-sequence.4.2">must</span> be an XPathExpression.</p>

<p>The XPath expression in the <code class="option">test</code> option is
applied to each document in the input sequence. If the effective
boolean value of the expression is true, the document is copied to the
<code class="port">matched</code> port; otherwise it is copied to the
<code class="port">not-matched</code> port.</p>

<p>If the <code class="option">initial-only</code> option is true, then when
the first document that does not satisfy the test expression is
encountered, it <em>and all the documents that follow
it</em> are written to the <code class="port">not-matched</code> port.
In other words, it only writes the initial series of matched
documents (which may be empty) to the <code class="port">matched</code> port.
All other documents are written to the <code class="port">not-matched</code> port,
irrespective of whether or not they match.</p>

<p>The XPath context for the
<code class="option">test</code> option changes over time. For each document that
appears on the <code class="code">source</code> port, the expression is evaluated
with that document as the context document. The context position
(<code class="code">position()</code>) is the position of that document within the
sequence and the context size (<code class="code">last()</code>) is the total
number of documents in the sequence. <a id="err.inline.C0150"/>It is a 
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0150"><code class="errqname">err:XC0150</code></a>) if evaluating the XPath expression
in option <code class="option">test</code> on a context document results
in an error.</p>

<div id="note-stream" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>In principle, this component cannot stream because it must
buffer all of the input sequence in order to find the context size. In
practice, if the test expression does not use the
<code class="function">last()</code> function, the implementation can stream
and ignore the context size.</p>
</div></div>

<p>If the implementation supports passing PSVI annotations between
steps, the <code class="tag-element">p:split-sequence</code> step <span class="rfc2119" id="c.split-sequence.9.2">must</span> preserve
any annotations that appear in the input.</p>

<section id="c.split-sequence.10" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.store" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.30. </bdi>p:store<a aria-label="§" class="self-link" href="#c.store"/></h3></div><div class="content">


<p>The <code class="tag-element">p:store</code> step stores (a possibly serialized
version of) its input to a URI. It outputs a reference to the location
of the stored document on the <code class="port">result-uri</code> port.
Aside from these side-effects, it behaves like a <a href="#c.identity"><code class="tag-element">p:identity</code></a>
step, copying its input to the <code class="port">result</code> port.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:store</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result-uri</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">serialization</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>  </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">href</code> option
<span class="rfc2119" id="c.store.4.2">must</span> be an <code class="type">anyURI</code>. If it is relative,
it is made absolute against the base URI of the element on which it is
specified (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:store</code> in the case
of a syntactic shortcut
value).</p>

<p>The step attempts to store the document to the specified
  URI. If the URI scheme “<code class="literal">file:</code>” is supported, the processor
 <span class="rfc2119" id="c.store.5.2">should</span> try to create all non existing folders in the URI’s path. 
<a id="err.inline.C0050"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0050"><code class="errqname">err:XC0050</code></a>)
if the URI scheme is not supported or the step cannot store to the
specified location.</p>

<p>The output of this step on the <code class="port">result-uri</code> port is a 
document containing a single <a href="#cv.result"><code class="tag-element">c:result</code></a> element whose content 
is the absolute URI of the document stored by the step.</p>

<p>The <code class="option">serialization</code> option is provided to control the
serialization of content when it is stored. If the document to be stored
has a “serialization” property, the serialization is controlled by the
merger of the two maps where the entries in the “serialization” property
take precedence. Serialization is described in
[<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>].</p>

<section id="c.store.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.string-replace" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.31. </bdi>p:string-replace<a aria-label="§" class="self-link" href="#c.string-replace"/></h3></div><div class="content">


<p>The <code class="tag-element">p:string-replace</code> step matches nodes in the
document provided on the <code class="port">source</code> port and replaces them
with the string result of evaluating an XPath expression.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:string-replace</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">replace</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>     </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option <span class="rfc2119" id="c.string-replace.4.2">must</span> be an
XSLTSelectionPattern.</p>

<p>The value of the <code class="option">replace</code> option <span class="rfc2119" id="c.string-replace.5.2">must</span> be an
XPathExpression.</p>

<p>The matched nodes are specified with the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> in the
<code class="option">match</code> option.
For each matching node, the XPath
expression provided by the <code class="option">replace</code> option is
evaluated with the matching node as the XPath context node.
The string value of the result is used in the output.
Nodes that do not match are copied without change.</p>

<p>If the expression given in the <code class="option">match</code> option
matches an <em>attribute</em>, the string value of the
<code class="option">replace</code>
expression is used as the new value of the attribute in the output.
If the attribute is named “<code class="tag-attribute">xml:base</code>”, the base URI
of the element <span class="rfc2119" id="c.string-replace.7.5">must</span> also be amended accordingly.</p>

<p>If the document node is matched, the entire document is replaced by the string
value of the <code class="option">replace</code> expression. What appears on port <code class="port">result</code> 
is a text document with the text node wrapped in a document node.</p>

<p>If the expression matches any other kind of node, the entire
node (and <em>not</em> just its contents) is replaced by
the string value of the <code class="option">replace</code> expression.</p>

<section id="c.string-replace.10" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

   <p>If the resulting document contains exactly one text node,
      the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
      <code class="literal">serialization</code> property is removed, while all other document properties are 
      preserved. For other document types, all document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.text-count" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.32. </bdi>p:text-count<a aria-label="§" class="self-link" href="#c.text-count"/></h3></div><div class="content">
  

  <p>The <code class="code">p:text-count</code> step counts the number of lines in a text document and returns a single XML
    document containing that number.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-count</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:text-count</code> step counts the number of lines in the text document appearing on its
      <code class="port">source</code> port. It returns on its <code class="port">result</code> port an XML document containing a single
      <a href="#cv.result"><code class="tag-element">c:result</code></a> element whose contents is the string representing this count.</p>

  <p>Lines are identified as described in <a href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
      End-of-Line Handling</a>.
For the purpose of identifying lines, if the very last character in the text
document is a newline (&amp;#10;), that newline is ignored. (It is not a separator
between that line and a following line that contains no characters.)
</p>

  <section id="c.text-count.6" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved.
The count document does not have a <code class="property">base-uri</code> property.
</p>
  </div></section>
</div></section>
<section id="c.text-head" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.33. </bdi>p:text-head<a aria-label="§" class="self-link" href="#c.text-head"/></h3></div><div class="content">
  

  <p>The <code class="code">p:text-head</code> step returns lines from the beginning of a text document.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-head</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">count</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:integer</code><code>"</code><code>/&gt;</code><code>      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:text-head</code> step returns on its <code class="port">result</code> port lines from the text document that
    appears on its <code class="port">source</code> port:</p>
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>If the <code class="option">count</code> option is positive, the <code class="tag-element">p:text-head</code> step returns the first
          <code class="option">count</code> lines</p>
    </li><li>
      <p>If the <code class="option">count</code> option is zero, the <code class="tag-element">p:text-head</code> step returns all lines</p>
    </li><li>
      <p>If the <code class="option">count</code> option is negative, the <code class="tag-element">p:text-head</code> step returns all lines except
        the first <code class="option">count</code> lines</p>
    </li></ul></div>

  <p>Lines are identified as described in <a href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
      End-of-Line Handling</a>.
All lines returned by <code class="tag-element">p:text-head</code> are terminated with a single
newline (&amp;#10;).</p>

  <section id="c.text-head.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved.</p>
  </div></section>
</div></section>
<section id="c.text-join" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.34. </bdi>p:text-join<a aria-label="§" class="self-link" href="#c.text-join"/></h3></div><div class="content">
  
  
  <p>The <code class="code">p:text-join</code> step concatenates text documents.</p>
  
  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-join</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">separator</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                  </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">prefix</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">suffix</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">override-content-type</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>
  
  <p>The <code class="code">p:text-join</code> step concatenates the text documents appearing on its <code class="port">source</code> port
    into a single document on its <code class="port">result</code> port. The documents will be concatenated in order of appearance. </p>
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>When the <code class="option">separator</code> option is specified, its value will be inserted in between adjacent
        documents.</p>
    </li><li>
      <p>When the <code class="option">prefix</code> option is specified, the document appearing on the <code class="port">result</code>
        port will always start with its value (also when there are no documents on the <code class="port">source</code>
        port).</p>
    </li><li>
      <p>When the <code class="option">suffix</code> option is specified, the document appearing on the <code class="port">result</code>
        port will always end with its value (also when there are no documents on the <code class="port">source</code> port).</p>
    </li></ul></div>
  <p>When the <code class="option">override-content-type</code> option is specified, the document appearing on the port <code class="port">result</code>
    will have this media type as part of its document properties. <a id="err.inline.D0079.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not  a valid media type of the form 
      “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
      or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”. <a id="err.inline.C0001"/>It is a
        <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0001"><code class="errqname">err:XC0001</code></a>) if the value of option <code class="option">override-content-type</code> 
      is not a text media type.
  </p>

  <p>Concatenating text documents does not require identifying individual
lines in each document, consequently no special end-of-line handling is
performed.</p>

  <section id="c.text-join.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved.
The joined document has no <code class="property">base-uri</code> property.
</p>
  </div></section>
</div></section>
<section id="c.text-replace" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.35. </bdi>p:text-replace<a aria-label="§" class="self-link" href="#c.text-replace"/></h3></div><div class="content">
  

  <p>The <code class="code">p:text-replace</code> step replaces all occurrences of substrings in a text document that match a
    supplied regular expression with a given replacement string.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-replace</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">pattern</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">replacement</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code> </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">flags</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="code">p:text-replace</code> step replaces all occurrences of substrings in the text document appearing on
    its <code class="port">source</code> port that match a supplied regular expression with a given replacement string. The result is
    returned (as another text document) on its <code class="port">result</code> port. </p>
  <p>This step is a convenience wrapper around the XPath <a href="https://www.w3.org/TR/xpath-functions-31/#func-replace"><code class="function">fn:replace</code></a>
    function to ease text replacements in the document flow of a pipeline.</p>

  <p>The <code class="option">pattern</code>, <code class="option">replacement</code> and <code class="option">flags</code>
    options are specified the same as the parameters with the same names of the <a href="https://www.w3.org/TR/xpath-functions-31/#func-replace"><code class="function">fn:replace</code></a> function. The <code class="option">pattern</code> option
      <span class="rfc2119" id="c.text-replace.6.6">must</span> be a regular expression as specified in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>], section 7.61 “<code class="literal">Regular Expression Syntax</code>”.
      <a id="err.inline.C0147.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0147"><code class="errqname">err:XC0147</code></a>) if the specified value is not
      a valid XPath regular expression.</p>

  <p>Replacing strings in text documents does not require identifying individual
lines in each document, consequently no special end-of-line handling is
performed.</p>

  <section id="c.text-replace.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved.</p>
  </div></section>
</div></section>
<section id="c.text-sort" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.36. </bdi>p:text-sort<a aria-label="§" class="self-link" href="#c.text-sort"/></h3></div><div class="content">
  

  <p>The <code class="code">p:text-sort</code> step sorts lines in a text document.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-sort</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">sort-key</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'.'</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">order</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'ascending'</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('ascending', 'descending')</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">case-order</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('upper-first', 'lower-first')</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">lang</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:language?</code><code>"</code><code>/&gt;</code><code>                     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">collation</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'https://www.w3.org/2005/xpath-functions/collation/codepoint'</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">stable</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code>     </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:text-sort</code> step sorts the lines in the text document appearing on its <code class="port">source</code> port
    and returns the result as another text document on its <code class="port">result</code> port. The sort key is obtained by applying
    the XPath expression in <code class="option">sort-key</code> to each line in turn.</p>
  <div class="itemizedlist">
    
    
    
    
     
    
  <ul><li>
      <p>The <code class="option">sort-key</code> is used to obtain a sort key for each of the lines in the document
       appearing on <code class="port">source</code>. The <code class="code">context item</code> is the line as an instance of <code class="code">xs:string</code>,
       the <code class="code">context position</code> is the number of the line in the document on port <code class="port">source</code>, the
       <code class="code">context size</code> is the number of lines in this document. <a id="err.inline.C0098"/>It is a 
       <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0098"><code class="errqname">err:XC0098</code></a>) if a dynamic XPath error occurred while applying sort-key to a line.
       <a id="err.inline.C0099"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0099"><code class="errqname">err:XC0099</code></a>) if the result of applying <code class="code">sort-key</code>
       to a given line results in a sequence with more than one item.
      </p>
    </li><li>
     <p>The <code class="option">order</code> option defines whether the lines are processed in ascending or descending order.
        Its value <span class="rfc2119" id="c.text-sort.5.2.1.2">must</span> be one of <code class="code">ascending</code> or <code class="code">descending</code>. The default is
          <code class="code">ascending</code>.</p>
    </li><li>
      <p>The <code class="option">case-order</code> option defines whether upper-case letters are to be collated before or after
        lower-case letters. Its value <span class="rfc2119" id="c.text-sort.5.3.1.2">must</span> be one of <code class="code">upper-first</code> or
          <code class="code">lower-first</code>. The default is language-dependent.</p>
    </li><li>
      <p>The <code class="option">lang</code> option defines the language whose collating conventions are to be used. The
        default depends on the processing environment. Its value must be a valid language code (e.g.
        <code class="code">en-EN</code>).</p>
    </li><li>
      <p>The <code class="option">collation</code> option identifies how strings are to be compared with each other. Its value
        must be a valid collation URI. The only collation XProc processors <span class="rfc2119" id="c.text-sort.5.5.1.2">must</span> support is the
        Unicode Codepoint Collation <a href="https://www.w3.org/2005/xpath-functions/collation/codepoint/"><code class="code">http://www.w3.org/2005/xpath-functions/collation/codepoint</code></a>. This is also its default.
        <span id="impl-54">Support for other collations is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
    </li><li>
      <p>If the <code class="option">stable</code> option is set to <code class="code">false</code> this indicates that there is no
        requirement to retain the original order of items that have equal values for all the sort keys.</p>
    </li></ul></div>

  <p>Lines are identified as described in <a href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
      End-of-Line Handling</a>.
For the purpose of identifying lines, if the very last character in the text
document is a newline (&amp;#10;), that newline is ignored. (It is not a separator
between that line and a following line that contains no characters.)
All lines returned by <code class="tag-element">p:text-sort</code> are terminated with a single
newline (&amp;#10;).</p>

  <p>The sort process performed by this step is the same as described in 
    <a href="https://www.w3.org/TR/xslt-30/#xsl-sort">The xsl:sort Element</a>. Options <code class="option">lang</code>
    and <code class="option">case-order</code> are only taken into consideration if no value is selected for option
    <code class="option">collation</code>.</p>
  <section id="c.text-sort.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved.</p>
  </div></section>
</div></section>
<section id="c.text-tail" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.37. </bdi>p:text-tail<a aria-label="§" class="self-link" href="#c.text-tail"/></h3></div><div class="content">
  
  
  <p>The <code class="code">p:text-tail</code> step returns lines from the end of a text document.</p>
  
  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:text-tail</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">count</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:integer</code><code>"</code><code>/&gt;</code><code>      </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>
  
  <p>The <code class="tag-element">p:text-tail</code> step returns on its <code class="port">result</code> port lines from the text document that
    appears on its <code class="port">source</code> port:</p>
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>If the <code class="option">count</code> option is positive, the <code class="tag-element">p:text-tail</code> step returns the last
        <code class="option">count</code> lines</p>
    </li><li>
      <p>If the <code class="option">count</code> option is zero, the <code class="tag-element">p:text-tail</code> step returns all lines</p>
    </li><li>
      <p>If the <code class="option">count</code> option is negative, the <code class="tag-element">p:text-tail</code> step returns all lines except
        the last <code class="option">count</code> lines</p>
    </li></ul></div>
  
  <p>Lines are identified as described in <a href="https://www.w3.org/TR/xml/#sec-line-ends">XML, 2.11
    End-of-Line Handling</a>.
All lines returned by <code class="tag-element">p:text-tail</code> are terminated with a single
newline (&amp;#10;).</p>
  
  <section id="c.text-tail.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved.</p>
  </div></section>
</div></section>
<section id="c.unarchive" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.38. </bdi>p:unarchive<a aria-label="§" class="self-link" href="#c.unarchive"/></h3></div><div class="content">

  

  <p>The <code class="code">p:unarchive</code> step outputs on its <code class="port">result</code> port specific entries
    in an archive (for instance from a zip file).</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:unarchive</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">include-filter</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string*</code><code>"</code><code>/&gt;</code><code>             </code><code class="comment">&lt;!-- </code><span class="opt-type">RegularExpression</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">exclude-filter</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string*</code><code>"</code><code>/&gt;</code><code>             </code><code class="comment">&lt;!-- </code><span class="opt-type">RegularExpression</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">format</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>                      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">relative-to</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">override-content-types</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">array(array(xs:string))?</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The meaning and interpretation of the <code class="code">p:unarchive</code> step's options is as
    follows:</p>

  <div class="itemizedlist">
    
    
    
    
    
  <ul><li>
      <p>The format of the archive is determined as follows:</p>
      <div class="itemizedlist">
        
        
        
      <ul><li>
          <p>If the <code class="option">format</code> option is specified, this determines the format of
            the archive. Implementations <span class="rfc2119" id="c.unarchive.5.1.2.1.1.2">must</span> support the [<a href="#zip"><span class="abbrev">ZIP</span></a>] format, specified with the value <code class="code">zip</code>. <span id="impl-55">It is
                <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are
              supported.</span></p>
        </li><li>
          <p>If no <code class="option">format</code> option is specified or if its value is the empty
            sequence, the archive's format will be determined by the step, using the
              <code class="code">content-type</code> document-property of the document on the <code class="port">source</code>
            port and/or by inspecting its contents. <span id="impl-56">It is
                <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> how the step determines the archive's
              format.</span> Implementations <span class="rfc2119" id="c.unarchive.5.1.2.2.1.5">should</span> recognize archives in
              [<a href="#zip"><span class="abbrev">ZIP</span></a>] format. </p>
        </li><li><p><a id="err.inline.C0085.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0085"><code class="errqname">err:XC0085</code></a>) if the format of the archive 
          does not match the specified format, cannot be understood, determined and/or processed.</p>
        </li></ul></div>
    </li><li>
      <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
        unarchiving. <span id="impl-57">The semantics of the keys and the allowed values for these keys are
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
        <a id="err.inline.C0079.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
            <code class="option">parameters</code> contains an entry whose key is defined by the implementation
          and whose value is not valid for that key.</p>
    </li><li>
      <p>If present, the value of the <code class="option">include-filter</code> or
          <code class="option">exclude-filter</code> option <span class="rfc2119" id="c.unarchive.5.3.1.3">must</span> be a sequence of strings,
        each one representing a regular expressions as specified in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>], section 7.61 “<code class="literal">Regular Expression
            Syntax</code>”. <a id="err.inline.C0147.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
              error</a></em> (<a href="#err.C0147"><code class="errqname">err:XC0147</code></a>) if a specified value is not a valid XPath regular
              expression.</p>

      <p>If neither the <code class="option">include-filter</code> option nor the
          <code class="option">exclude-filter</code> option is specified, the <code class="code">p:unarchive</code> step
        outputs on its <code class="port">result</code> port all entries in the archive.</p>

      <p>If the <code class="option">include-filter</code> option or the <code class="option">exclude-filter</code>
        option is specified, the <code class="code">p:archive</code> step outputs on the <code class="port">result</code> port
        the entries from the archive that conform to the following rules:</p>
      <div class="itemizedlist">
        
        
        
        
      <ul><li>
          <p>If any <code class="option">include-filter</code> pattern matches an archive entry's name, the
            entry is included in the output.</p>
        </li><li>
          <p>If any <code class="option">exclude-filter</code> pattern matches an archive entry's name, the
            entry is excluded in the output.</p>
        </li><li>
          <p>If both options are provided, the include filter is processed first, then the
            exclude filter. </p>
        </li><li>
          <p>Names of entries in archives are always relative names. For instance, the name of a
            file called <code class="code">xyz.xml</code> in a <code class="code">specs</code> subdirectory in an archive is
            called in full <code class="code">specs/xyz.xml</code> (and not <code class="code">/specs/xyz.xml</code>).</p>
        </li></ul></div>
      <p>As a result: an item is included if it matches (at least) one of the
          <code class="option">include-filter</code> values and none of the <code class="option">exclude-filter</code>
        values.</p>
      <p>The regular expressions specified in the <code class="option">include-filter</code> and
          <code class="option">exclude-filter</code> options will be matched against the path of the entry
          <em>in</em> the archive. The matching is done unanchored: it is a match if the
        regular expression matches part of the entry's path. Informally: matching behaves like
        applying the XPath <code class="code">matches#2</code> function, like in <code class="code">matches($path-in-archive,
          $regular-expression)</code>.</p>
      <div class="note admonition"><h3>Note</h3><div class="admonition-body">
        <p>Depending on how archives are constructed, the path of an entry in an archive can be
          with or without a leading slash. Usually it will be without. For archives constructed by
            <a href="#c.archive"><code class="tag-element">p:archive</code></a> no leading slash will be present.</p>
      </div></div>
    </li><li>
      <p>The <code class="option">relative-to</code> option, when present, is used in creating the base URI
        of the unarchived documents. If the option is relative, it is made absolute against the
        base URI of the element on which it is specified (<code class="tag-element">p:with-option</code> or the step in
        case of a syntactic shortcut value).</p>
    </li><li>
      <p>The <code class="option">override-content-types</code> option can be used to partially override the
        content-type determination mechanism, as described in <a href="#override-content-type" title="Overriding content types">Section 2.4.1, “Overriding content types”</a>.</p>
    </li></ul></div>

  <p>The base URI of an unarchived document appearing on the <code class="port">result</code> port is: </p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>If the <code class="option">relative-to</code> option is present: Function <code class="code">p:urify()</code> is
        called with the value of this option as second parameter (<code class="code">$basedir</code>) and
        with the relative path of this document as it was in the archive as first parameter</p>
    </li><li>
      <p>If the <code class="option">relative-to</code> option is <em>not</em> present: Function
        <code class="code">p:urify()</code>is called with the
        value of the base URI of the archive appended with a “<code class="literal">/</code>” as second
        parameter (<code class="code">$baseDir</code>) and the relative path of this document as it
        was in the archive as first parameter</p>
    </li></ul></div>
  
  <p><a id="err.inline.C0120.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0120"><code class="errqname">err:XC0120</code></a>) if the 
    <code class="option">relative-to</code> option is not present and the document on the 
    <code class="port">source</code> port does not have a base URI.
    <a id="err.inline.D0064.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
    error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the option is not a valid URI according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
  
  <p>For instance, the base URI of an unarchived file called <code class="code">xyz.xml</code> that resided in
    the <code class="code">specs</code> subdirectory in an archive with base URI <code class="code">file:///a/b/c.zip</code>
    will become: </p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>With the <code class="option">relative-to</code> option set to <code class="code">file:///x/y/z</code>:
          <code class="code">file:///x/y/z/specs/xyz.xml</code></p>
    </li><li>
      <p>Without a <code class="option">relative-to</code> option set:
          <code class="code">file:///a/b/c.zip/specs/xyz.xml</code></p>
    </li></ul></div>
  
  <section id="c.unarchive.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are preserved.
The <code class="property">base-uri</code> property of each unarchived document is reflective of
the base URI of the document.
</p>
  </div></section>
</div></section>
<section id="c.uncompress" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.39. </bdi>p:uncompress<a aria-label="§" class="self-link" href="#c.uncompress"/></h3></div><div class="content">

  

  <p>The <code class="tag-element">p:uncompress</code> step expects on its <code class="port">source</code> port a compressed
    document. It outputs an uncompressed version of this on its <code class="port">result</code> port.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:uncompress</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">format</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>                      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">content-type</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'application/octet-stream'</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The compression format of the document appearing on the <code class="port">source</code> port is
    determined as follows:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p>If the <code class="option">format</code> option is specified, this determines the compression
        format. Implementations <span class="rfc2119" id="c.uncompress.5.1.1.2">must</span> support the [<a href="#gzip"><span class="abbrev">GZIP</span></a>]
        format, specified with the value <code class="code">gzip</code>. <span id="impl-58">It is
            <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other formats are supported.</span>
         <a id="err.inline.C0202.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0202"><code class="errqname">err:XC0202</code></a>) if the compression
            format cannot be understood, determined and/or processed.</p>
    </li><li>
      <p>If no <code class="option">format</code> option is specified or its value is the empty sequence,
        the compression format will be determined by the step, using the <code class="code">content-type</code>
        document-property of the document on the <code class="port">source</code> port and/or by inspecting its
        contents. <span id="impl-59">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> how the step determines
          the compression format.</span> Implementations <span class="rfc2119" id="c.uncompress.5.2.1.5">should</span> recognize
        archives in [<a href="#gzip"><span class="abbrev">GZIP</span></a>] format. </p>
    </li></ul></div>
  
  <p>The <code class="option">parameters</code> option can be used to supply parameters to control the
    uncompression. <span id="impl-60">The semantics of the keys and the allowed values for these keys are
      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
    <a id="err.inline.C0079.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0079"><code class="errqname">err:XC0079</code></a>) if the map
      <code class="option">parameters</code> contains an entry whose key is defined by the
      implementation and whose value is not valid for that key.</p>

  <p>Identification of the uncompressed document's content-type is done as follows:</p>
  <div class="orderedlist">
    
    
  <ol style="list-style: decimal;"><li>
      <p>If the <code class="option">content-type</code> option is specified, the uncompressed document
        <span class="rfc2119" id="c.uncompress.8.1.1.2">must</span> be interpreted according to that content-type. 
        <a id="err.inline.D0079.6"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
          a valid media type of the form 
          “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
          or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.
        <a id="err.inline.C0201"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0201"><code class="errqname">err:XC0201</code></a>) if the
            <code class="tag-element">p:uncompress</code> step cannot perform the requested content-type cast.
      </p>
    </li><li>
      <p><span id="impl-61">In the absence of an explicit type, the content will be interpreted as content
          type <code class="code">application/octet-stream</code></span>.</p>
    </li></ol></div>

  

  <section id="c.uncompress.9" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>All document properties are preserved, except for the
        <code class="code">content-type</code> property which is updated accordingly.</p>
  </div></section>

</div></section>
<section id="c.unwrap" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.40. </bdi>p:unwrap<a aria-label="§" class="self-link" href="#c.unwrap"/></h3></div><div class="content">


<p>The <code class="tag-element">p:unwrap</code> step replaces matched elements with their
children.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:unwrap</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

 <p>The value of the <code class="option">match</code> option <span class="rfc2119" id="c.unwrap.4.2">must</span> be an
 XSLTSelectionPattern. <a id="err.inline.C0023.8"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
 error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if that pattern matches anything other than the document node
 or element nodes.</p>

<p>Every element in the <code class="port">source</code> document that matches
the specified <code class="option">match</code> pattern is replaced by its children,
effectively “unwrapping” the children from their parent. Non-element nodes
and unmatched elements are passed through unchanged.</p>

<div id="note-match-doc" class="note admonition"><h3>Note</h3><div class="admonition-body">
<p>The matching applies to the entire document, not just the “top-most”
matches. A pattern of the form <code class="literal">h:div</code> will replace
<em>all</em> <code class="tag-element">h:div</code> elements, not just the top-most
ones.</p>
</div></div>

  <p>This step produces a single document. Special cases:</p> 
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>If the document element is unwrapped, the result might not be well-formed XML.</p>
      <p>For instance unwrapping the root element of
          <code class="code">&lt;!-- COMMENT --&gt;&lt;root-element/&gt;</code> will result in a document node
        with a single comment node child, which is not well-formed.</p>
    </li><li>
      <p>If a document consisting of only an empty root element is unwrapped, the result will be
        a document node without children. The result document’s content type will not change.</p>
    </li><li>
      <p>If a document consisting of a root element containing only text is unwrapped, the result will be
        a document node with a single text node child. The result document’s content type will become
        “<code class="literal">text/plain</code>”.</p>
    </li></ul></div>
  
  <p>As specified in the core language specification: if the content type changes, the
      <code class="code">serialization</code> document property, if present, will be removed.</p>
  
<section id="c.unwrap.10" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

  <p>If the resulting document contains exactly one text node,
    the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
    <code class="literal">serialization</code> property is removed, while all other document properties are 
    preserved. In all other cases, all document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.uuid" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.41. </bdi>p:uuid<a aria-label="§" class="self-link" href="#c.uuid"/></h3></div><div class="content">


<p>The <code class="tag-element">p:uuid</code> step generates a
[<a href="#bib.uuid"><span class="abbrev">UUID</span></a>] and injects it into
the <code class="port">source</code> document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:uuid</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'/*'</code><code>"</code><code>/&gt;</code><code>         </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:integer?</code><code>"</code><code>/&gt;</code><code>                   </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option must be an
XSLTSelectionPattern. The value of the <code class="option">version</code> option
must be an integer.</p>

<p>If the <code class="option">version</code> is specified, that version of
UUID must be computed. <a id="err.inline.C0060"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0060"><code class="errqname">err:XC0060</code></a>) if the processor does not support the specified
<code class="option">version</code> of the UUID algorithm. <span id="impl-62">If the
<code class="option">version</code> is not specified, the version of UUID
computed is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>Implementations <span class="rfc2119" id="c.uuid.6.1">must</span> support version 4 UUIDs.
<span id="impl-63">Support for other versions of UUID, and the mechanism by which
the necessary inputs are made available for computing other versions,
is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>

<p>The matched nodes are specified with the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> in the
<code class="option">match</code> option. For each matching node, the generated
UUID is used in the output (if more than one node matches, the
<em>same</em> UUID is used in each match). Nodes that do not
match are copied without change.</p>

<p>If the expression given in the <code class="option">match</code> option
matches an <em>attribute</em>, the UUID is used as the new
value of the attribute in the output. If the attribute is named “<code class="tag-attribute">xml:base</code>”, the base URI of the element
<span class="rfc2119" id="c.uuid.8.4">must</span> also be amended accordingly.</p>

<p>If the document node is matched, the entire document is replaced by a text node
with the UUID. What appears on port <code class="port">result</code> is a text document with the
text node wrapped in a document node.</p>

<p>If the expression matches any
other kind of node, the entire node (and <em>not</em> just
its contents) is replaced by the UUID.</p>

<section id="c.uuid.11" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

  <p>If the resulting document contains exactly one text node,
    the <code class="literal">content-type</code> property is changed to <code class="literal">text/plain</code> and the 
    <code class="literal">serialization</code> property is removed, while all other document properties are 
    preserved. For other document types, all document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.wrap-sequence" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.42. </bdi>p:wrap-sequence<a aria-label="§" class="self-link" href="#c.wrap-sequence"/></h3></div><div class="content">


<p>The <code class="tag-element">p:wrap-sequence</code> step accepts a sequence of
documents and produces either a single document or a new sequence of
documents.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:wrap-sequence</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml html</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">wrapper</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">group-adjacent</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>             </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">group-adjacent</code> option
<span class="rfc2119" id="c.wrap-sequence.4.2">must</span> be an XPathExpression.</p>

<p>In its simplest form, <code class="tag-element">p:wrap-sequence</code> takes a
sequence of documents and produces a single, new document by placing
each document in the <code class="port">source</code> sequence inside a new
document element as sequential siblings. The name of the document
element is the value specified in the <code class="option">wrapper</code>
option.</p>

<p>The <code class="option">group-adjacent</code> option can be used to group
adjacent documents.
The XPath context
for the
<code class="option">group-adjacent</code> option changes over time. For each document that
appears on the <code class="code">source</code> port, the expression is evaluated
with that document as the context document. The context position
(<code class="code">position()</code>) is the position of that document within the
sequence and the context size (<code class="code">last()</code>) is the total
number of documents in the sequence.
Whenever
two or more sequentially adjacent documents have the same “group
adjacent” value, they are wrapped together in a single wrapper
element.
Two “group adjacent” values are the same if the
standard XPath function <code class="code">deep-equal()</code> returns true for them.</p>

<section id="c.wrap-sequence.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>No document properties are preserved.
The document produced has no <code class="property">base-uri</code> property.
</p>
</div></section>
</div></section>
<section id="c.wrap" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.43. </bdi>p:wrap<a aria-label="§" class="self-link" href="#c.wrap"/></h3></div><div class="content">


<p>The <code class="tag-element">p:wrap</code> step wraps matching nodes in the
<code class="port">source</code> document with a new parent element.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:wrap</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">wrapper</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName</code><code>"</code><code>/&gt;</code><code>      </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">match</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code><code class="comment">&lt;!-- </code><span class="opt-type">XSLTSelectionPattern</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">group-adjacent</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>             </code><code class="comment">&lt;!-- </code><span class="opt-type">XPathExpression</span><code class="comment"> --&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">match</code> option
<span class="rfc2119" id="c.wrap.4.2">must</span> be an XSLTSelectionPattern. <a id="err.inline.C0023.9"/>It
is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0023"><code class="errqname">err:XC0023</code></a>) if the pattern matches
anything other than document, element, text, processing instruction, and comment
nodes.
</p>

<p>The value of the <code class="option">group-adjacent</code> option
<span class="rfc2119" id="c.wrap.5.2">must</span> be an XPathExpression.</p>

<p>If the node matched is the document node (<code class="code">match="/"</code>),
the result is a new document where the document element is a new
element node whose QName is the value specified in the
<code class="option">wrapper</code> option. That new element contains copies of
all of the children of the original document node.</p>

<p>When the <em class="glossterm"><a href="#dt-selection-pattern">selection pattern</a></em> does not match the document node,
every node that matches the specified <code class="option">match</code>
pattern is replaced with a new element node whose QName is the value
specified in the <code class="option">wrapper</code> option.
The content of that new element is a copy of the original,
matching node. The <code class="tag-element">p:wrap</code> step performs a "deep" wrapping, the children
of the matching node and their descendants are processed and wrappers
are added to all matching nodes.
</p>

<p>The <code class="option">group-adjacent</code> option can be used to group
adjacent matching nodes in a single wrapper element. The specified
XPath expression is evaluated for each matching node with that node
as the XPath context node. Whenever two or more adjacent matching nodes
have the same “group adjacent” value, they are wrapped together in
a single wrapper element. Two “group adjacent” values are the same if the
standard XPath function <code class="code">deep-equal()</code> returns true for them.</p>

<p>Two matching nodes are considered adjacent if and only if they
are siblings and either there are no nodes between them or all
intervening, non-matching nodes are whitespace text, comment, or processing
instruction nodes.</p>

<section id="c.wrap.10" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.www-form-urldecode" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.44. </bdi>p:www-form-urldecode<a aria-label="§" class="self-link" href="#c.www-form-urldecode"/></h3></div><div class="content">


<p>The <code class="tag-element">p:www-form-urldecode</code> step decodes a
<code class="literal">x-www-form-urlencoded</code> string into a JSON representation.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:www-form-urldecode</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">value</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>       </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>A JSON object of the form “<code class="literal">map(xs:string, xs:string+)</code>” will
appear on <code class="port">result</code> port. The <code class="option">value</code> option is interpreted 
as a string of parameter values encoded using the
<code class="literal">x-www-form-urlencoded</code> algorithm. Each name/value
pair is represented in the JSON object as key/value entry.
</p>

<p><a id="err.inline.C0037"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0037"><code class="errqname">err:XC0037</code></a>) if the <code class="option">value</code> provided
is not a properly
<code class="literal">x-www-form-urlencoded</code> value.
</p>

<p>If any parameter name occurs more than once in the encoded string,
a sequence will be associated with the respective key. The order in the sequence
retains the order of name/value pairs in the encoded string.</p>

<section id="c.www-form-urldecode.7" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>The resulting JSON document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
</div></section>
</div></section>
<section id="c.www-form-urlencode" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.45. </bdi>p:www-form-urlencode<a aria-label="§" class="self-link" href="#c.www-form-urlencode"/></h3></div><div class="content">


<p>The <code class="tag-element">p:www-form-urlencode</code> step encodes a set of parameter
values as a <code class="literal">x-www-form-urlencoded</code> string.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:www-form-urlencode</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text/plain</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:string,xs:anyAtomicType+)</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The map entries of <code class="option">parameters</code> option are encoded as a single
<code class="literal">x-www-form-urlencoded</code> string of name/value pairs. This
string is returned on the <code class="port">result</code> port as a text document.
</p>

<p>If more than one value is associated with a given key in <code class="option">parameters</code>
option, a name/value pair is created for each value.</p>

<section id="c.www-form-urlencode.6" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>The resulting text document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
</div></section>
</div></section>
<section id="c.xinclude" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.46. </bdi>p:xinclude<a aria-label="§" class="self-link" href="#c.xinclude"/></h3></div><div class="content">


<p>The <code class="tag-element">p:xinclude</code> step applies [<a href="#xinclude"><span class="abbrev">XInclude</span></a>] processing to the <code class="port">source</code> document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:xinclude</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fixup-xml-base</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fixup-xml-lang</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The value of the <code class="option">fixup-xml-base</code> option <span class="rfc2119" id="c.xinclude.4.2">must</span> be a
boolean. If it is true, base URI fixup will be performed as per
[<a href="#xinclude"><span class="abbrev">XInclude</span></a>].</p>

<p>The value of the <code class="option">fixup-xml-lang</code> option <span class="rfc2119" id="c.xinclude.5.2">must</span> be a
boolean. If it is true, language fixup will be performed as per
[<a href="#xinclude"><span class="abbrev">XInclude</span></a>].</p>

<p>The included documents are located with the base URI of the
input document and are not provided as input to the step.</p>

<p><a id="err.inline.C0029"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0029"><code class="errqname">err:XC0029</code></a>)
if an XInclude error occurs during processing. </p>

<section id="c.xinclude.8" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">

<p>All document properties are preserved.</p>
</div></section>
</div></section>
<section id="c.xquery" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.47. </bdi>p:xquery<a aria-label="§" class="self-link" href="#c.xquery"/></h3></div><div class="content">


<p>The <code class="tag-element">p:xquery</code> step applies an
XQuery query to the sequence of documents
provided on the <code class="port">source</code> port.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:xquery</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">query</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>If a sequence of documents is provided on the
<code class="port">source</code> port, the first document is used as the
initial context item. The whole sequence is also the default
collection. If no documents are provided on the <code class="port">source</code> port,
the initial context item is undefined and the default collection
is empty.</p>

<p>The <code class="port">query</code> port must receive a single document which is either an XML
  document or a text document. A text document <span class="rfc2119" id="c.xquery.5.2">must</span> be treated as
  the query. For an XML document the following rules apply:</p>
 
<div class="itemizedlist">
  
  
    
<ul><li>
    <p>If the document root element is <a href="#cv.query"><code id="cv.query" class="tag-element">c:query</code></a>, the text
      descendants of this element are considered the query.</p>
    <p id="d2348e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:query&gt;<br/>    <var>string</var><br/>&lt;/c:query&gt;</code></p>
  </li><li>
      <p>If the document root element is in the XQueryX namespace, the
        document is treated as an XQueryX-encoded query. <span id="impl-64">Support for
          XQueryX is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
      </p>
    </li><li>
      <p>Otherwise the serialization of the document <span class="rfc2119" id="c.xquery.6.3.1.1">must</span> be treated as
        the query. The document's serialization property (if present) is used.</p>
    </li></ul></div>
 
<p>If the step specifies a <code class="option">version</code>, then that version
of XQuery <span class="rfc2119" id="c.xquery.7.2">must</span> be used to process the transformation.
<a id="err.inline.C0009"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0009"><code class="errqname">err:XC0009</code></a>) if the specified XQuery version
is not available. If the step does not specify a version, the
implementation may use any version it has available and may use any means
to determine what version to use, including, but not limited to,
examining the version of the query.<span id="impl-65">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>
which XQuery version(s) is/are supported.</span></p>

<p>The name/value pairs in option <code class="option">parameters</code> are used to set the query’s
external variables.</p>
  
<p><a id="err.inline.C0101"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0101"><code class="errqname">err:XC0101</code></a>) if a document
appearing on port <code class="port">source</code> cannot be represented in the XDM version associated with
  the chosen XQuery version, e.g. when a JSON document contains a map and XDM 3.0 is used. 
  <a id="err.inline.C0102"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0102"><code class="errqname">err:XC0102</code></a>) if any key in option 
    <code class="option">parameters</code> is associated to a value that cannot be represented in 
    the XDM version associated with the chosen XQuery version, e.g. with a map, an array, 
    or a function when XDM 3.0 is used.</p>

<p><a id="err.inline.C0103"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0103"><code class="errqname">err:XC0103</code></a>) if any error occurs during
    XQuery’s static analysis phase. <a id="err.inline.C0104"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0104"><code class="errqname">err:XC0104</code></a>)
    if any error occurs during XQuery’s dynamic evaluation phase.</p>
      
<p>The output of this step
<span class="rfc2119" id="c.xquery.11.1">may</span> include PSVI annotations.</p>

<p>The static context of the XQuery processor is augmented in the following
way:</p>

<div class="variablelist">


<dl><dt><span class="term">Statically known default collection type</span></dt><dd>
<p><code class="literal">document()*</code></p>
</dd><dt><span class="term">Statically known namespaces:</span></dt><dd>
<p>Unchanged from the implementation defaults. No namespace declarations
in the XProc pipeline are automatically exposed in the static context.
</p>
</dd></dl></div>

<p>The dynamic context of the XQuery processor is augmented in the following
way:</p>

<div class="variablelist">










<dl><dt><span class="term">Context item</span></dt><dd>
<p>The first document that appears on the <code class="port">source</code> port.
</p>
</dd><dt><span class="term">Context position</span></dt><dd>
<p><code class="literal">1</code>
</p>
</dd><dt><span class="term">Context size</span></dt><dd>
<p><code class="literal">1</code>
</p>
</dd><dt><span class="term">Variable values</span></dt><dd>
<p>Any parameters passed in the <code class="option">parameters</code> option
augment any implementation-defined variable bindings known to the XQuery
processor.
</p>
</dd><dt><span class="term">Function implementations</span></dt><dd>
<p>The function implementations provided by the XQuery processor.</p>
</dd><dt><span class="term">Current dateTime</span></dt><dd>
<p><span id="impl-66">The point in time returned as the current dateTime is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
</dd><dt><span class="term">Implicit timezone</span></dt><dd>
<p><span id="impl-67">The implicit timezone is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.
</span>
</p>
</dd><dt><span class="term">Available documents</span></dt><dd>
<p><span id="impl-68">The set of available documents (those that may be retrieved with a URI)
is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
</p>
</dd><dt><span class="term">Available collections</span></dt><dd>
<p><span id="impl-69">The set of available collections
is <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span>
</p>
</dd><dt><span class="term">Default collection</span></dt><dd>
<p>The sequence of documents provided on the <code class="port">source</code> port.
</p>
</dd></dl></div>

<section id="example-xquery" class="section tocsuppress"><div class="section-titlepage"><h4><bdi class="secno">2.47.1. </bdi>Example<a aria-label="§" class="self-link" href="#example-xquery"/></h4></div><div class="content">


<p>The following pipeline applies XInclude processing and schema
validation before using XQuery:</p>

<figure id="ex.c.xquery" class="example-wrapper"><div class="title">Example 1. A Sample Pipeline Document</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                version="3.0"&gt;
&lt;p:input port="source"/&gt;
&lt;p:output port="result"/&gt;

&lt;p:xinclude/&gt;

&lt;p:validate-with-xml-schema name="validate"&gt;
  &lt;p:with-input port="schema"
                href="http://example.com/path/to/schema.xsd"/&gt;
&lt;/p:validate-with-xml-schema&gt;

&lt;p:xquery&gt;
   &lt;p:with-input port="query" href="countp.xq"/&gt;
&lt;/p:xquery&gt;

&lt;/p:declare-step&gt;</code></pre></div></figure>

<p>Where <code class="filename">countp.xq</code> might contain:</p>

<pre class="programlisting language-markup xml"><code>&lt;count&gt;{count(.//p)}&lt;/count&gt;</code></pre>

</div></section>

<section id="c.xquery.17" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.47.2. </bdi>Document properties<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">

<p>No document properties are preserved.
The <code class="property">base-uri</code> property of each document will
reflect the base URI specified by the query. If the query does not
establish a base URI, the document will not have one.
</p>
</div></section>
</div></section>
<section id="c.xslt" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.48. </bdi>p:xslt<a aria-label="§" class="self-link" href="#c.xslt"/></h3></div><div class="content">
  
  <p>The <code class="tag-element">p:xslt</code> step invokes an XSLT stylesheet.</p>
  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:xslt</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">stylesheet</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">secondary</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">static-parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">global-context-item</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">item()?</code><code>"</code><code>/&gt;</code><code>           </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">populate-default-collection</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean?</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">initial-mode</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>                </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">template-name</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:QName?</code><code>"</code><code>/&gt;</code><code>               </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">output-base-uri</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>            </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>
  <p>If <code class="option">output-base-uri</code> is relative, it is made absolute against the base URI of
    the element on which it is specified (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:xslt</code> in the case
    of a syntactic shortcut value).</p>
  <p>If the step specifies a <code class="option">version</code>, then that version of XSLT
    <span class="rfc2119" id="c.xslt.5.2">must</span> be used to process the transformation. <a id="err.inline.C0038"/>It is a
      <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0038"><code class="errqname">err:XC0038</code></a>) if the specified xslt version is not available. If
    the step does not specify a version, the implementation may use any version it has available and
    may use any means to determine what version to use, including, but not limited to, examining the
    version of the stylesheet. <span id="impl-70">It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> which XSLT
    version(s) is/are supported.</span></p>
  <p>The XSLT stylesheet provided on the <code class="port">stylesheet</code> port is invoked. <a id="err.inline.C0093"/> It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0093"><code class="errqname">err:XC0093</code></a>) if a static error occurs during the
    static analysis of the XSLT stylesheet. Any parameters passed in the
    <code class="option">parameters</code> option are used to define top-level stylesheet parameters.</p>
  <p>Parameters passed in the <code class="option">static-parameters</code> option are passed as static
    parameters to the XSLT invocation. <span id="impl-71">Whether static parameters are supported is
      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> and depends on the XSLT version (which must be
    3.0 or higher).</span> If static parameters are not supported the option is ignored.</p>
  <p><a id="err.inline.C0095"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0095"><code class="errqname">err:XC0095</code></a>) if an error occurred during
    the transformation.
    <a id="err.inline.C0096"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0096"><code class="errqname">err:XC0096</code></a>) if the transformation is
      terminated by XSLT message termination.
    <span id="impl-72">How XSLT message termination errors are reported to the XProc processor is
      <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span> Implementations
    <span class="rfc2119" id="c.xslt.8.4">should</span> raise an error using the error code from the XSLT step (for example,
    the <code class="tag-attribute">error-code</code> specified on the <code class="tag-element">xsl:message</code> or
    <code class="code">Q{http://www.w3.org/2005/xqt-errors}XTTM9000</code> if no code is provided).</p>
  <p>If XSLT 2.0 or XSLT 3.0 is used, the outputs of this step <span class="rfc2119" id="c.xslt.9.1">may</span> include
    PSVI annotations.</p>
  <p>The interpretation of the input and output ports as well as for the other options depends on
    the selected XSLT version.</p>
  
  <section id="c.xslt.11" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.48.1. </bdi>Invoking an XSLT 3.0 stylesheet<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
    
    <p>The value of <code class="option">global-context-item</code> is used as global context item for the
      stylesheet invocation. If no value is supplied, the following applies:</p>
    <div class="itemizedlist">
      
      
    <ul><li>
        <p>If there is a single document on the <code class="port">source</code> port, this document will
          become the value of the <code class="option">global-context-item</code> option.</p>
      </li><li>
        <p>If there are none or multiple documents on the <code class="port">source</code> port, the
          global context item is absent.</p>
      </li></ul></div>
    <p>The <code class="option">populate-default-collection</code> option is used to control whether all
    the documents appearing on <code class="port">source</code> port form the default collection for the XSLT
    transformation.</p>
    <p>If no value is supplied for <code class="option">template-name</code> option an “Apply-template
      invocation” is performed. The documents that appear on <code class="port">source</code> are taken to be the
      initial match selection. if <code class="option">populate-default-collection</code> is true, they
      are also the default collection. If a value is supplied for 
      the <code class="option">initial-mode</code> option,
      this value is used as the initial-mode for the invocation. <a id="err.inline.C0008"/>It is a
        <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0008"><code class="errqname">err:XC0008</code></a>) if the stylesheet does not support a given mode. 
      If no value is supplied, nothing is supplied to the invocation,
      so the default behaviour defined for XSLT 3.0 could be applied.</p>
    <p>If a value is supplied for option <code class="option">template-name</code> a “Call template
      invocation” is performed. The documents on port <code class="port">source</code> are taken as the default
      collection in this case. Option <code class="option">initial-mode</code> is ignored. <a id="err.inline.C0056"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0056"><code class="errqname">err:XC0056</code></a>) if the stylesheet does not provide a given
        template.</p>
    <p>Independent of the way the stylesheet is invoked, the principal result(s) will appear on
      output port <code class="port">result</code> while secondary result(s) will appear on output port
      <code class="port">secondary</code>. <span id="impl-73">The order in which 
        result documents appear on the <code class="port">secondary</code> port is
        <em class="glossterm"><a href="#dt-implementation-dependent">implementation dependent</a></em>.</span> 
      Whether the raw results are delivered or a result tree is
      constructed, depends on the (explicit or implicit) setting for attribute
      <code class="literal">build-tree</code> of in the output-definition for the respective result. If a
      result tree is constructed, the result will be a text document if it is a single text node
      wrapped into a document node. Otherwise it will be either an XML document or an HTML document
      depending on the attribute <code class="literal">method</code> on the output-definition for the
      respective result. If no result tree is constructed, the stylesheet invocation may
      additionally deliver a sequence of atomic values, maps, or arrays. For each item in this
      sequence a JSON document will be constructed and appear on the steps output port.</p>
    <p>Option <code class="option">output-base-uri</code> sets the base output URI per XSLT 3.0
      specification. If a final result tree is constructed, this URI is used to resolve a relative
      URI reference. If no value is supplied for <code class="option">output-base-uri</code>, the base URI of
      the first document in the <code class="port">source</code> port's sequence is used. If no document is
      supplied on port <code class="port">source</code> the base URI of the document on port <code class="port">stylesheet</code>
      is used. <a id="err.inline.C0121"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0121"><code class="errqname">err:XC0121</code></a>) if a document appearing
        on the <code class="port">secondary</code> port has a base URI that is not both absolute and 
        valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
    <div class="note admonition"><h3>Note</h3><div class="admonition-body">
      <p>If no result tree is constructed for one of secondary results, a sequence of documents
        sharing the same value for attribute <code class="literal">href</code> may appear on output port
        <code class="port">result</code>.</p>
    </div></div>
  </div></section>
  <section id="c.xslt.12" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.48.2. </bdi>Invoking an XSLT 2.0 stylesheet<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
    
    <p>If a sequence of documents is provided on the <code class="port">source</code> port, the first document
      is used as the initial context node. The whole sequence is also the default collection. If no
      documents are provided on the <code class="port">source</code> port, the initial context node is undefined
      and the default collection is empty. <a id="err.inline.C0094"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
        error</a></em> (<a href="#err.C0094"><code class="errqname">err:XC0094</code></a>) if any document supplied on the source port is not an XML document, an
        HTML documents, or a Text document if XSLT 2.0 is used.</p>
    <p>The <code class="option">populate-default-collection</code> option is used to control whether all
      the documents appearing on <code class="port">source</code> port form the default collection for the XSLT
      transformation.</p>
    <p>The value of option <code class="option">global-context-item</code> is ignored if a stylesheet is
      invoked as per XSLT 2.0. The invocation of the transformation is controlled by the
      <code class="option">initial-mode</code> and <code class="option">template-name</code> options that set the
      initial mode and/or named template in the XSLT transformation where processing begins. <a id="err.inline.C0007"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0007"><code class="errqname">err:XC0007</code></a>) if any key in
        <code class="option">parameters</code> is associated to a value which is not an instance of the XQuery
        1.0 and XPath 2.0 Data Model, e.g. with a map, an array, or a function.
      <a id="err.inline.C0008.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0008"><code class="errqname">err:XC0008</code></a>) if the specified initial mode
        cannot be applied to the specified stylesheet. 
      <a id="err.inline.C0056.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0056"><code class="errqname">err:XC0056</code></a>) if the specified template 
        name cannot be applied to the specified stylesheet.
    </p>
    <p>The primary result document of the transformation, if there is one, appears on the
      <code class="port">result</code> port. At most one document can appear on the <code class="port">result</code> port.
      All other result documents appear on the <code class="port">secondary</code> port. <span id="impl-74">The order in which 
        result documents appear on the <code class="port">secondary</code> port is
        <em class="glossterm"><a href="#dt-implementation-dependent">implementation dependent</a></em>.</span>
    </p>
    <p>The <code class="option">output-base-uri</code> option sets the context's output base URI per the
      XSLT 2.0 specification, otherwise the base URI of the <code class="port">result</code> document is the base
      URI of the first document in the <code class="code">source</code> port's sequence. If no document is
      supplied on port <code class="port">source</code> the base URI of the document on port <code class="port">stylesheet</code>
      is used. <a id="err.inline.C0121.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0121"><code class="errqname">err:XC0121</code></a>) if a document appearing
        on the <code class="port">secondary</code> port has a base URI that is not both absolute and 
        valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>].</p>
  </div></section>
  
  <section id="c.xslt.13" class="section"><div class="section-titlepage"><h4><bdi class="secno">2.48.3. </bdi>Invoking an XSLT 1.0 stylesheet<a aria-label="§" class="self-link" href="#"/></h4></div><div class="content">
    
    <p>The document provided for <code class="port">source</code> is used the transformations source tree.
      <a id="err.inline.C0039"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0039"><code class="errqname">err:XC0039</code></a>) if the source port does not
        contain exactly one XML document or one HTML document if XSLT 1.0 is used. The
      values supplied for options <code class="option">global-context-item</code>,
      <code class="option">initial-mode</code>, and <code class="option">template-name</code> are ignored. If XSLT 1.0
      is used, an empty sequence of documents <span class="rfc2119" id="c.xslt.13.2.6">must</span> appear on the
      <code class="port">secondary</code> port. An XSLT 1.0 step <span class="rfc2119" id="c.xslt.13.2.8">should</span> use the value of the
      <code class="option">output-base-uri</code> as the base URI of its output, if the option is
      specified.</p>
    <p>The key/value pairs supplied in <code class="option">parameters</code> are used to set top-level
      parameters in the stylesheet. If the value is an atomic value or a node, its string value is
      supplied to the stylesheet. <a id="err.inline.C0105"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0105"><code class="errqname">err:XC0105</code></a>) if an XSLT 1.0
      stylesheet is invoked and option <code class="option">parameters</code> contains a value that is not an atomic value
      or a node.
    </p>
  </div></section>
  <section id="c.xslt.14" class="simplesect"><div class="section-titlepage"><h4>Document properties</h4></div><div class="content">
    
    <p>No document properties are
    preserved. The <code class="property">base-uri</code> property of each
    document will reflect the base URI specified by the tranformation.
    If the transformation does not establish a base URI, the document
    will not have one.
</p>
  </div></section>
</div></section>
</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>Several of the steps in the standard step library can generate
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.</p>

<p>A <span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space).</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>Dynamic errors raised by steps are divided into two categories:
dynamic errors and step errors. The distinction is largely that “step
errors” tend to be related to a particular step or small group of
steps (e.g., validation error) whereas the “dynamic errors” apply to
many more steps (e.g., URI not available). There is also precedent for some
of the error codes dating back to XProc 1.0.</p>

<div id="dynamic-error-summary"><h5>Dynamic Errors</h5><dl class="errs"><dt id="err.D0011"><code class="errqname">err:XD0011</code></dt><dd><p>It is a dynamic error
                    if the resource referenced by the href option does not exist, cannot be
                    accessed or is not a file.</p><p>See: <a href="#err.inline.D0011">Handling of ZIP archives</a>, <a href="#err.inline.D0011.1">p:load</a></p></dd><dt id="err.D0023"><code class="errqname">err:XD0023</code></dt><dd><p>It is a dynamic error if a DTD validation
is performed and either the document is not valid or no DTD is found.</p><p>See: <a href="#err.inline.D0023">Loading XML data</a></p></dd><dt id="err.D0043"><code class="errqname">err:XD0043</code></dt><dd><p>It is a dynamic error
if the dtd-validate parameter is true and
the processor does not support DTD validation.</p><p>See: <a href="#err.inline.D0043">Loading XML data</a></p></dd><dt id="err.D0049"><code class="errqname">err:XD0049</code></dt><dd><p>It is a dynamic error if the text value is not
                  a well-formed XML document</p><p>See: <a href="#err.inline.D0049">Casting from a text media type</a>, <a href="#err.inline.D0049.1">Loading XML data</a></p></dd><dt id="err.D0057"><code class="errqname">err:XD0057</code></dt><dd><p>It is a dynamic
                  error if the text document does not conform to the JSON grammar, unless the 
                  parameter liberal is true and the processor chooses to accept the deviation.</p><p>See: <a href="#err.inline.D0057">Casting from a text media type</a>, <a href="#err.inline.D0057.1">Loading JSON data</a></p></dd><dt id="err.D0058"><code class="errqname">err:XD0058</code></dt><dd><p>It is a dynamic error if the parameter duplicates is 
                  reject and the text document contains a JSON object with duplicate keys.</p><p>See: <a href="#err.inline.D0058">Casting from a text media type</a>, <a href="#err.inline.D0058.1">Loading JSON data</a></p></dd><dt id="err.D0059"><code class="errqname">err:XD0059</code></dt><dd><p>It is a dynamic error if the parameter map contains 
                  an entry whose key is defined in the specification of fn:parse-json and 
                  whose value is not valid for that key, or if it contains an entry with the key fallback 
                  when the parameter escape with true() is also 
                  present.</p><p>See: <a href="#err.inline.D0059">Casting from a text media type</a>, <a href="#err.inline.D0059.1">Loading JSON data</a></p></dd><dt id="err.D0060"><code class="errqname">err:XD0060</code></dt><dd><p>It is a 
                     dynamic error if the text document can not be converted into
                     the XPath data model</p><p>See: <a href="#err.inline.D0060">Casting from a text media type</a>, <a href="#err.inline.D0060.1">Loading text data</a></p></dd><dt id="err.D0062"><code class="errqname">err:XD0062</code></dt><dd><p>It is a dynamic error
if the content-type is specified and the
document-properties has a “content-type” that is not the
same.</p><p>See: <a href="#err.inline.D0062">p:load</a></p></dd><dt id="err.D0064"><code class="errqname">err:XD0064</code></dt><dd><p>It is a dynamic
              error if the base URI is not both absolute and valid according to
              .</p><p>See: <a href="#err.inline.D0064">p:archive</a>, <a href="#err.inline.D0064.1">p:archive-manifest</a>, <a href="#err.inline.D0064.2">p:load</a>, <a href="#err.inline.D0064.3">p:make-absolute-uris</a>, <a href="#err.inline.D0064.4">p:set-properties</a>, <a href="#err.inline.D0064.5">p:unarchive</a></p></dd><dt id="err.D0070"><code class="errqname">err:XD0070</code></dt><dd><p>It is a dynamic error if a value is 
assigned to the serialization document property that cannot be converted 
into map(xs:QName, item()*) according
to the rules in section “QName handling” of .</p><p>See: <a href="#err.inline.D0070">p:set-properties</a></p></dd><dt id="err.D0078"><code class="errqname">err:XD0078</code></dt><dd><p>It is a dynamic error
if the loaded document cannot be represented as an HTML document in
the XPath data model.</p><p>See: <a href="#err.inline.D0078">Loading HTML data</a></p></dd><dt id="err.D0079"><code class="errqname">err:XD0079</code></dt><dd><p>It is a dynamic error if a supplied 
            content-type is not a valid media type of the form 
            “type/subtype+ext” 
            or “type/subtype”.</p><p>See: <a href="#err.inline.D0079">Overriding content types</a>, <a href="#err.inline.D0079.1">p:cast-content-type</a>, <a href="#err.inline.D0079.2">p:http-request</a>, <a href="#err.inline.D0079.3">p:http-request</a>, <a href="#err.inline.D0079.4">p:load</a>, <a href="#err.inline.D0079.5">p:text-join</a>, <a href="#err.inline.D0079.6">p:uncompress</a></p></dd></dl></div>

<div id="step-error-summary"><h5>Step Errors</h5><dl class="errs"><dt id="err.C0001"><code class="errqname">err:XC0001</code></dt><dd><p>It is a
        dynamic error if the value of option override-content-type 
      is not a text media type.</p><p>See: <a href="#err.inline.C0001">p:text-join</a></p></dd><dt id="err.C0003"><code class="errqname">err:XC0003</code></dt><dd><p>It is a dynamic
  error if a “username” or a
  “password” key is present without specifying a
  value for the “auth-method” key, if the requested
  auth-method isn't supported, or the
  authentication challenge contains an authentication method that
  isn't supported.</p><p>See: <a href="#err.inline.C0003">p:http-request</a></p></dd><dt id="err.C0007"><code class="errqname">err:XC0007</code></dt><dd><p>It is a dynamic error if any key in
        parameters is associated to a value which is not an instance of the XQuery
        1.0 and XPath 2.0 Data Model, e.g. with a map, an array, or a function.</p><p>See: <a href="#err.inline.C0007">Invoking an XSLT 2.0 stylesheet</a></p></dd><dt id="err.C0008"><code class="errqname">err:XC0008</code></dt><dd><p>It is a
        dynamic error if the stylesheet does not support a given mode.</p><p>See: <a href="#err.inline.C0008">Invoking an XSLT 3.0 stylesheet</a>, <a href="#err.inline.C0008.1">Invoking an XSLT 2.0 stylesheet</a></p></dd><dt id="err.C0009"><code class="errqname">err:XC0009</code></dt><dd><p>It is a
dynamic error if the specified XQuery version
is not available.</p><p>See: <a href="#err.inline.C0009">p:xquery</a></p></dd><dt id="err.C0013"><code class="errqname">err:XC0013</code></dt><dd><p>It
is a dynamic error if the pattern matches
a processing instruction and the new name has a non-null namespace.</p><p>See: <a href="#err.inline.C0013">p:rename</a></p></dd><dt id="err.C0014"><code class="errqname">err:XC0014</code></dt><dd><p>It is a dynamic error
if the XML namespace (http://www.w3.org/XML/1998/namespace)
or the
XMLNS namespace (http://www.w3.org/2000/xmlns/) is
the value of either the from option or the
to option.</p><p>See: <a href="#err.inline.C0014">p:namespace-rename</a></p></dd><dt id="err.C0019"><code class="errqname">err:XC0019</code></dt><dd><p>It is a dynamic error
if the documents are not equal according to the specified comparison
method, and the value of the
fail-if-not-equal option is
true.</p><p>See: <a href="#err.inline.C0019">p:compare</a></p></dd><dt id="err.C0023"><code class="errqname">err:XC0023</code></dt><dd><p>It
is a dynamic error if the selection pattern matches a node
which is not an element.</p><p>See: <a href="#err.inline.C0023">p:add-attribute</a>, <a href="#err.inline.C0023.1">p:delete</a>, <a href="#err.inline.C0023.2">p:insert</a>, <a href="#err.inline.C0023.3">p:label-elements</a>, <a href="#err.inline.C0023.4">p:make-absolute-uris</a>, <a href="#err.inline.C0023.5">p:rename</a>, <a href="#err.inline.C0023.6">p:replace</a>, <a href="#err.inline.C0023.7">p:set-attributes</a>, <a href="#err.inline.C0023.8">p:unwrap</a>, <a href="#err.inline.C0023.9">p:wrap</a></p></dd><dt id="err.C0024"><code class="errqname">err:XC0024</code></dt><dd><p>It is a
dynamic error if the selection pattern matches a document
node and the value of the position is “before” or
“after”.</p><p>See: <a href="#err.inline.C0024">p:insert</a></p></dd><dt id="err.C0025"><code class="errqname">err:XC0025</code></dt><dd><p>It is a dynamic error
if the selection pattern matches anything other than an element or a document
node and the value of the position option is
“first-child” or
“last-child”.</p><p>See: <a href="#err.inline.C0025">p:insert</a></p></dd><dt id="err.C0029"><code class="errqname">err:XC0029</code></dt><dd><p>It is a dynamic error
if an XInclude error occurs during processing.</p><p>See: <a href="#err.inline.C0029">p:xinclude</a></p></dd><dt id="err.C0030"><code class="errqname">err:XC0030</code></dt><dd><p>It
      is a dynamic error if the response body cannot
      be interpreted as requested (e.g. application/json
      to override application/xml content).</p><p>See: <a href="#err.inline.C0030">p:http-request</a></p></dd><dt id="err.C0036"><code class="errqname">err:XC0036</code></dt><dd><p>It is a
dynamic error if the requested hash algorithm is not
one that the processor understands or if the value or parameters are
not appropriate for that algorithm.</p><p>See: <a href="#err.inline.C0036">p:hash</a></p></dd><dt id="err.C0037"><code class="errqname">err:XC0037</code></dt><dd><p>It is a
dynamic error if the value provided
is not a properly
x-www-form-urlencoded value.</p><p>See: <a href="#err.inline.C0037">p:www-form-urldecode</a></p></dd><dt id="err.C0038"><code class="errqname">err:XC0038</code></dt><dd><p>It is a
      dynamic error if the specified xslt version is not available.</p><p>See: <a href="#err.inline.C0038">p:xslt</a></p></dd><dt id="err.C0039"><code class="errqname">err:XC0039</code></dt><dd><p>It is a dynamic error if the source port does not
        contain exactly one XML document or one HTML document if XSLT 1.0 is used.</p><p>See: <a href="#err.inline.C0039">Invoking an XSLT 1.0 stylesheet</a></p></dd><dt id="err.C0050"><code class="errqname">err:XC0050</code></dt><dd><p>It is a dynamic error
if the URI scheme is not supported or the step cannot store to the
specified location.</p><p>See: <a href="#err.inline.C0050">p:store</a></p></dd><dt id="err.C0056"><code class="errqname">err:XC0056</code></dt><dd><p>It is a dynamic error if the stylesheet does not provide a given
        template.</p><p>See: <a href="#err.inline.C0056">Invoking an XSLT 3.0 stylesheet</a>, <a href="#err.inline.C0056.1">Invoking an XSLT 2.0 stylesheet</a></p></dd><dt id="err.C0058"><code class="errqname">err:XC0058</code></dt><dd><p>It is a dynamic error
if the all and relative options are
both true.</p><p>See: <a href="#err.inline.C0058">p:add-xml-base</a></p></dd><dt id="err.C0059"><code class="errqname">err:XC0059</code></dt><dd><p>It is a dynamic error if the QName
value in the attribute-name option uses the prefix
“xmlns”
or any other prefix that resolves to the namespace name
http://www.w3.org/2000/xmlns/.
</p><p>See: <a href="#err.inline.C0059">p:add-attribute</a></p></dd><dt id="err.C0060"><code class="errqname">err:XC0060</code></dt><dd><p>It is a dynamic
error if the processor does not support the specified
version of the UUID algorithm.</p><p>See: <a href="#err.inline.C0060">p:uuid</a></p></dd><dt id="err.C0062"><code class="errqname">err:XC0062</code></dt><dd><p>It is a dynamic error if the
match option matches a namespace node.</p><p>See: <a href="#err.inline.C0062">p:delete</a></p></dd><dt id="err.C0069"><code class="errqname">err:XC0069</code></dt><dd><p>It is a dynamic
error if the properties map contains
a key equal to the string “content-type”.</p><p>See: <a href="#err.inline.C0069">p:set-properties</a></p></dd><dt id="err.C0071"><code class="errqname">err:XC0071</code></dt><dd><p>It is a dynamic
         error if the p:cast-content-type step
         cannot perform the requested cast.</p><p>See: <a href="#err.inline.C0071">p:cast-content-type</a></p></dd><dt id="err.C0072"><code class="errqname">err:XC0072</code></dt><dd><p>It is a dynamic
               error if the c:data contains content is not
               a valid base64 string.</p><p>See: <a href="#err.inline.C0072">Casting from an XML media type</a></p></dd><dt id="err.C0073"><code class="errqname">err:XC0073</code></dt><dd><p>It is a dynamic
               error if the c:data element does not have
               a content-type attribute.</p><p>See: <a href="#err.inline.C0073">Casting from an XML media type</a></p></dd><dt id="err.C0074"><code class="errqname">err:XC0074</code></dt><dd><p>It is a dynamic
               error if the content-type is supplied and is
               not the same as the content-type specified on
               the c:data element.</p><p>See: <a href="#err.inline.C0074">Casting from an XML media type</a></p></dd><dt id="err.C0076"><code class="errqname">err:XC0076</code></dt><dd><p>It is a dynamic error if
the comparison method specified in p:compare
is not supported by the implementation.</p><p>See: <a href="#err.inline.C0076">p:compare</a></p></dd><dt id="err.C0077"><code class="errqname">err:XC0077</code></dt><dd><p>It is a dynamic error if
the media types of the documents supplied are incompatible with the
comparison method.</p><p>See: <a href="#err.inline.C0077">p:compare</a></p></dd><dt id="err.C0078"><code class="errqname">err:XC0078</code></dt><dd><p>It is a
          dynamic error if the value associated
          with the “fail-on-timeout” is associated
          with true() and a HTTP status code
          408 is encountered.</p><p>See: <a href="#err.inline.C0078">p:http-request</a></p></dd><dt id="err.C0079"><code class="errqname">err:XC0079</code></dt><dd><p>It is a dynamic error if the map
              parameters contains an entry whose key is defined by the
            implementation and whose value is not valid for that key.</p><p>See: <a href="#err.inline.C0079">p:archive</a>, <a href="#err.inline.C0079.1">p:archive-manifest</a>, <a href="#err.inline.C0079.2">p:cast-content-type</a>, <a href="#err.inline.C0079.3">p:compress</a>, <a href="#err.inline.C0079.4">p:unarchive</a>, <a href="#err.inline.C0079.5">p:uncompress</a></p></dd><dt id="err.C0080"><code class="errqname">err:XC0080</code></dt><dd><p>It is a dynamic error if the number of
        documents on the archive does not match the expected number of archive input
        documents for the given format and command.</p><p>See: <a href="#err.inline.C0080">Handling of ZIP archives</a></p></dd><dt id="err.C0081"><code class="errqname">err:XC0081</code></dt><dd><p>It is a dynamic error if the format of the
          archive does not match the format as specified in the format
          option.</p><p>See: <a href="#err.inline.C0081">p:archive</a></p></dd><dt id="err.C0084"><code class="errqname">err:XC0084</code></dt><dd><p>It is a
              dynamic error if two or more documents appear on the p:archive
            step's source port that have the same base URI or if any document that
        appears on the source port has no base URI.</p><p>See: <a href="#err.inline.C0084">p:archive</a></p></dd><dt id="err.C0085"><code class="errqname">err:XC0085</code></dt><dd><p>It is a dynamic error if the format of the archive 
    does not match the specified format, cannot be understood, determined and/or processed.</p><p>See: <a href="#err.inline.C0085">p:archive</a>, <a href="#err.inline.C0085.1">p:archive-manifest</a>, <a href="#err.inline.C0085.2">p:unarchive</a></p></dd><dt id="err.C0092"><code class="errqname">err:XC0092</code></dt><dd><p>It is a dynamic error
          if as a consequence of changing or removing the namespace of an attribute
          the attribute's name is not unique on the respective element.</p><p>See: <a href="#err.inline.C0092">p:namespace-rename</a></p></dd><dt id="err.C0093"><code class="errqname">err:XC0093</code></dt><dd><p> It is a dynamic error if a static error occurs during the
    static analysis of the XSLT stylesheet.</p><p>See: <a href="#err.inline.C0093">p:xslt</a></p></dd><dt id="err.C0094"><code class="errqname">err:XC0094</code></dt><dd><p>It is a dynamic
        error if any document supplied on the source port is not an XML document, an
        HTML documents, or a Text document if XSLT 2.0 is used.</p><p>See: <a href="#err.inline.C0094">Invoking an XSLT 2.0 stylesheet</a></p></dd><dt id="err.C0095"><code class="errqname">err:XC0095</code></dt><dd><p>It is a dynamic error if an error occurred during
    the transformation.</p><p>See: <a href="#err.inline.C0095">p:xslt</a></p></dd><dt id="err.C0096"><code class="errqname">err:XC0096</code></dt><dd><p>It is a dynamic error if the transformation is
      terminated by XSLT message termination.</p><p>See: <a href="#err.inline.C0096">p:xslt</a></p></dd><dt id="err.C0098"><code class="errqname">err:XC0098</code></dt><dd><p>It is a 
       dynamic error if a dynamic XPath error occurred while applying sort-key to a line.</p><p>See: <a href="#err.inline.C0098">p:text-sort</a></p></dd><dt id="err.C0099"><code class="errqname">err:XC0099</code></dt><dd><p>It is a dynamic error if the result of applying sort-key
       to a given line results in a sequence with more than one item.</p><p>See: <a href="#err.inline.C0099">p:text-sort</a></p></dd><dt id="err.C0100"><code class="errqname">err:XC0100</code></dt><dd><p>It is a dynamic error if the document on port
              manifest does not conform to the given schema.</p><p>See: <a href="#err.inline.C0100">p:archive</a></p></dd><dt id="err.C0101"><code class="errqname">err:XC0101</code></dt><dd><p>It is a dynamic error if a document
appearing on port source cannot be represented in the XDM version associated with
  the chosen XQuery version, e.g. when a JSON document contains a map and XDM 3.0 is used.</p><p>See: <a href="#err.inline.C0101">p:xquery</a></p></dd><dt id="err.C0102"><code class="errqname">err:XC0102</code></dt><dd><p>It is a dynamic error if any key in option 
    parameters is associated to a value that cannot be represented in 
    the XDM version associated with the chosen XQuery version, e.g. with a map, an array, 
    or a function when XDM 3.0 is used.</p><p>See: <a href="#err.inline.C0102">p:xquery</a></p></dd><dt id="err.C0103"><code class="errqname">err:XC0103</code></dt><dd><p>It is a dynamic error if any error occurs during
    XQuery’s static analysis phase.</p><p>See: <a href="#err.inline.C0103">p:xquery</a></p></dd><dt id="err.C0104"><code class="errqname">err:XC0104</code></dt><dd><p>It is a dynamic error
    if any error occurs during XQuery’s dynamic evaluation phase.</p><p>See: <a href="#err.inline.C0104">p:xquery</a></p></dd><dt id="err.C0105"><code class="errqname">err:XC0105</code></dt><dd><p>It is a dynamic error if an XSLT 1.0
      stylesheet is invoked and option parameters contains a value that is not an atomic value
      or a node.</p><p>See: <a href="#err.inline.C0105">Invoking an XSLT 1.0 stylesheet</a></p></dd><dt id="err.C0106"><code class="errqname">err:XC0106</code></dt><dd><p>It is a dynamic error if duplicate keys are encountered and 
      option duplicates has value “reject”.</p><p>See: <a href="#err.inline.C0106">p:json-merge</a></p></dd><dt id="err.C0107"><code class="errqname">err:XC0107</code></dt><dd><p>
    It is a dynamic error if a document of a not supported document type appears on 
      port source of p:json-merge.</p><p>See: <a href="#err.inline.C0107">p:json-merge</a></p></dd><dt id="err.C0108"><code class="errqname">err:XC0108</code></dt><dd><p>It is a dynamic error if any
prefix is not in-scope at the point where the p:namespace-delete occurs.</p><p>See: <a href="#err.inline.C0108">p:namespace-delete</a></p></dd><dt id="err.C0109"><code class="errqname">err:XC0109</code></dt><dd><p>It is a dynamic error if
a namespace is to be removed from an attribute and the element already has an attribute
with the resulting name.</p><p>See: <a href="#err.inline.C0109">p:namespace-delete</a></p></dd><dt id="err.C0110"><code class="errqname">err:XC0110</code></dt><dd><p>It is a dynamic error if the
      evaluation of the XPath expression in option key for a given item returns either a
      sequence, an array, a map, or a function.</p><p>See: <a href="#err.inline.C0110">p:json-merge</a></p></dd><dt id="err.C0111"><code class="errqname">err:XC0111</code></dt><dd><p>
        It is a dynamic error if a document of an unsupported document type appears on 
        port source of p:json-join.</p><p>See: <a href="#err.inline.C0111">p:json-join</a></p></dd><dt id="err.C0112"><code class="errqname">err:XC0112</code></dt><dd><p>It is a dynamic error if more than one
            document appears on the port manifest.</p><p>See: <a href="#err.inline.C0112">p:archive</a></p></dd><dt id="err.C0118"><code class="errqname">err:XC0118</code></dt><dd><p>It is a dynamic error if an archive manifest is
        invalid according to the specification.</p><p>See: <a href="#err.inline.C0118">The archive manifest</a></p></dd><dt id="err.C0119"><code class="errqname">err:XC0119</code></dt><dd><p>It is a dynamic error if flatten is
neither “unbounded”, nor a string that may be cast to a non-negative integer.</p><p>See: <a href="#err.inline.C0119">p:json-join</a></p></dd><dt id="err.C0120"><code class="errqname">err:XC0120</code></dt><dd><p>It is a dynamic error if the relative-to
      option is not present and the document on the source port does not have a base
      URI.</p><p>See: <a href="#err.inline.C0120">p:archive-manifest</a>, <a href="#err.inline.C0120.1">p:unarchive</a></p></dd><dt id="err.C0121"><code class="errqname">err:XC0121</code></dt><dd><p>It is a dynamic error if a document appearing
        on the secondary port has a base URI that is not both absolute and 
        valid according to .</p><p>See: <a href="#err.inline.C0121">Invoking an XSLT 3.0 stylesheet</a>, <a href="#err.inline.C0121.1">Invoking an XSLT 2.0 stylesheet</a></p></dd><dt id="err.C0122"><code class="errqname">err:XC0122</code></dt><dd><p>It is a dynamic error if
  the given method is not supported.</p><p>See: <a href="#err.inline.C0122">p:http-request</a></p></dd><dt id="err.C0123"><code class="errqname">err:XC0123</code></dt><dd><p>It is a dynamic error if any key
  in the “auth” map is associated with a value that
  is not an instance of the required type.</p><p>See: <a href="#err.inline.C0123">p:http-request</a></p></dd><dt id="err.C0124"><code class="errqname">err:XC0124</code></dt><dd><p>It is a dynamic
        error if any key in the “parameters” map is
        associated with a value that is not an instance of the
        required type.</p><p>See: <a href="#err.inline.C0124">p:http-request</a></p></dd><dt id="err.C0125"><code class="errqname">err:XC0125</code></dt><dd><p>It is
        a dynamic error if the key
        “accept-multipart” as the value
        false() and a multipart response is
        detected.</p><p>See: <a href="#err.inline.C0125">p:http-request</a></p></dd><dt id="err.C0126"><code class="errqname">err:XC0126</code></dt><dd><p>It is a
        dynamic error if the XPath expression
        in assert evaluates to
        false.</p><p>See: <a href="#err.inline.C0126">p:http-request</a></p></dd><dt id="err.C0127"><code class="errqname">err:XC0127</code></dt><dd><p>It is a dynamic error if
  the headers map contains two keys that are the same
  when compared in a case-insensitive manner.</p><p>See: <a href="#err.inline.C0127">p:http-request</a></p></dd><dt id="err.C0128"><code class="errqname">err:XC0128</code></dt><dd><p>It is a dynamic error if the
  URI’s scheme is unknown or not supported.</p><p>See: <a href="#err.inline.C0128">p:http-request</a></p></dd><dt id="err.C0131"><code class="errqname">err:XC0131</code></dt><dd><p>It is a dynamic error if
      the processor cannot support the requested encoding.</p><p>See: <a href="#err.inline.C0131">p:http-request</a></p></dd><dt id="err.C0132"><code class="errqname">err:XC0132</code></dt><dd><p>It is a dynamic error if
          the override content encoding cannot be supported.</p><p>See: <a href="#err.inline.C0132">p:http-request</a></p></dd><dt id="err.C0133"><code class="errqname">err:XC0133</code></dt><dd><p>It is a dynamic error
if more than one document appears on the source port and
a content-type header is present and the content
type specified is not a multipart content type.</p><p>See: <a href="#err.inline.C0133">Construction of a multipart request</a></p></dd><dt id="err.C0146"><code class="errqname">err:XC0146</code></dt><dd><p>It is a dynamic error if the specified value
        for the override-content-types option is not an array of arrays, where the
        inner arrays have exactly two members of type xs:string.</p><p>See: <a href="#err.inline.C0146">Overriding content types</a></p></dd><dt id="err.C0147"><code class="errqname">err:XC0147</code></dt><dd><p>It is a dynamic
              error if the specified value is not a valid XPath regular
            expression.</p><p>See: <a href="#err.inline.C0147">Overriding content types</a>, <a href="#err.inline.C0147.1">p:text-replace</a>, <a href="#err.inline.C0147.2">p:unarchive</a></p></dd><dt id="err.C0150"><code class="errqname">err:XC0150</code></dt><dd><p>It is a 
dynamic error if evaluating the XPath expression
in option test on a context document results
in an error.</p><p>See: <a href="#err.inline.C0150">p:split-sequence</a></p></dd><dt id="err.C0201"><code class="errqname">err:XC0201</code></dt><dd><p>It is a dynamic error if the
            p:uncompress step cannot perform the requested content-type cast.</p><p>See: <a href="#err.inline.C0201">p:uncompress</a></p></dd><dt id="err.C0202"><code class="errqname">err:XC0202</code></dt><dd><p>It is a dynamic error if the compression
              format cannot be understood, determined and/or processed.</p><p>See: <a href="#err.inline.C0202">p:compress</a>, <a href="#err.inline.C0202.1">p:uncompress</a></p></dd><dt id="err.C0203"><code class="errqname">err:XC0203</code></dt><dd><p>It is a dynamic error
if the specified boundary is not valid (for example, if it begins with two hyphens “--”).</p><p>See: <a href="#err.inline.C0203">Construction of a multipart request</a></p></dd></dl></div>

</div></section>
<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>The list of formats
      supported by the p:archive step is
      implementation-defined. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>The list of archive formats that can be modified by p:archive is
              implementation-defined. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>The semantics of any additional attributes,
            elements and their values are
          implementation-defined. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>It is
              implementation-defined what other formats are
          supported. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>The semantics of the keys and the allowed values for these keys are
              implementation-defined. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>It is
            implementation-defined what other formats are supported. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>It is implementation-defined how the step determines
          the archive's format. See <a href="#c.archive" title="p:archive">Section 2.3, “p:archive”</a>.</li><li>The c:archive root element may contain additional
    implementation-defined attributes. See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>The default compression method is implementation-defined.
           See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>It is implementation-defined what
            other compression methods are supported. See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>The default
            compression method is implementation-defined.  See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>It is implementation-defined what compression levels are
            supported. See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>The c:entry elements may contain additional
          implementation-defined attributes. See <a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>.</li><li>The p:archive step may support additional,
              implementation-defined commands for ZIP files. See <a href="#cv.archive-zips" title="Handling of ZIP archives">Section 2.3.2, “Handling of ZIP archives”</a>.</li><li>The actual parameter names supported by p:archive for a particular format
        are implementation-defined. See <a href="#cv.archive-zips" title="Handling of ZIP archives">Section 2.3.2, “Handling of ZIP archives”</a>.</li><li>It is
            implementation-defined what other formats are supported. See <a href="#c.archive-manifest" title="p:archive-manifest">Section 2.4, “p:archive-manifest”</a>.</li><li>It is implementation-defined how the step determines
          the archive's format. See <a href="#c.archive-manifest" title="p:archive-manifest">Section 2.4, “p:archive-manifest”</a>.</li><li>The semantics of the keys and the allowed values for these
      keys are implementation-defined. See <a href="#c.archive-manifest" title="p:archive-manifest">Section 2.4, “p:archive-manifest”</a>.</li><li>Additional information provided for entries in p:archive-manifest is
        implementation-defined. See <a href="#c.archive-manifest" title="p:archive-manifest">Section 2.4, “p:archive-manifest”</a>.</li><li>The semantics of the keys and the allowed values for
         these keys are implementation-defined. See <a href="#c.cast-content-type" title="p:cast-content-type">Section 2.5, “p:cast-content-type”</a>.</li><li>The precise nature of the conversion from XML to JSON
                  is implementation-defined. See <a href="#casting-from-xml" title="Casting from an XML media type">Section 2.5.1, “Casting from an XML media type”</a>.</li><li>Casting from an XML media type to any other media type when
               the input document is not a c:data document is
               implementation-defined. See <a href="#casting-from-xml" title="Casting from an XML media type">Section 2.5.1, “Casting from an XML media type”</a>.</li><li>Casting from an HTML media type to a JSON media type is 
               implementation-defined. See <a href="#casting-from-html" title="Casting from an HTML media type">Section 2.5.2, “Casting from an HTML media type”</a>.</li><li>Casting from an HTML media type to any other media type is
               implementation-defined. See <a href="#casting-from-html" title="Casting from an HTML media type">Section 2.5.2, “Casting from an HTML media type”</a>.</li><li>It is implementation-defined whether
                  other result formats are supported. See <a href="#casting-from-json" title="Casting from a JSON media type">Section 2.5.3, “Casting from a JSON media type”</a>.</li><li>Casting from a JSON media type to an HTML media type is
               implementation-defined. See <a href="#casting-from-json" title="Casting from a JSON media type">Section 2.5.3, “Casting from a JSON media type”</a>.</li><li>Casting from a JSON media type to any other media type is
               implementation-defined. See <a href="#casting-from-json" title="Casting from a JSON media type">Section 2.5.3, “Casting from a JSON media type”</a>.</li><li>The precise way in which 
                  text documents are parsed into the XPath data model is 
                  implementation-defined. See <a href="#casting-from-text" title="Casting from a text media type">Section 2.5.4, “Casting from a text media type”</a>.</li><li>Casting from a text media type to any other media type is
               implementation-defined. See <a href="#casting-from-text" title="Casting from a text media type">Section 2.5.4, “Casting from a text media type”</a>.</li><li>Casting from any other media type to a HTML media type, a JSON media type
               or a text document is implementation-defined. See <a href="#casting-from-other" title="Casting from any other media type">Section 2.5.5, “Casting from any other media type”</a>.</li><li>Casting from any other media type to any other media type is 
               implementation-defined. See <a href="#casting-from-other" title="Casting from any other media type">Section 2.5.5, “Casting from any other media type”</a>.</li><li>Implementations of p:compare
must support the deep-equal method;
other supported methods are implementation-defined. See <a href="#c.compare" title="p:compare">Section 2.6, “p:compare”</a>.</li><li>If
fail-if-not-equal is false, and the
documents differ, an implementation-defined
summary of the differences between the two documents may appear on the
differences port. See <a href="#c.compare" title="p:compare">Section 2.6, “p:compare”</a>.</li><li>It is
              implementation-defined what other formats are supported. See <a href="#c.compress" title="p:compress">Section 2.7, “p:compress”</a>.</li><li>The semantics of the keys and the allowed values for these keys are
              implementation-defined. See <a href="#c.compress" title="p:compress">Section 2.7, “p:compress”</a>.</li><li>It is
implementation-defined what other algorithms are
supported. See <a href="#c.hash" title="p:hash">Section 2.12, “p:hash”</a>.</li><li>It is
implementation-defined how a multipart boundary
is constructed. See <a href="#c.http-multipart-request" title="Construction of a multipart request">Section 2.13.1, “Construction of a multipart request”</a>.</li><li>In the absence of an explicit type, the content
type is implementation-defined See <a href="#c.load" title="p:load">Section 2.19, “p:load”</a>.</li><li>Additional XML parameters are implementation-defined.
 See <a href="#c.load.xml" title="Loading XML data">Section 2.19.1, “Loading XML data”</a>.</li><li>Text parameters are implementation-defined.
 See <a href="#c.load.text" title="Loading text data">Section 2.19.2, “Loading text data”</a>.</li><li>Additional JSON parameters are implementation-defined.
 See <a href="#c.load.json" title="Loading JSON data">Section 2.19.3, “Loading JSON data”</a>.</li><li>The precise way in which HTML documents are parsed into the
XPath data model is implementation-defined. See <a href="#c.load.html" title="Loading HTML data">Section 2.19.4, “Loading HTML data”</a>.</li><li>HTML parameters are implementation-defined.
 See <a href="#c.load.html" title="Loading HTML data">Section 2.19.4, “Loading HTML data”</a>.</li><li>How a
processor interprets other media types is implementation-defined.
 See <a href="#c.load.binary" title="Loading binary data">Section 2.19.5, “Loading binary data”</a>.</li><li>Parameters for other media types
are implementation-defined.
 See <a href="#c.load.binary" title="Loading binary data">Section 2.19.5, “Loading binary data”</a>.</li><li>Support for other collations is implementation-defined. See <a href="#c.text-sort" title="p:text-sort">Section 2.36, “p:text-sort”</a>.</li><li>It is
                implementation-defined what other formats are
              supported. See <a href="#c.unarchive" title="p:unarchive">Section 2.38, “p:unarchive”</a>.</li><li>It is
                implementation-defined how the step determines the archive's
              format. See <a href="#c.unarchive" title="p:unarchive">Section 2.38, “p:unarchive”</a>.</li><li>The semantics of the keys and the allowed values for these keys are
            implementation-defined. See <a href="#c.unarchive" title="p:unarchive">Section 2.38, “p:unarchive”</a>.</li><li>It is
            implementation-defined what other formats are supported. See <a href="#c.uncompress" title="p:uncompress">Section 2.39, “p:uncompress”</a>.</li><li>It is implementation-defined how the step determines
          the compression format. See <a href="#c.uncompress" title="p:uncompress">Section 2.39, “p:uncompress”</a>.</li><li>The semantics of the keys and the allowed values for these keys are
      implementation-defined. See <a href="#c.uncompress" title="p:uncompress">Section 2.39, “p:uncompress”</a>.</li><li>If the
version is not specified, the version of UUID
computed is
implementation-defined. See <a href="#c.uuid" title="p:uuid">Section 2.41, “p:uuid”</a>.</li><li>Support for other versions of UUID, and the mechanism by which
the necessary inputs are made available for computing other versions,
is implementation-defined. See <a href="#c.uuid" title="p:uuid">Section 2.41, “p:uuid”</a>.</li><li>Support for
          XQueryX is implementation-defined. See <a href="#c.xquery" title="p:xquery">Section 2.47, “p:xquery”</a>.</li><li>The point in time returned as the current dateTime is
implementation-defined. See <a href="#c.xquery" title="p:xquery">Section 2.47, “p:xquery”</a>.</li><li>The implicit timezone is implementation-defined.
 See <a href="#c.xquery" title="p:xquery">Section 2.47, “p:xquery”</a>.</li><li>It is implementation-defined which XSLT
    version(s) is/are supported. See <a href="#c.xslt" title="p:xslt">Section 2.48, “p:xslt”</a>.</li><li>Whether static parameters are supported is
      implementation-defined and depends on the XSLT version (which must be
    3.0 or higher). See <a href="#c.xslt" title="p:xslt">Section 2.48, “p:xslt”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"><li>If the IRI reference specified by the base-uri option
on p:make-absolute-uris is absent and the input document has no base URI,
the results are implementation-dependent. See <a href="#c.make-absolute-uris" title="p:make-absolute-uris">Section 2.20, “p:make-absolute-uris”</a>.</li><li>The set of available documents (those that may be retrieved with a URI)
is implementation-dependent. See <a href="#c.xquery" title="p:xquery">Section 2.47, “p:xquery”</a>.</li><li>The set of available collections
is implementation-dependent. See <a href="#c.xquery" title="p:xquery">Section 2.47, “p:xquery”</a>.</li><li>How XSLT message termination errors are reported to the XProc processor is
      implementation-dependent. See <a href="#c.xslt" title="p:xslt">Section 2.48, “p:xslt”</a>.</li></ol>
</div></section>
</div></article>
<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">


<section id="normative-references" class="section"><div class="section-titlepage"><h2><bdi class="secno">B.1. </bdi>Normative References<a aria-label="§" class="self-link" href="#normative-references"/></h2></div><div class="content">
  
  <div id="normative-references.2" class="bibliolist">
    <div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
    <div id="xmlschema-2" class="bibliomixed"><p>[<span class="abbrev">W3C XML Schema: Part 2</span>] 
<a href="https://www.w3.org/TR/xmlschema-2/"><span class="citetitle"><cite>XML Schema Part 2:
Datatypes Second Edition</cite></span></a>.
Paul V. Biron and Ashok Malhotra, editors.
World Wide Web Consortium, 28 October 2004.
</p></div>
    <div id="xpath31" class="bibliomixed"><p>[<span class="abbrev">XPath 3.1</span>] 
<a href="https://www.w3.org/TR/xpath31/"><span class="citetitle"><cite>XML Path Language (XPath)
	3.1</cite></span></a>. Jonathan Robie, Michael Dyck, Josh Spiegel, editors.
W3C Recommendation. 21 March 2017.</p></div>
    <div id="xpath31-functions" class="bibliomixed"><p>[<span class="abbrev">XPath and XQuery Functions and Operators 3.1</span>] 
<a href="https://www.w3.org/TR/xpath-functions-31/"><span class="citetitle"><cite>XPath and XQuery Functions and  Operators 3.1</cite></span></a>. Michael Kay, editor.
W3C Recommendation. 21 March 2017</p></div>
    <div id="xslt30" class="bibliomixed"><p>[<span class="abbrev">XSLT 3.0</span>] 
<a href="https://www.w3.org/TR/xslt-30/"><span class="citetitle"><cite>XSL Transformations (XSLT)
Version 3.0</cite></span></a>. Michael Kay, editor.
W3C Recommendation. 8 June 2017.</p></div>
    <div id="xinclude" class="bibliomixed"><p>[<span class="abbrev">XInclude</span>] 
<a href="https://www.w3.org/TR/xinclude/"><span class="citetitle"><cite>XML Inclusions
(XInclude) Version 1.0 (Second Edition)</cite></span></a>. Jonathan Marsh,
David Orchard, and Daniel Veillard, editors.
W3C Recommendation. 15 November 2006.</p></div>
    <div id="rfc1321" class="bibliomixed"><p>[<span class="abbrev">RFC 1321</span>] 
<a href="https://doi.org/10.17487/RFC1321"><span class="citetitle"><cite>RFC 1321:
The MD5 Message-Digest Algorithm</cite></span></a>.
R. Rivest. Network Working Group, IETF, April 1992.</p></div>
    <div id="rfc1521" class="bibliomixed"><p>[<span class="abbrev">RFC 1521</span>]  <a href="https://doi.org/10.17487/RFC1521"><span class="citetitle"><cite>RFC 1521: MIME
(Multipurpose Internet Mail Extensions) Part One: Mechanisms for
Specifying and Describing the Format of Internet Message Bodies</cite></span></a>.
N. Borenstein. Network Working Group, IETF, September 1993.</p></div>
    <div id="rfc2046" class="bibliomixed"><p>[<span class="abbrev">RFC 2046</span>] 
<a href="https://doi.org/10.17487/RFC2046"><span class="citetitle"><cite>RFC 2046:
Multipurpose Internet Mail Extensions (MIME) Part Two: Media
Types</cite></span></a>. N. Freed, N. Borenstein, editors. Internet
Engineering Task Force. November, 1996.</p></div>
    <div id="rfc2119" class="bibliomixed"><p>[<span class="abbrev">RFC 2119</span>] 
<a href="https://doi.org/10.17487/RFC2119"><span class="citetitle"><cite>Key words for use in RFCs to Indicate Requirement Levels</cite></span></a>.
S. Bradner.
Network Working Group, IETF,
Mar 1997.
</p></div>
    <div id="rfc2617" class="bibliomixed"><p>[<span class="abbrev">RFC 2617</span>] 
<a href="https://doi.org/10.17487/RFC2617"><span class="citetitle"><cite>RFC 2617:
HTTP Authentication: Basic and Digest Access Authentication</cite></span></a>.
J. Franks, P. Hallam-Baker, J. Hostetler, S. Lawrence, P. Leach, A. Luotonen, L. Stewart. June, 1999
.</p></div>
    <div id="rfc3986" class="bibliomixed"><p>[<span class="abbrev">RFC 3986</span>] 
<a href="https://doi.org/10.17487/RFC3986"><span class="citetitle"><cite>RFC 3986:
Uniform Resource Identifier (URI): General Syntax</cite></span></a>.
T. Berners-Lee, R. Fielding, and L. Masinter, editors.
Internet Engineering Task Force. January, 2005.</p></div>
    <div id="bib.uuid" class="bibliomixed"><p>[<span class="abbrev">UUID</span>] 
<a href="https://www.itu.int/ITU-T/studygroups/com17/oid.html"><span class="citetitle"><cite>ITU
X.667: Information technology - Open Systems Interconnection -
Procedures for the operation of OSI Registration Authorities:
Generation and registration of Universally Unique Identifiers (UUIDs)
and their use as ASN.1 Object Identifier components</cite></span></a>.
2004.</p></div>
    <div id="bib.sha" class="bibliomixed"><p>[<span class="abbrev">SHA1</span>] 
<a href="https://csrc.nist.gov/publications/detail/fips/180/1/archive/1995-04-17"><span class="citetitle"><cite>Federal Information Processing Standards Publication 180-1: Secure Hash Standard</cite></span></a>.
1995.</p></div>
    <div id="bib.crc" class="bibliomixed"><p>[<span class="abbrev">CRC32</span>] 
“32-Bit Cyclic Redundancy Codes for Internet Applications”,
<span class="citetitle"><cite>The International Conference on Dependable Systems and Networks:
459</cite></span>. <span class="biblioid">10.1109/DSN.2002.1028931</span>.
P. Koopman. June 2002.
</p></div>
    <div id="zip" class="bibliomixed"><p>[<span class="abbrev">ZIP</span>] 
    <a href="https://pkware.cachefly.net/webdocs/casestudies/APPNOTE.TXT"><span class="citetitle"><cite>.ZIP File Format Specification</cite></span></a>.</p></div>
    <div id="gzip" class="bibliomixed"><p>[<span class="abbrev">GZIP</span>] 
    <a href="https://tools.ietf.org/html/rfc1952"><span class="citetitle"><cite>GZIP file format specification version 4.3</cite></span></a>.</p></div>
  </div>
</div></section>
</div></article>

<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>
<article id="credits" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">E. </bdi>Credits<a aria-label="§" class="self-link" href="#credits"/></h2></header><div class="content">


<p>This document is derived from
<a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</a> published by the W3C. It was developed
by the <em class="citetitle">XML Processing Model Working Group</em> and edited by
Norman Walsh, Alex Miłowski, and Henry Thompson.</p>

<p>The editors of this specification extend their gratitude to everyone
who contributed to this document and all of the versions that came before it.</p>
</div></article>

<article id="changelog" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">F. </bdi>Change Log<a aria-label="§" class="self-link" href="#changelog"/></h2></header><div class="content">


<p>This appendix catalogs non-editorial changes made after the August 2020
“<a href="https://spec.xproc.org/lastcall-2020-08/head/steps/">last call</a>”
draft:</p>

<div class="orderedlist">



<ol style="list-style: decimal;"><li>
<p>Clarified that the manifest has precedence in the <a href="#c.archive"><code class="tag-element">p:archive</code></a> step.
(issue
<a href="https://github.com/xproc/3.0-steps/issues/462">462</a>.)
</p>
</li><li>
<p>Changed the type of several options from <code class="tag-element">xs:token</code> to
<code class="tag-element">xs:string</code>
(issue
<a href="https://github.com/xproc/3.0-steps/issues/490">490</a>.)
</p>
</li><li>
<p>Changed the type of the <code class="option">parameters</code> option from
<code class="code">map(xs:string,xs:untypedAtomic+)</code> to
<code class="code">map(xs:string,xs:anyAtomicType+)</code>.
(issue
<a href="https://github.com/xproc/3.0-steps/issues/491">491</a>.)
</p>
</li></ol></div>

<p>These are the non-editorial changes made after the February 2020
“<a href="https://spec.xproc.org/lastcall-2020-02/head/steps/">last call</a>”
draft:</p>

 <div class="orderedlist">
   
  
   
   
   
   
   
   
   
   
   
   
   
   
   
 <ol style="list-style: decimal;"><li>
    <p>For <a href="#c.cast-content-type"><code class="tag-element">p:cast-content-type</code></a> the expected result type for casting a 
    <code class="literal">c:param-set</code> document to “<code class="literal">application/json</code>” was
    specified as <code class="literal">map(xs:QName, xs:string)</code>. (2020-03-15)</p>
  </li><li>
    <p>In <a href="#c.http-request"><code class="tag-element">p:http-request</code></a>, instead of using all document properties (with a few
      explicit exceptions) as headers, only document properties in the
      <code class="code">http://www.w3.org/ns/xproc-http</code> namespace will be used. (2020-03-18)</p>
  </li><li>
     <p><a href="#cv.archive-manifest" title="The archive manifest">Section 2.3.1, “The archive manifest”</a>: An attribute
       <code class="code">c:entry/@content-type</code> was added to the archive manifest, to be filled by the
       <a href="#c.archive-manifest"><code class="tag-element">p:archive-manifest</code></a> step. (2020-03-20)</p>
   </li><li>
     <p>A <code class="option">static-parameters</code> was added to <a href="#c.xslt"><code class="tag-element">p:xslt</code></a>. (2020-03-23)</p>
   </li><li>
     <p>The <code class="option">override-content-types</code> option was added to <a href="#c.archive-manifest"><code class="tag-element">p:archive-manifest</code></a> and <a href="#c.unarchive"><code class="tag-element">p:unarchive</code></a>. (2020-03-30)</p>
   </li><li>
        <p>Clarified the regular expression matching for <a href="#c.text-replace"><code class="tag-element">p:text-replace</code></a> and
            <a href="#c.unarchive"><code class="tag-element">p:unarchive</code></a>. Added an error code for invalid regular expressions. (2020-04-02)</p>
   </li><li>
     <p>Replaced errors XC0070 and XC0130 with XD0079. (2020-04-09)</p>
   </li><li>
     <p>Changed signature of <a href="#c.split-sequence"><code class="tag-element">p:split-sequence</code></a> so that any document can appear one port 
       source. (2020-05-22)</p>
   </li><li>
     <p>Change the behavior of the <code class="option">global-context-item</code> option of <a href="#c.xslt"><code class="tag-element">p:xslt</code></a>. (2020-06-10)</p>
   </li><li>
     <p>Clarified which steps may produce PSVI annotations. (2020-06-09)</p>
   </li><li>
     <p>Clarified the behaviour in <a href="#c.archive"><code class="tag-element">p:archive</code></a>: A missing resource referenced by
     c:archive/c:entry/@href is only an error for command = 'create'. (2020-06-11)</p>
   </li><li>
     <p>Option <code class="option">populate-default-collection</code> is added to the signature of <a href="#c.xslt"><code class="tag-element">p:xslt</code></a>. (2020-06-20)</p>
   </li><li>
     <p>Clarified how the default <code class="literal">content-type</code> header of <a href="#c.http-request"><code class="tag-element">p:http-request</code></a> is 
     constructed if a single document appears on <code class="port">source</code> port. (2020-06-20)</p>
   </li><li>
     <p>Added error (XD0079) to <a href="#c.http-request"><code class="tag-element">p:http-request</code></a> and <a href="#c.load"><code class="tag-element">p:load</code></a> for invalid content-types. (2020-06-23)</p>
   </li><li>
     <p>Changed signature of the <code class="port">result</code> port of <a href="#c.load"><code class="tag-element">p:load</code></a> to <code class="literal">sequence="false"</code> and
       adapted the prose accordingly. (2020-06-24)</p>
   </li></ol></div>
</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/json.html"><head><title>XProc 3.0: JSON steps</title><meta charset="utf-8"/><link rel="alternate" title="XML" href="specification.xml"/><link rel="alternate" title="Latest editor's draft" href="http://www.w3.org/XML/XProc/docs/langspec.html"/><link rel="alternate" title="Latest Public Working Draft" href="http://www.w3.org/TR/xproc/"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.3.9"/><meta name="description" content="Abstract This specification describes the p:json-join step&#xA;for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/prism.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body><article class="specification"><div class="head" id="spec.head"><h1>XProc 3.0: JSON steps</h1><h2>Editor's Draft  <time datetime="2019-07-28T14:02:36Z">28 July 2019 at 14:02 UTC (<a href="https://github.com/xproc/3.0-steps/commit/a318c7ab299d164adcfc23dea4df81a37b5689c4">build 150</a>)</time></h2><dl><dt>This Version:</dt><dd><a href="https://xproc.github.io/3.0-steps/master/head/os/">https://xproc.github.io/3.0-steps/master/head/os/</a></dd><dt>Latest Version:</dt><dd><a href="http://spec.xproc.org/master/head/os/">http://spec.xproc.org/master/head/os/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Repository:</dt><dd><a href="http://github.com/xproc/3.0-steps">This specification on GitHub</a></dd><dd><a href="http://github.com/xproc/3.0-specification/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a>, 
	  automatic <a href="diff.html">change markup</a> from the previous draft
          courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><span class="copyright">Copyright © <span class="years">2018</span> <span class="holders"><span class="holder">@@FIXME:</span></span></span></p><hr/><div class="abstract"><h2>Abstract</h2>
<p>This specification describes the <code class="code">p:json-join</code> step
for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</div><div class="status"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>

<p><em>This section describes the status of this document at
the time of its publication. Other documents may supersede this
document.</em></p>

<p>This document is derived from
<a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
An XML Pipeline Language</a> published by the W3C.</p>
</div></div><hr/><div class="lists-of-titles"><div class="toc"><h2 id="TableOfContents">Table of Contents</h2><ul class="toc"><li><span>1 <a href="#introduction">Introduction</a></span></li><li><span>2 <a href="#c.json-join">p:json-join</a></span></li><li><span>3 <a href="#errors">Step Errors</a></span></li><li><span>A <a href="#conformance">Conformance</a></span><ul class="toc"><li><span>A.1 <a href="#implementation-defined">Implementation-defined features</a></span></li><li><span>A.2 <a href="#implementation-dependent">Implementation-dependent features</a></span></li></ul></li><li><span>B <a href="#references">References</a></span></li><li><span>C <a href="#glossary">Glossary</a></span></li><li><span>D <a href="#ancillary-files">Ancillary files</a></span></li></ul></div></div>


<section id="introduction" class="section"><div class="section-titlepage"><h2>1 Introduction</h2></div><div class="content">


<p>This specification describes the
<code class="code">p:json-join</code> XProc step.
A machine-readable description of
these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Familarity with the
general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
</div></section>

<section id="c.json-join" class="section"><div class="section-titlepage"><h2>2 p:json-join</h2></div><div class="content">


<p>The <code class="code">p:json-join</code> step joins a sequence of JSON
documents into a single JSON document (an array). If the sequence on
port <code class="code">source</code> is empty, the empty sequence is returned on
port <code class="code">result</code>.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:json-join</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">flatten-arrays</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>If option <code class="code">flatten-arrays</code> is
<code class="literal">false</code>, a member in the array is created for each
document in the sequence appearing on port<code class="code">source</code>.
Therefore the produced array with have the same number of members as
the number of documents appearing on port <code class="code">source</code>. However
if <code class="code">flatten-arrays</code> is <code class="literal">true</code>, for each
member of an array appearing at the top level of a JSON document on
port <code class="code">source</code> a new member in the resulting array will be
created.</p>

</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2>3 Step Errors</h2></div><div class="content">


<p>This step can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following errors can be raised by this step:</p>

<div id="step-error-summary"><dl class="errs"/></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2>A Conformance</h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2>A.1 Implementation-defined features</h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"/>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2>A.2 Implementation-dependent features</h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2>B References</h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="http://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="http://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2>C Glossary</h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2>D Ancillary files</h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/run.html"><head><title>XProc 3.0: dynamic pipeline execution</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the p:run&#xA;step for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: dynamic pipeline execution</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:31:09Z">17:31 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/run/">https://spec.xproc.org/master/head/run/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: dynamic pipeline execution</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the <code class="code">p:run</code>
step for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#c.run"><bdi class="secno">2. </bdi>p:run</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#example-run"><bdi class="secno">2.1. </bdi>Example</a></li><li class="tocline"><a class="tocxref" href="#c.run.19"><bdi class="secno">2.2. </bdi>Document properties</a></li></ul></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">3. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>This specification describes the <code class="code">p:run</code> XProc step.
A machine-readable description of this step may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Familarity with the general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
</div></section>

<section id="c.run" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>p:run<a aria-label="§" class="self-link" href="#c.run"/></h2></div><div class="content">


<p>The <code class="tag-element">p:run</code> step runs a dynamically loaded pipeline.</p>

<p id="d198e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:run<br/>  name? = <var>NCName</var>&gt;<br/>    (<a href="#p.with-input">p:with-input</a>? &amp; <br/>     <a href="#p.run-input">p:run-input</a>* &amp; <br/>     <a href="#p.run-option">p:run-option</a>* &amp; <br/>     <a href="#p.output">p:output</a>*)<br/>&lt;/p:run&gt;</code></p>

<p>The <code class="tag-element">p:run</code> step has a single, anonymous input that accepts the 
pipeline to be run. Otherwise, it functions similar to an atomic step in that
you can define input connections and option values for it, albeit not with the
usual <code class="tag-element">p:with-input</code> and <code class="tag-element">p:with-option</code> connections.</p>

<p>The <code class="tag-element">p:run</code> step
expects a single pipeline document on its anonymous input port (“pipeline port”).
Independent of how the pipeline is provided, it <span class="rfc2119" id="c.run.5.2">must</span>
  have a <code class="tag-attribute">version</code> attribute on its root element.
<a id="err.inline.C0200"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0200"><code class="errqname">err:XC0200</code></a>)
if the pipeline input to the <code class="tag-element">p:run</code> step is not a
valid pipeline.
The anonymous input port is not primary, although it is the only <code class="tag-element">p:input</code>
port of <code class="tag-element">p:run</code>. Therefore it will not automatically connect to the 
<em>default readable port</em> (see 
<cite><a href="../xproc/#connections">Connections</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>);
it needs to be connected to its pipeline 
input explicitly.</p>

<p>The pipeline that appears on the pipeline port is evaluated
using the inputs and options specified on the <code class="tag-element">p:run</code> step by means of the 
<code class="tag-element">p:run-input</code> and <code class="tag-element">p:run-option</code> elements, respectively.</p>

<p>The <code class="tag-element">p:run-input</code> element is a special case of the <code class="tag-element">p:with-input</code>
element for passing inputs to the pipeline being run.</p>

<p id="d228e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:run-input<br/>  <strong>port</strong> = <var>NCName</var><br/>  select? = <var>XPathExpression</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  primary? = <var>boolean</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:run-input&gt;</code></p>

<p>Similarly, the <code class="tag-element">p:run-option</code> element is a special case
of the <code class="tag-element">p:with-option</code> element for passing options to the
pipeline being run.</p>

<p id="d248e0" class="element-syntax element-syntax-language-construct"><code>&lt;p:run-option<br/>  <strong>name</strong> = <var>EQName</var><br/>  as? = <var>XPathSequenceType</var><br/>  <strong>select</strong> = <var>XPathExpression</var><br/>  collection? = <var>boolean</var><br/>  href? = { <var>anyURI</var> }<br/>  pipe? = <var>string</var><br/>  static? = <var>boolean</var><br/>  exclude-inline-prefixes? = <var>ExcludeInlinePrefixes</var>&gt;<br/>    ((<a href="#p.empty">p:empty</a> | <br/>       (<a href="#p.document">p:document</a> | <br/>        <a href="#p.pipe">p:pipe</a> | <br/>        <a href="#p.inline">p:inline</a>)*) | <br/>     <var>anyElement</var>*)<br/>&lt;/p:run-option&gt;</code></p>

<p>In terms of binding
inputs and options, these elements have the same syntax and semantics as <code class="tag-element">p:with-input</code> 
and <code class="tag-element">p:with-option</code>. In addition, the boolean attribute <code class="tag-attribute">primary</code>
can be used on <code class="tag-element">p:run-input</code> to declare whether the respective port of the dynamically 
executed pipeline is expected to be the primary input port. If the attribute is omitted, it
is assumed to be “<code class="literal">false</code>” if there are multiple <code class="tag-element">p:run-input</code> connections
and “<code class="literal">true</code>” if there is exactly one <code class="tag-element">p:run-input</code> connection. 
<a id="err.inline.C0201"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0201"><code class="errqname">err:XC0201</code></a>)
if the dynamically executed pipeline implicitly or explicitly declares a primary input port with 
a different name than implicitly or explicitly specified in the <code class="tag-element">p:run</code> invocation.
Input ports of the dynamically executed pipeline that are not declared with <code class="tag-element">p:run-input</code> on
the <code class="tag-element">p:run</code> invocation will receive a <code class="tag-element">p:empty</code> connection.
Input ports that are declared in <code class="tag-element">p:run-input</code> but not in the dynamically
executed pipeline will be silently ignored.</p>
<p>The context item used to evaluate expressions on <code class="tag-element">p:run-option</code> comes from the 
<em>default readable port</em> of the <code class="tag-element">p:run</code> step. Additionally, if 
<code class="tag-element">p:run-input</code> implicitly or explicitly identifies a primary input port, the default
readable port will be connected to it if no explicit connection is provided.</p>
  
  <p>Other than <code class="tag-element">p:with-option</code>, <code class="tag-element">p:run-option</code> accepts a boolean attribute
  <code class="tag-attribute">static</code> that defaults to “<code class="literal">false</code>”. If it is “<code class="literal">true</code>”,
  the option value will be supplied to static analysis of the executed pipeline as a static option with the
  same name.</p>
  
  <p>Options of the dynamically executed pipeline that are not declared with <code class="tag-element">p:run-option</code> on the <code class="tag-element">p:run</code>
    invocation will receive an empty sequence as their value. Options that are declared on <code class="tag-element">p:run-option</code> but not in the dynamically 
    executed pipeline will be silently ignored.</p>
  
    <p>Each output port of the pipeline can appear as a same-named output port of the <code class="tag-element">p:run</code> step. In order for
      this to happen, the port needs to be explicitly declared in the <code class="tag-element">p:run</code> step. In contrast to output declarations
      of compound steps or of <code class="tag-element">p:declare-pipeline</code> with a subpipeline, such an output declaration may not establish a
      connection to any port of another step or of the pipeline to be run.</p>
    <p>If the pipeline has an output that is not declared on the <code class="tag-element">p:run</code> step, that output is discarded, and the
      corresponding port on the <code class="tag-element">p:run</code> step does not exist. If the <code class="tag-element">p:run</code> step declares an output port that
      is not provided by the pipeline, an empty sequence appears on that port.</p>
    <p><a id="err.inline.C0202"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0202"><code class="errqname">err:XC0202</code></a>)
if the dynamically executed pipeline implicitly or explicitly declares a primary output port with 
a different name than implicitly or explicitly specified in the <code class="tag-element">p:run</code> invocation.</p>

    <section id="example-run" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.1. </bdi>Example<a aria-label="§" class="self-link" href="#example-run"/></h3></div><div class="content">
      
      <figure id="ex.c.run" class="example-wrapper"><div class="title">Example 1. Dynamic Execution of a Transformation/Validation Pipeline</div><div class="example"><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
  xmlns:c="http://www.w3.org/ns/xproc-step"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" version="3.0" 
  name="sample-run-invocation"&gt;
  &lt;p:variable name="xsl-params" select="map{'foo': 'bar'}" 
    as="map(xs:QName, item()*)"/&gt;
  &lt;p:variable name="assert-valid" select="false()" as="xs:boolean"/&gt;
  &lt;p:variable name="mode" as="xs:QName?" select="()"/&gt;
  &lt;p:variable name="template" as="xs:QName?" select="()"/&gt;
  &lt;p:run name="runme"&gt;
    &lt;p:with-input href="transform-n-validate.xpl"/&gt;
    &lt;p:run-option name="mode" select="$mode"/&gt;
    &lt;p:run-option name="template" select="$template"/&gt;
    &lt;p:run-option name="xslt-parameters" select="$xsl-params"/&gt;
    &lt;p:run-option name="assert-valid" select="$assert-valid"/&gt;
    &lt;p:run-input port="source" href="my.xml" primary="true"/&gt;
    &lt;p:run-input port="stylesheet" href="my.xsl"/&gt;
    &lt;p:run-input port="xsd" href="my.xsd"/&gt;
    &lt;p:output port="result" primary="true"/&gt;
    &lt;p:output port="report"/&gt;
  &lt;/p:run&gt;
&lt;/p:declare-step&gt;</code></pre><p>with this pipeline in <code class="filename">transform-n-validate.xpl</code>:</p><pre class="programlisting language-markup xml"><code>&lt;p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
  xmlns:c="http://www.w3.org/ns/xproc-step"
  xmlns:xs="http://www.w3.org/2001/XMLSchema" version="3.0" 
  name="transform-n-validate"&gt;
  &lt;p:input port="source" primary="true" sequence="true"/&gt;
  &lt;p:input port="stylesheet"/&gt;
  &lt;p:input port="xsd"/&gt;
  &lt;p:option name="assert-valid" as="xs:boolean" select="false()"/&gt;
  &lt;p:option name="xslt-parameters" as="map(xs:QName, item()*)?"/&gt;
  &lt;p:option name="mode" as="xs:QName?"/&gt;
  &lt;p:option name="template" as="xs:QName?"/&gt;
  &lt;p:output port="result" primary="true"/&gt;
  &lt;p:output port="report" pipe="report@xsdval"/&gt;
  &lt;p:xslt&gt;
    &lt;p:with-option name="initial-mode" select="$mode"/&gt;
    &lt;p:with-option name="template-name" select="$template"/&gt;
    &lt;p:with-option name="parameters" select="$xslt-parameters"/&gt;
    &lt;p:with-input port="stylesheet" pipe="stylesheet"/&gt;
  &lt;/p:xslt&gt;
  &lt;p:validate-with-xml-schema name="xsdval"&gt;
    &lt;p:with-option name="assert-valid" select="$assert-valid"/&gt;
    &lt;p:with-input port="schema" pipe="xsd@transform-n-validate"/&gt;
  &lt;/p:validate-with-xml-schema&gt;
&lt;/p:declare-step&gt;</code></pre></div></figure>
      
    </div></section>
  
<section id="c.run.19" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.2. </bdi>Document properties<a aria-label="§" class="self-link" href="#"/></h3></div><div class="content">

<p>The extent to which document properties are preserved depends on the steps
        in the dynamically executed pipeline.</p>
</div></section>
</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>This step can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following errors can be raised by this step:</p>

<div id="step-error-summary"><dl class="errs"><dt id="err.C0200"><code class="errqname">err:XC0200</code></dt><dd><p>It is a dynamic error
if the pipeline input to the p:run step is not a
valid pipeline.</p><p>See: <a href="#err.inline.C0200">p:run</a></p></dd><dt id="err.C0201"><code class="errqname">err:XC0201</code></dt><dd><p>It is a dynamic error
if the dynamically executed pipeline implicitly or explicitly declares a primary input port with 
a different name than implicitly or explicitly specified in the p:run invocation.</p><p>See: <a href="#err.inline.C0201">p:run</a></p></dd><dt id="err.C0202"><code class="errqname">err:XC0202</code></dt><dd><p>It is a dynamic error
if the dynamically executed pipeline implicitly or explicitly declares a primary output port with 
a different name than implicitly or explicitly specified in the p:run invocation.</p><p>See: <a href="#err.inline.C0202">p:run</a></p></dd></dl></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"/>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/validation.html"><head><title>XProc 3.0: validation steps</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the p:validate-with-nvdl, p:validate-with-relax-ng,&#xA;p:validate-with-schematron, and p:validate-with-xml-schema&#xA;step for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: validation steps</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:31:18Z">17:31 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/validation/">https://spec.xproc.org/master/head/validation/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: validation steps</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the <code class="code">p:validate-with-nvdl</code>, <code class="code">p:validate-with-relax-ng</code>,
<code class="code">p:validate-with-schematron</code>, and <code class="code">p:validate-with-xml-schema</code>
step for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>

  <p>This document is derived from
  <a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
  An XML Pipeline Language</a> published by the W3C.</p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#validation-common"><bdi class="secno">2. </bdi>Common Options and Outputs</a></li><li class="tocline"><a class="tocxref" href="#c.validate-with-nvdl"><bdi class="secno">3. </bdi>Validate with NVDL</a></li><li class="tocline"><a class="tocxref" href="#c.validate-with-relax-ng"><bdi class="secno">4. </bdi>Validate with RELAX NG</a></li><li class="tocline"><a class="tocxref" href="#c.validate-with-schematron"><bdi class="secno">5. </bdi>Validate with Schematron</a></li><li class="tocline"><a class="tocxref" href="#c.validate-with-xml-schema"><bdi class="secno">6. </bdi>Validate with XML Schema</a></li><li class="tocline"><a class="tocxref" href="#c.validate-with-json-schema"><bdi class="secno">7. </bdi>Validate with JSON schema</a></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">8. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>This specification describes the <code class="code">p:validate-with-relax-ng</code>,
<code class="code">p:validate-with-schematron</code>, <code class="code">p:validate-with-xml-schema</code>,
<code class="code">p:validate-with-nvdl</code>, and <code class="code">p:validate-with-json-schema</code>
steps. Each is independently optional. A machine-readable description of
these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>
  
<p>Familiarity with the
general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>

<p>As described in <cite><a href="../xproc/#psvi-support">PSVIs in XProc</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>,
steps may not produce PSVI output unless that behavior is explicitly
described. In this specification, the steps that may produce PSVI
output are <a href="#c.validate-with-nvdl"><code class="tag-element">p:validate-with-nvdl</code></a>, <a href="#c.validate-with-schematron"><code class="tag-element">p:validate-with-schematron</code></a>
and <a href="#c.validate-with-xml-schema"><code class="tag-element">p:validate-with-xml-schema</code></a>.</p>

</div></section>
  
  <section id="validation-common" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>Common Options and Outputs<a aria-label="§" class="self-link" href="#validation-common"/></h2></div><div class="content">
    
    <p>All steps in this specification provide a boolean option <code class="option">assert-valid</code>. If any of the validated
      documents is found to be invalid according to the respective schema, and possibly other parameters that influence
      determination of validity, a dynamic error is raised.</p>
    <div id="note-assert-valid" class="note admonition"><h3>Note</h3><div class="admonition-body">
      <p>Historically, the validation steps (apart from <a href="#c.validate-with-schematron"><code class="tag-element">p:validate-with-schematron</code></a>) could only report errors
      by setting <code class="option">assert-valid</code> to <code class="literal">true</code> and catching the errors. A <code class="tag-element">c:errors</code> 
        document on the <code class="port">error</code> port of the corresponding <code class="tag-element">p:catch</code> recovery pipeline had to be sent to an 
        output, either verbatim or after postprocessing. Now, if <code class="option">assert-valid</code> is <code class="literal">false</code>, 
        an XVRL document will be available on the <code class="port">report</code> port of the validation step. It uses the XVRL severity 
        vocabulary to indicate whether the validation failed, and to which degree. This allows more nuance in reporting
      errors. Previously, <code class="literal">assert-valid="true"</code> on <a href="#c.validate-with-schematron"><code class="tag-element">p:validate-with-schematron</code></a> would always
      throw an error even if the reported findings were only intended as less severe, for example if the schema author used 
        <code class="literal">info</code> or <code class="literal">warning</code> in <code class="code">sch:report/@role</code>.</p>
    </div></div>
    <p>If no such error is raised, each step generates at least one validation report document on its
        <code class="port">report</code> port. Unless another format is requested, the mandatory report document for all steps
      except <a href="#c.validate-with-schematron"><code class="tag-element">p:validate-with-schematron</code></a>
        <span class="rfc2119" id="validation-common.4.3">should</span> be an [<a href="#xvrl"><span class="abbrev">XVRL</span></a>] document. A report format may be requested
    by the <code class="option">report-format</code> option. <span id="impl-1">The supported values for the <code class="option">report-format</code>
    option are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>. A processor <span class="rfc2119" id="validation-common.4.6.3">should</span> at least support
    the value “<code class="literal">xvrl</code>” for the XML validation steps and “<code class="literal">svrl</code>” for
      <a href="#c.validate-with-schematron"><code class="tag-element">p:validate-with-schematron</code></a>.</span>
    </p>
    <p><a id="err.inline.C0117"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0117"><code class="errqname">err:XC0117</code></a>) if a <code class="option">report-format</code> option 
      was specified that the processor does not support.</p>
    <p>If a step performs multiple validations on a single document (for example, embedded Schematron validations 
      in a Relax NG schema), all individual XVRL reports need to be consolidated into a single XVRL report by the step.</p>
    <p>Each of the validation steps has a <code class="option">parameters</code> option. <span id="impl-2">The parameters supported by the
validation steps and their semantics are
        <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>, and they can be different for each validation step.</span> A special key in the
        <code class="literal">c</code> namespace, <code class="uri">http://www.w3.org/ns/xproc-step</code>, called
        <code class="literal">c:compile</code>, can hold a map itself that controls schema compilation. 
      Schema compilation is, for example, the process of converting a Schematron schema into an XSLT
      stylesheet. The <code class="literal">c:compile</code> map will be used as parameters for the compilation process.</p>
    <p>Map entries in the <code class="literal">xvrl</code> namespace, <code class="uri">http://www.xproc.org/ns/xvrl</code> 
      will be passed as parameters to the XVRL generation process. XProc implementations that implement any of the XML validation steps
        <span class="rfc2119" id="validation-common.8.3">should</span> support the basic parameters that are defined in the [<a href="#xvrl"><span class="abbrev">XVRL</span></a>]
      specification, <code class="literal">xvrl:default-severity</code>, <code class="literal">xvrl:language</code>, 
      <code class="literal">xvrl:map-to-severity</code>, and <code class="literal">xvrl:xpath-notation</code>.</p>
  </div></section>

  <section id="c.validate-with-nvdl" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>Validate with NVDL<a aria-label="§" class="self-link" href="#c.validate-with-nvdl"/></h2></div><div class="content">
    

    <p>The <code class="tag-element">p:validate-with-nvdl</code> step applies [<a href="#iso19757-4"><span class="abbrev">NVDL</span></a>] validation to the
        <code class="port">source</code> document.</p>

    <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:validate-with-nvdl</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">nvdl</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">schemas</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml</code><code>"</code><code>&gt;</code><br/>          <code>&lt;p:empty/&gt;</code><br/>     <code>&lt;/p:input&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert-valid</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">report-format</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'xvrl'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

    <p>The <code class="port">source</code> document is validated using the namespace dispatching rules contained in the 
      <code class="port">nvdl</code> document. <a id="err.inline.C0154"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0154"><code class="errqname">err:XC0154</code></a>) 
        if the document supplied on <code class="port">nvdl</code> port is not a valid NVDL document.</p>

    <p>The dispatching rules may contain URI references that point to the actual schemas to be
      used. As long as these schemas are accessible, it is not necessary to pass anything on the
      schemas port. However, if one or more schemas are provided on the <code class="port">schemas</code> port,
      then these schemas should be used in validation. </p>

    <p><a id="err.inline.C0053"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0053"><code class="errqname">err:XC0053</code></a>) if the <code class="option">assert-valid</code> option on
      <code class="tag-element">p:validate-with-nvdl</code> is
          <code class="literal">true</code> and the input document is not valid.</p>

    <p>The output from this step is a copy of the input. The output of this step <span class="rfc2119" id="c.validate-with-nvdl.7.1">may</span> include PSVI
      annotations.</p>
    
    <div id="ednote-nvdl" class="note editorial admonition"><h3>Note</h3><div class="admonition-body">
      <p>Should the step also provide the <code class="option">dtd-attribute-values</code> and <code class="option">dtd-id-idref-warnings</code>
      options for Relax NG validations? Is there a way to instruct <a href="https://github.com/relaxng/jing-trang">Jing</a> 
        to use these options, maybe in NVDL extension attributes? Probably not in the foreseeable future.</p>
    </div></div>

    <section id="c.validate-with-nvdl.9" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
      
      <p>All document properties on the <code class="port">source</code> port are preserved
        on the <code class="port">result</code> port. No document properties on the <code class="port">schemas</code> and <code class="port">nvdl</code> ports 
        are preserved. No document properties are preserved on the <code class="port">report</code> port.</p>
    </div></section>
  </div></section>
  
  <section id="c.validate-with-relax-ng" class="section"><div class="section-titlepage"><h2><bdi class="secno">4. </bdi>Validate with RELAX NG<a aria-label="§" class="self-link" href="#c.validate-with-relax-ng"/></h2></div><div class="content">


<p>The <code class="tag-element">p:validate-with-relax-ng</code> step applies [<a href="#iso19757-2"><span class="abbrev">RELAX NG</span></a>] validation 
  to the <code class="port">source</code> document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:validate-with-relax-ng</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">schema</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">dtd-attribute-values</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">dtd-id-idref-warnings</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert-valid</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">report-format</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'xvrl'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The values of the <code class="option">dtd-attribute-values</code> and <code class="option">dtd-id-idref-warnings</code> options
<span class="rfc2119" id="c.validate-with-relax-ng.4.3">must</span> be booleans.</p>

<p>If the <code class="port">schema</code> document has an XML media type, then
it <span class="rfc2119" id="c.validate-with-relax-ng.5.2">must</span> be interpreted as a RELAX NG Grammar. If
the <code class="port">schema</code> document has a text media type, then it
<span class="rfc2119" id="c.validate-with-relax-ng.5.4">must</span> be interpreted as a 
[<a href="#relaxng-compact-syntax"><span class="abbrev">RELAX NG
Compact Syntax</span></a>] document for validation.
<a id="err.inline.C0153"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0153"><code class="errqname">err:XC0153</code></a>) 
if the document supplied on <code class="port">schema</code> port cannot be interpreted
 as an RELAX NG Grammar. </p>

<p>If the <code class="option">dtd-attribute-values</code> option is
<code class="literal">true</code>, then the attribute value defaulting conventions of
[<a href="#relaxng-dtd-compat"><span class="abbrev">RELAX NG DTD Compatibility</span></a>] are also applied.</p>

<p>If the <code class="option">dtd-id-idref-warnings</code> option is
<code class="literal">true</code>, then the validator <span class="rfc2119" id="c.validate-with-relax-ng.7.3">should</span>
treat a schema that is incompatible with the ID/IDREF/IDREFs feature
of [<a href="#relaxng-dtd-compat"><span class="abbrev">RELAX NG DTD Compatibility</span></a>] as if the document
was invalid.
</p>

<p><a id="err.inline.C0155"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0155"><code class="errqname">err:XC0155</code></a>)
if the <code class="option">assert-valid</code> option on <code class="tag-element">p:validate-with-relax-ng</code>
is <code class="literal">true</code>
and the input document is not valid.</p>

<p>The output from this step is a copy of the input, possibly
augmented by application of the
[<a href="#relaxng-dtd-compat"><span class="abbrev">RELAX NG DTD Compatibility</span></a>]. The output of this step
<span class="rfc2119" id="c.validate-with-relax-ng.9.2">may</span> include PSVI annotations.</p>

<p><span id="impl-3">Support for [<a href="#relaxng-dtd-compat"><span class="abbrev">RELAX NG DTD Compatibility</span></a>] is
<em class="glossterm"><a href="#dt-implementation-defined">implementation defined</a></em>.</span></p>

<section id="c.validate-with-relax-ng.11" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>All document properties on
the <code class="port">source</code> port are preserved on the <code class="port">result</code> port.
No document properties on the <code class="port">schema</code> port are preserved. No document
properties are preserved on the <code class="port">report</code> port.</p>
</div></section>
</div></section>

  <section id="c.validate-with-schematron" class="section"><div class="section-titlepage"><h2><bdi class="secno">5. </bdi>Validate with Schematron<a aria-label="§" class="self-link" href="#c.validate-with-schematron"/></h2></div><div class="content">


<p>The <code class="tag-element">p:validate-with-schematron</code> step applies
[<a href="#iso19757-3"><span class="abbrev">Schematron</span></a>]
processing to the <code class="port">source</code> document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:validate-with-schematron</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">schema</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">phase</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'#DEFAULT'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>   </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert-valid</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">report-format</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'svrl'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p><a id="err.inline.C0151"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0151"><code class="errqname">err:XC0151</code></a>) 
  if the document supplied on <code class="port">schema</code> port is not a valid Schematron 
  document.</p>

    <p><a id="err.inline.C0054"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0054"><code class="errqname">err:XC0054</code></a>)
if the <code class="option">assert-valid</code> option is <code class="literal">true</code>
and any Schematron assertions fail.</p>

    <div id="note-assert-valid_schematron" class="note admonition"><h3>Note</h3><div class="admonition-body">
      <p>A Schematron validation with <code class="literal">assert-valid="true"</code> will fail if any validation message is
        produced by <code class="tag-element">sch:assert</code> or <code class="tag-element">sch:report</code>, even if the severity level of the failed assertion or
        the successful report is below a certain threshold, for example if there is only an <code class="literal">info</code>
        message. (The severity is conventionally conveyed by the <code class="literal">@role</code> attribute on <code class="tag-element">sch:assert</code> or 
        <code class="tag-element">sch:report</code>.) </p>
    </div></div>
    
<p>The value of the <code class="option">phase</code> option identifies the
Schematron validation phase with which validation begins.</p>

<p>The <code class="option">parameters</code> option provides name/value pairs which
correspond to Schematron external variables, to parameters that influence
code generation, or to parameters that influence SVRL to XVRL conversion.</p>

    <p>There are multiple Schematron implementations. <span id="impl-4">How the Schematron implementation is selected is
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> A processor might select an implementation based on the
      schema’s <code class="code attribute">queryBinding</code> attribute and/or provide configuration options. In addition,
      the special parameter map entry <code class="literal">c:implementation</code> (value: QName) may be used to select a
      Schematron implementation that the processor supports. <span id="impl-5">The list of supported Schematron implementations and
        their associated values is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> If a requested implementation
      is not available, the processor may throw an error or select another implementation.</p>
    
    <p>The <code class="option">parameters</code> map may contain two special entries, <code class="literal">c:compile</code> and
        <code class="literal">c:xvrl</code>, both are maps. If a code-generating implementation such as [<a href="#schematron-skeleton"><span class="abbrev">Schematron Skeleton</span></a>] is used, the entries of the <code class="literal">c:compile</code> map, for example
        <code class="literal">allow-foreign</code>, will be passed to the code generator. 
      <span id="impl-6">Which parameters the 
        <code class="literal">c:compile</code> map supports for a given Schematron implementation is
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
    <p>If the Schematron implementation produces SVRL by default, the SVRL to XVRL conversion can be influenced by the
      entries of the <code class="literal">c:xvrl</code> map. The same map, with potentially another set of allowed keys and
      values, can be used to influence XVRL generation from another reporting language. 
      <span id="impl-7">Which parameters this conversion from native reporting format to XVRL supports is
          <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>
    <p>All other parameters of the <code class="option">parameters</code> option will be passed to the generated code if applicable,
      or to a hypothetical native Schematron validator that does without code generation.</p>

<p>The <code class="port">result</code> output from this step is a copy of the
input.</p>

<p>The output of this step
<span class="rfc2119" id="c.validate-with-schematron.14.1">may</span> include PSVI annotations.</p>

<section id="c.validate-with-schematron.15" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>All document properties
on the <code class="port">source</code> port are preserved on the <code class="port">result</code> port.
No document properties on the <code class="port">schema</code> port are preserved. No document
properties are preserved on the <code class="port">report</code> port.</p>
</div></section>
</div></section>

  <section id="c.validate-with-xml-schema" class="section"><div class="section-titlepage"><h2><bdi class="secno">6. </bdi>Validate with XML Schema<a aria-label="§" class="self-link" href="#c.validate-with-xml-schema"/></h2></div><div class="content">


<p>The <code class="tag-element">p:validate-with-xml-schema</code> step applies
[<a href="#xmlschema-1"><span class="abbrev">W3C XML Schema: Part 1</span></a>]
validity assessment to the <code class="port">source</code> input.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:validate-with-xml-schema</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">schema</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">use-location-hints</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">try-namespaces</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert-valid</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">mode</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'strict'</code><code>"</code> <code class="attr values-attr">values</code><code>="</code><code class="value values-value">('strict','lax')</code><code>"</code><code>/&gt;</code><code/><code class="comment">&lt;!-- </code><span class="opt-type">string</span><code class="comment"> --&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                    </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">report-format</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'xvrl'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p><a id="err.inline.C0152"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0152"><code class="errqname">err:XC0152</code></a>) 
if the document supplied on <code class="port">schema</code> port is not a valid XML schema 
document.</p>
    

<p>The values of the <code class="option">use-location-hints</code>,
<code class="option">try-namespaces</code>, and
<code class="option">assert-valid</code>
options
 <span class="rfc2119" id="c.validate-with-xml-schema.5.4">must</span> be boolean.</p>

<p>The value of the <code class="option">mode</code> option
<span class="rfc2119" id="c.validate-with-xml-schema.6.2">must</span> be an NMTOKEN whose value is either
“<code class="literal">strict</code>” or “<code class="literal">lax</code>”.</p>

<p>Validation is performed against the set of schemas represented
by the documents on the <code class="port">schema</code> port. These schemas must
be used in preference to any schema locations provided by schema
location hints encountered during schema validation, that is, schema
locations supplied for <code class="code">xs:import</code> or
<code class="code">xsi:schema-location</code>, or determined by
schema-processor-defined namespace-based strategies, for the
namespaces covered by the documents available on the schemas port.</p>

<p>If <code class="code">xs:include</code> elements occur within the supplied
schema documents, they are treated like any other
external documents (see [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]).
<span id="impl-8">It is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> if the documents supplied
on the <code class="port">schemas</code> port are considered when resolving
<code class="code">xs:include</code> elements in the schema documents provided.</span>
</p>

<p>The <code class="option">use-location-hints</code> and
<code class="option">try-namespaces</code> options allow the pipeline author to
control how the schema processor should attempt to locate schema
documents necessary but not provided on the <code class="port">schema</code>
port. Any schema documents provided on the <code class="port">schema</code> port
<span class="rfc2119" id="c.validate-with-xml-schema.9.5">must</span> be used in preference to schema documents
located by other means.</p>

<p>If the <code class="option">use-location-hints</code> option is
“<code class="literal">true</code>”, the processor <span class="rfc2119" id="c.validate-with-xml-schema.10.3">should</span>
make use of schema location hints to locate schema documents. If the
option is “<code class="literal">false</code>”, the processor
<span class="rfc2119" id="c.validate-with-xml-schema.10.5">should</span> ignore any such hints.</p>

<p>If the <code class="option">try-namespaces</code> option is
“<code class="literal">true</code>”, the processor <span class="rfc2119" id="c.validate-with-xml-schema.11.3">should</span>
attempt to dereference the namespace URI to locate schema documents.
If the
option is “<code class="literal">false</code>”, the processor
<span class="rfc2119" id="c.validate-with-xml-schema.11.5">should not</span> dereference namespace URIs.</p>

<p>The <code class="option">mode</code> option allow the pipeline author to
control how schema validation begins. The “<code class="literal">strict</code>”
mode means that the document element must be declared and
schema-valid, otherwise it will be treated as invalid. The
“<code class="literal">lax</code>” mode means that the
absence of a declaration for the document element does not itself
count as an unsuccessful outcome of validation.</p>

<p>If the step specifies a <code class="option">version</code>, then that version
of XML Schema <span class="rfc2119" id="c.validate-with-xml-schema.13.2">must</span> be used to process the validation.
<a id="err.inline.C0011"/>It is a
<em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0011"><code class="errqname">err:XC0011</code></a>) if the specified schema version
is not available. If the step does not specify a version, the
implementation may use any version it has available and may use any means
to determine what version to use, including, but not limited to,
examining the version of the schema(s).</p>

<p><a id="err.inline.C0156"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0156"><code class="errqname">err:XC0156</code></a>)
if the <code class="option">assert-valid</code> option on <code class="tag-element">p:validate-with-xml-schema</code> 
is <code class="literal">true</code>
and the input document is not valid. If the <code class="option">assert-valid</code>
option is <code class="literal">false</code>, it is not an error for the document
to be invalid. In this case, if the implementation does not
support the PSVI, <code class="tag-element">p:validate-with-xml-schema</code> is essentially
just an “identity” step, but if the implementation <em>does</em>
support the PSVI, then the resulting document will have additional type
information (at least for the subtrees that are valid).</p>

<p>When XML Schema validation assessment
is performed, the processor is invoked in the mode specified by the
<code class="option">mode</code> option.
<a id="err.inline.C0055"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0055"><code class="errqname">err:XC0055</code></a>)
if the implementation does not support the specified mode.
</p>

<p>The <code class="port">result</code> of the assessment is a document with the
Post-Schema-Validation-Infoset (PSVI) ([<a href="#xmlschema-1"><span class="abbrev">W3C XML Schema: Part 1</span></a>]) annotations, if the pipeline implementation
supports such annotations. If not, the input document is reproduced
with any defaulting of attributes and elements performed as specified
by the XML Schema recommendation.</p>

<section id="c.validate-with-xml-schema.17" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>All document properties
on the <code class="port">source</code> port are preserved on the <code class="port">result</code> port.
No document properties on the <code class="port">schemas</code> port are preserved.</p>
</div></section>
</div></section>

<section id="c.validate-with-json-schema" class="section"><div class="section-titlepage"><h2><bdi class="secno">7. </bdi>Validate with JSON schema<a aria-label="§" class="self-link" href="#c.validate-with-json-schema"/></h2></div><div class="content">
  
  <p>The <code class="tag-element">p:validate-with-json-schema</code> step applies
    a JSON schema validation (as defined in [<a href="#jsonschema2020-12"><span class="abbrev">JSON schema</span></a>] and
    other publications) to the <code class="port">source</code> input.</p>
  
  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:validate-with-json-schema</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">schema</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">false</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">report</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml json</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">assert-valid</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">default-version</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>             </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">report-format</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'xvrl'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The option <code class="option">default-version</code> can be used to
  control the schema's version in case it does not specify one itself. If
  the schema does not specify a version and option <code class="option">default-version</code>
  is empty, the version used is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

  <p><a id="err.inline.C0163"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0163"><code class="errqname">err:XC0163</code></a>) 
    if the selected version is not supported.</p>
  
  <p><a id="err.inline.C0164"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0164"><code class="errqname">err:XC0164</code></a>) 
    if the document supplied on <code class="port">schema</code> port is not a valid JSON schema 
    document in the selected version.</p>
  
  <p><a id="err.inline.C0165"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0165"><code class="errqname">err:XC0165</code></a>)
    if the <code class="option">assert-valid</code> option on <code class="tag-element">p:validate-with-json-schema</code> 
    is <code class="literal">true</code>
    and the input document is not valid.</p>
  
  <section id="c.validate-with-json-schema.8" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>All document properties on the <code class="port">source</code> port are preserved
      on the <code class="port">result</code> port. No document properties on the <code class="port">schemas</code> are preserved. 
      No document properties are preserved on the <code class="port">report</code> port.</p>
  </div></section>
</div></section>  
  
<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">8. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>This step can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following errors can be raised by this step:</p>

<div id="step-error-summary"><dl class="errs"><dt id="err.C0011"><code class="errqname">err:XC0011</code></dt><dd><p>It is a
dynamic error if the specified schema version
is not available.</p><p>See: <a href="#err.inline.C0011">Validate with XML Schema</a></p></dd><dt id="err.C0053"><code class="errqname">err:XC0053</code></dt><dd><p>It is a dynamic error if the assert-valid option on
      p:validate-with-nvdl is
          true and the input document is not valid.</p><p>See: <a href="#err.inline.C0053">Validate with NVDL</a></p></dd><dt id="err.C0054"><code class="errqname">err:XC0054</code></dt><dd><p>It is a dynamic error
if the assert-valid option is true
and any Schematron assertions fail.</p><p>See: <a href="#err.inline.C0054">Validate with Schematron</a></p></dd><dt id="err.C0055"><code class="errqname">err:XC0055</code></dt><dd><p>It is a dynamic error
if the implementation does not support the specified mode.</p><p>See: <a href="#err.inline.C0055">Validate with XML Schema</a></p></dd><dt id="err.C0117"><code class="errqname">err:XC0117</code></dt><dd><p>It is a dynamic error if a report-format option 
      was specified that the processor does not support.</p><p>See: <a href="#err.inline.C0117">Common Options and Outputs</a></p></dd><dt id="err.C0151"><code class="errqname">err:XC0151</code></dt><dd><p>It is a dynamic error 
  if the document supplied on schema port is not a valid Schematron 
  document.</p><p>See: <a href="#err.inline.C0151">Validate with Schematron</a></p></dd><dt id="err.C0152"><code class="errqname">err:XC0152</code></dt><dd><p>It is a dynamic error 
if the document supplied on schema port is not a valid XML schema 
document.</p><p>See: <a href="#err.inline.C0152">Validate with XML Schema</a></p></dd><dt id="err.C0153"><code class="errqname">err:XC0153</code></dt><dd><p>It is a dynamic error 
if the document supplied on schema port cannot be interpreted
 as an RELAX NG Grammar. </p><p>See: <a href="#err.inline.C0153">Validate with RELAX NG</a></p></dd><dt id="err.C0154"><code class="errqname">err:XC0154</code></dt><dd><p>It is a dynamic error 
        if the document supplied on nvdl port is not a valid NVDL document.</p><p>See: <a href="#err.inline.C0154">Validate with NVDL</a></p></dd><dt id="err.C0155"><code class="errqname">err:XC0155</code></dt><dd><p>It is a dynamic error
if the assert-valid option on p:validate-with-relax-ng
is true
and the input document is not valid.</p><p>See: <a href="#err.inline.C0155">Validate with RELAX NG</a></p></dd><dt id="err.C0156"><code class="errqname">err:XC0156</code></dt><dd><p>It is a dynamic error
if the assert-valid option on p:validate-with-xml-schema 
is true
and the input document is not valid.</p><p>See: <a href="#err.inline.C0156">Validate with XML Schema</a></p></dd><dt id="err.C0163"><code class="errqname">err:XC0163</code></dt><dd><p>It is a dynamic error 
    if the selected version is not supported.</p><p>See: <a href="#err.inline.C0163">Validate with JSON schema</a></p></dd><dt id="err.C0164"><code class="errqname">err:XC0164</code></dt><dd><p>It is a dynamic error 
    if the document supplied on schema port is not a valid JSON schema 
    document in the selected version.</p><p>See: <a href="#err.inline.C0164">Validate with JSON schema</a></p></dd><dt id="err.C0165"><code class="errqname">err:XC0165</code></dt><dd><p>It is a dynamic error
    if the assert-valid option on p:validate-with-json-schema 
    is true
    and the input document is not valid.</p><p>See: <a href="#err.inline.C0165">Validate with JSON schema</a></p></dd></dl></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>The supported values for the report-format
    option are implementation-defined. A processor should at least support
    the value “xvrl” for the XML validation steps and “svrl” for
      p:validate-with-schematron. See <a href="#validation-common" title="Common Options and Outputs">Section 2, “Common Options and Outputs”</a>.</li><li>The parameters supported by the
validation steps and their semantics are
        implementation-defined, and they can be different for each validation step. See <a href="#validation-common" title="Common Options and Outputs">Section 2, “Common Options and Outputs”</a>.</li><li>How the Schematron implementation is selected is
          implementation-defined. See <a href="#c.validate-with-schematron" title="Validate with Schematron">Section 5, “Validate with Schematron”</a>.</li><li>The list of supported Schematron implementations and
        their associated values is implementation-defined. See <a href="#c.validate-with-schematron" title="Validate with Schematron">Section 5, “Validate with Schematron”</a>.</li><li>Which parameters the 
        c:compile map supports for a given Schematron implementation is
          implementation-defined. See <a href="#c.validate-with-schematron" title="Validate with Schematron">Section 5, “Validate with Schematron”</a>.</li><li>Which parameters this conversion from native reporting format to XVRL supports is
          implementation-defined. See <a href="#c.validate-with-schematron" title="Validate with Schematron">Section 5, “Validate with Schematron”</a>.</li><li>It is
implementation-defined if the documents supplied
on the schemas port are considered when resolving
xs:include elements in the schema documents provided. See <a href="#c.validate-with-xml-schema" title="Validate with XML Schema">Section 6, “Validate with XML Schema”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xvrl" class="bibliomixed"><p>[<span class="abbrev">XVRL</span>] <a href="https://spec.xproc.org/xvrl/"><span class="citetitle"><cite>Extensible 
  Validation Reporting Language</cite></span></a>
2019.
</p></div>
<div id="iso19757-2" class="bibliomixed"><p>[<span class="abbrev">RELAX NG</span>] ISO/IEC JTC 1/SC 34.
<a href="https://www.iso.org/iso/iso_catalogue/catalogue_tc/catalogue_detail.htm?csnumber=52348"><span class="citetitle"><cite>ISO/IEC 19757-2:2008(E)
Document Schema Definition Language (DSDL) -- Part 2:
Regular-grammar-based
validation -- RELAX NG</cite></span></a>
2008.
</p></div>
<div id="iso19757-3" class="bibliomixed"><p>[<span class="abbrev">Schematron</span>] ISO/IEC JTC 1/SC 34.
<span class="citetitle"><cite>ISO/IEC 19757-3:2016(E) Document Schema Definition
Languages (DSDL) — Part 3: Rule-based validation — Schematron</cite></span>
2016.
</p></div>
<div id="iso19757-4" class="bibliomixed"><p>[<span class="abbrev">NVDL</span>] ISO/IEC JTC 1/SC 34.
<span class="citetitle"><cite>ISO/IEC 19757-4:2006(E) Document Schema Definition
Languages (DSDL) — Part 4: Namespace-based Validation Dispatching Language (NVDL)</cite></span>
2006.
</p></div>
<div id="schematron-skeleton" class="bibliomixed"><p>[<span class="abbrev">Schematron Skeleton</span>] 
  <a href="https://schematron.com/front-page/the-schematron-skeleton-implementation/"><span class="citetitle"><cite>Schematron 
  “Skeleton” Implementation</cite></span></a>
  2017.
  </p></div>
<div id="relaxng-compact-syntax" class="bibliomixed"><p>[<span class="abbrev">RELAX NG
Compact Syntax</span>] ISO/IEC JTC 1/SC 34.
<span class="citetitle"><cite>ISO/IEC 19757-2:2003/Amd 1:2006 Document Schema Definition
Languages (DSDL) — Part 2: Grammar-based validation — RELAX NG AMENDMENT 1
Compact Syntax</cite></span>
2006.
</p></div>
<div id="relaxng-dtd-compat" class="bibliomixed"><p>[<span class="abbrev">RELAX NG DTD Compatibility</span>] 
<span class="citetitle"><cite>RELAX NG DTD Compatibility</cite></span>.
OASIS Committee Specification.
3 December 2001.
</p></div>
<div id="xmlschema-1" class="bibliomixed"><p>[<span class="abbrev">W3C XML Schema: Part 1</span>] 
<a href="https://www.w3.org/TR/xmlschema-1/"><span class="citetitle"><cite>XML Schema Part 1:
Structures Second Edition</cite></span></a>.
Henry S. Thompson, David Beech, Murray Maloney, et. al., editors.
World Wide Web Consortium, 28 October 2004.
</p></div>
<div id="jsonschema2020-12" class="bibliomixed"><p>[<span class="abbrev">JSON schema</span>] 
  <a href="https://json-schema.org/draft/2020-12/json-schema-validation.html"><span class="citetitle"><cite>JSON Schema Validation: A Vocabulary for 
    Structural Validation of JSON</cite></span></a>.
A.Wright, H. Andrews and B. Hutton, editors.
Internet Engineering Task Force. June, 2022.</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/paged-media.html"><head><title>XProc 3.0: paged media steps</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the p:css-formatter&#xA;and p:xsl-formatter&#xA;steps for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: paged media steps</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:31:00Z">17:31 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/paged-media/">https://spec.xproc.org/master/head/paged-media/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: paged media steps</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the <code class="code">p:css-formatter</code>
and <code class="code">p:xsl-formatter</code>
steps for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>

  <p>This document is derived from
  <a href="https://www.w3.org/TR/2010/REC-xproc-20100511/">XProc:
  An XML Pipeline Language</a> published by the W3C.</p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#c.css-formatter"><bdi class="secno">2. </bdi>p:css-formatter</a></li><li class="tocline"><a class="tocxref" href="#c.xsl-formatter"><bdi class="secno">3. </bdi>p:xsl-formatter</a></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">4. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>This specification describes the
<code class="code">p:css-formatter</code> and
<code class="code">p:xsl-formatter</code> XProc steps.
A machine-readable description of
these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Familarity with the
general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
</div></section>

<section id="c.css-formatter" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>p:css-formatter<a aria-label="§" class="self-link" href="#c.css-formatter"/></h2></div><div class="content">


<p>The <code class="tag-element">p:css-formatter</code> step applies [<a href="#CSS"><span class="abbrev">CSS</span></a>]
formatting to an XML or HTML document.
The output of this step is often, but not necessarily, a PDF document.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:css-formatter</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">stylesheet</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code><code>&gt;</code><br/>          <code>&lt;p:empty/&gt;</code><br/>     <code>&lt;/p:input&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">content-type</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>               </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The document on the <code class="port">source</code> port is formatted using one
or more CSS stylesheets.
The content-type of the output is controlled by the
<code class="option">content-type</code> option. This option specifies a media
type as defined by [<a href="#media-types"><span class="abbrev">IANA Media Types</span></a>]. 
  <a id="err.inline.D0079"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
    a valid media type of the form 
    “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
    or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.  
The option may
include media type parameters as well (e.g.
"application/someformat; charset=UTF-8"). <span id="impl-1">The use of media type
parameters on the <code class="option">content-type</code> option is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
<span id="impl-2">If the <code class="option">content-type</code> option is not
specified, the output type is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> The default
<span class="rfc2119" id="c.css-formatter.4.7">should</span> be PDF.
<a id="err.inline.C0204"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0204"><code class="errqname">err:XC0204</code></a>) if the requested
content-type is not supported.
</p>

<p>If one or more stylesheets are provided on the <code class="port">stylesheet</code> port,
they <span class="rfc2119" id="c.css-formatter.5.2">should</span> be used. 
<span id="impl-3">The precise way that the <code class="tag-element">p:css-formatter</code> step selects
stylesheets is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
Because CSS stylesheets may have import statements that rely on relative
URI references, it may be more convenient for authors and implementors to
allow stylesheets to be specified as a list of URIs (in, for example,
one of the <code class="option">parameters</code>).</p>

<p><span id="impl-4">A formatter may take any number of optional rendering
parameters via the step's <code class="option">parameters</code>; such parameters
are defined by the CSS implementation used and are
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>
<span id="impl-5">The CSS level and the particular CSS features supported by
<code class="tag-element">p:css-formatter</code> are
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
</p>

<section id="c.css-formatter.8" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>No document properties are preserved.</p>
</div></section>
</div></section>

<section id="c.xsl-formatter" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>p:xsl-formatter<a aria-label="§" class="self-link" href="#c.xsl-formatter"/></h2></div><div class="content">


<p>The <code class="tag-element">p:xsl-formatter</code> step receives an [<a href="#xsl11"><span class="abbrev">XSL 1.1</span></a>] document and renders the content.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:xsl-formatter</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">content-type</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>               </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The content-type of the output is controlled by the
<code class="option">content-type</code> option. This option specifies a media
type as defined by [<a href="#media-types"><span class="abbrev">IANA Media Types</span></a>]. 
  <a id="err.inline.D0079.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0079"><code class="errqname">err:XD0079</code></a>) if a supplied content-type is not 
    a valid media type of the form 
    “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em>+<em class="replaceable"><code>ext</code></em></code>” 
    or “<code class="literal"><em class="replaceable"><code>type</code></em>/<em class="replaceable"><code>subtype</code></em></code>”.  
The option may
include media type parameters as well (e.g.
"application/someformat; charset=UTF-8"). <span id="impl-6">The use of media type
parameters on the <code class="option">content-type</code> option is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p><span id="impl-7">If the <code class="option">content-type</code> option is not specified,
the output type is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span> The default <span class="rfc2119" id="c.xsl-formatter.5.2">should</span> be
PDF.
<a id="err.inline.C0204.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0204"><code class="errqname">err:XC0204</code></a>) if the requested
content-type is not supported.
</p>

<p><span id="impl-8">A formatter may take any number of optional rendering
parameters via the step's <code class="option">parameters</code>; such parameters
are defined by the XSL implementation used and are
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>The output of this step is a document containing the result of
processing. This is often, but not necessarily, a PDF document.</p>

<section id="c.xsl-formatter.8" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>No document properties are preserved.</p>
</div></section>
</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">4. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>This step can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following errors can be raised by this step:</p>

<div id="step-error-summary"><dl class="errs"><dt id="err.C0204"><code class="errqname">err:XC0204</code></dt><dd><p>It is a dynamic error if the requested
content-type is not supported.</p><p>See: <a href="#err.inline.C0204">p:css-formatter</a>, <a href="#err.inline.C0204.1">p:xsl-formatter</a></p></dd></dl></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>The use of media type
parameters on the content-type option is
implementation-defined. See <a href="#c.css-formatter" title="p:css-formatter">Section 2, “p:css-formatter”</a>.</li><li>If the content-type option is not
specified, the output type is
implementation-defined. See <a href="#c.css-formatter" title="p:css-formatter">Section 2, “p:css-formatter”</a>.</li><li>The precise way that the p:css-formatter step selects
stylesheets is implementation-defined. See <a href="#c.css-formatter" title="p:css-formatter">Section 2, “p:css-formatter”</a>.</li><li>A formatter may take any number of optional rendering
parameters via the step's parameters; such parameters
are defined by the CSS implementation used and are
implementation-defined. See <a href="#c.css-formatter" title="p:css-formatter">Section 2, “p:css-formatter”</a>.</li><li>The CSS level and the particular CSS features supported by
p:css-formatter are
implementation-defined. See <a href="#c.css-formatter" title="p:css-formatter">Section 2, “p:css-formatter”</a>.</li><li>The use of media type
parameters on the content-type option is
implementation-defined. See <a href="#c.xsl-formatter" title="p:xsl-formatter">Section 3, “p:xsl-formatter”</a>.</li><li>If the content-type option is not specified,
the output type is implementation-defined. See <a href="#c.xsl-formatter" title="p:xsl-formatter">Section 3, “p:xsl-formatter”</a>.</li><li>A formatter may take any number of optional rendering
parameters via the step's parameters; such parameters
are defined by the XSL implementation used and are
implementation-defined. See <a href="#c.xsl-formatter" title="p:xsl-formatter">Section 3, “p:xsl-formatter”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="CSS" class="bibliomixed"><p>[<span class="abbrev">CSS</span>] 
<a href="https://www.w3.org/TR/css-2018/"><span class="citetitle"><cite>CSS Snapshot 2018</cite></span></a>.
Tab Atkins Jr., Elika J. Etemad, and Florial Rivoal editors.
W3C Note 22 January 2019.</p></div>
<div id="xsl11" class="bibliomixed"><p>[<span class="abbrev">XSL 1.1</span>] 
<a href="https://www.w3.org/TR/xsl/"><span class="citetitle"><cite>Extensible Stylesheet
Language (XSL) Version 1.1</cite></span></a>.
Anders Berglund, editor. W3C Recommendation. 5 December 2006.</p></div>
<div id="media-types" class="bibliomixed"><p>[<span class="abbrev">IANA Media Types</span>] 
<a href="https://www.iana.org/assignments/media-types/"><span class="citetitle"><cite>IANA MIME Media Types</cite></span></a>. Internet Engineering Task Force.
</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/os.html"><head><title>XProc 3.0: operating system steps</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the p:os-exec and&#xA;p:os-info steps&#xA;for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: operating system steps</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:30:55Z">17:30 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/os/">https://spec.xproc.org/master/head/os/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: operating system steps</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the <code class="code">p:os-exec</code> and
<code class="code">p:os-info</code> steps
for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#c.os-info"><bdi class="secno">2. </bdi>p:os-info</a></li><li class="tocline"><a class="tocxref" href="#c.os-exec"><bdi class="secno">3. </bdi>p:os-exec</a></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">4. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>This specification describes the
<code class="code">p:os-info</code> and
<code class="code">p:os-exec</code> XProc steps.
A machine-readable description of
these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Familarity with the
general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
</div></section>

<section id="c.os-info" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>p:os-info<a aria-label="§" class="self-link" href="#c.os-info"/></h2></div><div class="content">
  

  <p>The <code class="code">p:os-info</code> step returns information about the
  operating system on which the processor is running.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:os-info</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code><code>/&gt;</code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The step returns a <code class="tag-element">c:result</code> element with attributes
  describing properties of the system. It <span class="rfc2119" id="c.os-info.4.2">must</span>
  include the following properties. The attribute can be an empty string if they do not
  apply to the runtime environment. For example <code class="code">cwd</code> will be an empty string
    on systems which have no concept of a working directory the value of the
    attribute will be empty.</p>
  <div class="variablelist">
    
    
    
    
    
    
    
    
  <dl><dt><span class="term"><code class="tag-attribute">file-separator</code></span></dt><dd>
        <p>The file separator; usually <code class="code">"/"</code> on Unix, <code class="code">"\"</code> on Windows.</p>
      </dd><dt><span class="term"><code class="tag-attribute">path-separator</code></span></dt><dd>
        <p>The path separator; usually <code class="code">":"</code> on Unix, <code class="code">";"</code> on Windows.</p>
      </dd><dt><span class="term"><code class="tag-attribute">os-architecture</code></span></dt><dd>
        <p>The operating system architecture, for example <code class="code">"i386"</code>.</p>
      </dd><dt><span class="term"><code class="tag-attribute">os-name</code></span></dt><dd>
        <p>The name of the operating system, for example <code class="code">"Mac OS X"</code>.</p>
      </dd><dt><span class="term"><code class="tag-attribute">os-version</code></span></dt><dd>
        <p>The version of the operating system, for example <code class="code">"10.5.6"</code>.</p>
      </dd><dt><span class="term"><code class="tag-attribute">cwd</code></span></dt><dd>
        <p>The current working directory.</p>
      </dd><dt><span class="term"><code class="tag-attribute">user-name</code></span></dt><dd>
        <p>The login name of the effective user, for example <code class="code">"ndw"</code>.</p>
      </dd><dt><span class="term"><code class="tag-attribute">user-home</code></span></dt><dd>
        <p>The home directory of the effective user, for example <code class="code">"/home/ndw"</code>.</p>
      </dd></dl></div>

    <p>The <code class="tag-element">c:result</code> element can contain zero or more <code class="tag-element">c:environment</code> elements
      that identify the environment variables available. These elements have a mandatory
        <code class="code">name</code> and <code class="code">value</code> attribute, reflecting name and value of the
      environment variable. Implementations <span class="rfc2119" id="c.os-info.6.5">should</span> include all available
      operating system environment variables.</p>

  <p><span id="impl-1">The exact set of properties returned is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
    Additional attributes <span class="rfc2119" id="c.os-info.7.2">must</span> be in a namespace.</p>

  <section id="c.os-info.8" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>

<section id="c.os-exec" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>p:os-exec<a aria-label="§" class="self-link" href="#c.os-exec"/></h2></div><div class="content">


<p>The <code class="tag-element">p:os-exec</code> step runs an external command passing the
input that arrives on its <code class="port">source</code> port as standard input,
reading <code class="port">result</code> from standard output, and <code class="port">error</code>
from standard error.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:os-exec</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr sequence-attr">sequence</code><code>="</code><code class="value sequence-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">error</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">any</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">exit-status</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">command</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">args</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">()</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string*</code><code>"</code><code>/&gt;</code><code>           </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">cwd</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">result-content-type</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'text/plain'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">error-content-type</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'text/plain'</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">path-separator</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>             </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">failure-threshold</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:integer?</code><code>"</code><code>/&gt;</code><code>         </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">serialization</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName,item()*)?</code><code>"</code><code>/&gt;</code><code>  </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The <code class="tag-element">p:os-exec</code> step executes the command passed on
<code class="option">command</code> with the arguments passed on
<code class="option">args</code>. The processor does not interpolate the values
of the <code class="option">command</code> or <code class="option">args</code> (for example,
expanding references to environment variables).
<a id="err.inline.C0033"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0033"><code class="errqname">err:XC0033</code></a>) if the command cannot be run.
</p>

<p>If <code class="option">cwd</code> is specified, then the current working
directory is changed to the value of that option before execution
begins. <a id="err.inline.C0034"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0034"><code class="errqname">err:XC0034</code></a>) if the current working directory cannot be changed
to the value of the <code class="option">cwd</code> option.
<span id="impl-2">If <code class="option">cwd</code> is not
specified, the current working directory is
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span></p>

<p>If the <code class="option">path-separator</code> option is specified,
every occurrence of the character identified as the
<code class="option">path-separator</code> character that occurs in the
<code class="option">command</code>, <code class="option">args</code>, or
<code class="option">cwd</code> will be replaced by the platform-specific path
separator character. <a id="err.inline.C0063"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0063"><code class="errqname">err:XC0063</code></a>) if the <code class="option">path-separator</code> option is
specified and is not exactly one character long.
</p>

<p>The <code class="port">source</code> port is declared to accept a sequence so
that it can be empty. If no document appears on the
<code class="port">source</code> port, then the command receives nothing on
standard input. If a document does arrive on the <code class="port">source</code>
port, it will be passed to the command as its standard input. <a id="err.inline.C0032"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0032"><code class="errqname">err:XC0032</code></a>) if more than
one document appears on the <code class="port">source</code> port of the
<code class="tag-element">p:os-exec</code> step.
The <code class="option">serialization</code> option is used to control the serialization
  of the document before passing it to the standard input. If a document has a 
  “<code class="literal">serialization</code>” document property, the effective value of 
  the serialization options is the union of the two maps, where the entries in 
  the “<code class="literal">serialization</code>” document property take precedence.
  Serialization is described in [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>].</p>

<p>The content of standard output is read and processed as described
in <code class="tag-element">p:load</code> with <code class="option">result-content-type</code> taken as
value for <code class="tag-element">p:load</code>'s <code class="option">content-type</code> option. The
created document is returned on <code class="port">result</code>.</p> 

<p>The content of standard error is read and processed as described
in <code class="tag-element">p:load</code> with <code class="option">error-content-type</code> taken as
value for <code class="tag-element">p:load</code>'s <code class="option">content-type</code> option. The
created document is returned on <code class="port">error</code>.</p> 
  
<p>The <code class="port">exit-status</code> port always returns a single
<code class="tag-element">c:result</code> element which contains the system exit status that
the process returned. <span id="impl-3">The specific exit status values returned by
a process invoked with <code class="tag-element">p:os-exec</code> are
<em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em>.</span></p>

<p>If a <code class="option">failure-threshold</code> value is supplied, and the
exit status is greater than that threshold, then the <code class="tag-element">p:os-exec</code>
step <span class="rfc2119" id="c.os-exec.11.3">must</span> fail.
<a id="err.inline.C0064"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em> (<a href="#err.C0064"><code class="errqname">err:XC0064</code></a>) if the exit code from the command is greater than
the specified <code class="option">failure-threshold</code> value.
This failure, like any step failure,
can be captured with a <code class="tag-element">p:try</code>.</p>

<section id="c.os-exec.12" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">

<p>No document properties are preserved.</p>
</div></section>
</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">4. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>These steps can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following errors can be raised by these steps:</p>

<div id="step-error-summary"><dl class="errs"><dt id="err.C0032"><code class="errqname">err:XC0032</code></dt><dd><p>It is a dynamic error if more than
one document appears on the source port of the
p:os-exec step.</p><p>See: <a href="#err.inline.C0032">p:os-exec</a></p></dd><dt id="err.C0033"><code class="errqname">err:XC0033</code></dt><dd><p>It is a dynamic
error if the command cannot be run.</p><p>See: <a href="#err.inline.C0033">p:os-exec</a></p></dd><dt id="err.C0034"><code class="errqname">err:XC0034</code></dt><dd><p>It is a dynamic
error if the current working directory cannot be changed
to the value of the cwd option.</p><p>See: <a href="#err.inline.C0034">p:os-exec</a></p></dd><dt id="err.C0063"><code class="errqname">err:XC0063</code></dt><dd><p>It is a dynamic
error if the path-separator option is
specified and is not exactly one character long.</p><p>See: <a href="#err.inline.C0063">p:os-exec</a></p></dd><dt id="err.C0064"><code class="errqname">err:XC0064</code></dt><dd><p>It is a dynamic
error if the exit code from the command is greater than
the specified failure-threshold value.</p><p>See: <a href="#err.inline.C0064">p:os-exec</a></p></dd></dl></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>The exact set of properties returned is implementation-defined. See <a href="#c.os-info" title="p:os-info">Section 2, “p:os-info”</a>.</li><li>If cwd is not
specified, the current working directory is
implementation-defined. See <a href="#c.os-exec" title="p:os-exec">Section 3, “p:os-exec”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"><li>The specific exit status values returned by
a process invoked with p:os-exec are
implementation-dependent. See <a href="#c.os-exec" title="p:os-exec">Section 3, “p:os-exec”</a>.</li></ol>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/text.html"><head><title>XProc 3.0: text steps</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the optional text related steps for XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: text steps</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:31:13Z">17:31 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/text/">https://spec.xproc.org/master/head/text/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: text steps</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
      <p>This specification describes the optional text related steps for <em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
    </section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#c.markdown-to-html"><bdi class="secno">2. </bdi>p:markdown-to-html</a></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">3. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">
  

  <section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">
    

    <p>This specification describes the optional text related XProc steps. A machine-readable description of these steps may be found in <a href="steps.xpl">steps.xpl</a>. </p>

    <p>Familarity with the general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>] steps is assumed; for background details,
      see [<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
  </div></section>

  
  <section id="c.markdown-to-html" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>p:markdown-to-html<a aria-label="§" class="self-link" href="#c.markdown-to-html"/></h2></div><div class="content">


<p>The <code class="code">p:markdown-to-html</code> step converts a text document in Markdown to XHTML.</p>

<p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:markdown-to-html</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:input</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">source</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">text</code><code>"</code><code>/&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">html</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">parameters</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">map(xs:QName, item()*)?</code><code>"</code><code>/&gt;</code><code>    </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The <code class="tag-element">p:markdown-to-html</code> step transforms a text document containing
Markdown, for example [<a href="#commonmark"><span class="abbrev">CommonMark</span></a>], into HTML.
<span id="impl-1">The flavor(s) of Markdown supported and the parameters allowed are
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>.</p>

<section id="c.markdown-to-html.5" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
  
  <p>No document properties are preserved.</p>
</div></section>
</div></section>

  <section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">
    

    <p>These steps can raise <em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>. </p>

    <p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic error</em> is one which occurs while a pipeline
        is being evaluated.]</span> Examples of dynamic errors include references to URIs that cannot be resolved,
      steps which fail, and pipelines that exhaust the capacity of an implementation (such as memory or disk space). For
      a more complete discussion of dynamic errors, see <cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>. </p>

    <p>If a step fails due to a dynamic error, failure propagates upwards until either a <code class="tag-element">p:try</code> is
      encountered or the entire pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step failure causes the
      entire pipeline to fail.</p>

    <p>The following errors can be raised by this step:</p>

    <div id="step-error-summary"><dl class="errs"/></div>

  </div></section>

  <article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>The flavor(s) of Markdown supported and the parameters allowed are
implementation-defined. See <a href="#c.markdown-to-html" title="p:markdown-to-html">Section 2, “p:markdown-to-html”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

  <article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">
    
    <div id="references.2" class="bibliolist">
      <div id="commonmark" class="bibliomixed"><p>[<span class="abbrev">CommonMark</span>] 
<a href="https://spec.commonmark.org/current/"><span class="citetitle"><cite>CommonMark Spec</cite></span></a>.
John MacFarlane. 6 April 2019.
</p></div>
      <div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
      <div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
    </div>
  </div></article>

  
  <article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic error</em> is one which occurs while a pipeline
        is being evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

  <article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html><html xmlns="http://www.w3.org/1999/xhtml" xml:base="file:/home/runner/work/3.0-test-suite/3.0-test-suite/build/specs/file.html"><head><title>XProc 3.0: file steps</title><meta charset="utf-8"/><meta content="width=device-width, initial-scale=1, shrink-to-fit=no" name="viewport"/><link class="removeOnSave" crossorigin="anonymous" href="https://www.w3.org" rel="preconnect"/><link as="script" class="removeOnSave" href="js/fixup.js" rel="preload"/><link as="style" class="removeOnSave" href="css/base.css" rel="preload"/><link as="image" class="removeOnSave" href="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" rel="preload"/><link rel="stylesheet" href="css/cg-draft.css"/><link rel="stylesheet" href="css/respec.css"/><link rel="alternate" title="XML" href="specification.xml"/><meta name="generator" content="DocBook XSL 2.0 Stylesheets V2.5.0"/><meta name="description" content="Abstract This specification describes the file related steps&#xA;for&#xA;XProc 3.0: An XML Pipeline Language."/><link href="css/default.css" rel="stylesheet" type="text/css"/><link href="css/db-prism.css" rel="stylesheet" type="text/css"/><link rel="stylesheet" type="text/css" href="css/base.css"/><link rel="stylesheet" type="text/css" href="css/xproc.css"/><link rel="stylesheet" type="text/css" href="css/print.css" media="print"/><script type="text/javascript" src="js/dbmodnizr.js"/></head><body class="h-entry informative toc-sidebar"><div class="head" id="spec.head"><a class="logo" href="https://www.w3.org/"><img alt="W3C" height="48" src="https://www.w3.org/StyleSheets/TR/2016/logos/W3C" width="72"/></a><h1 id="title" class="title p-name">XProc 3.0: file steps</h1><h2>Draft Community Group Report <time class="dt-published" datetime="2022-10-16">16 October 2022</time></h2><div class="editors-draft">Editor's Draft   at <time class="dt-timestamp" datetime="20221016T17:30:41Z">17:30 UTC</time> (<a href="https://github.com/xproc/3.0-steps/commit/e987dce4a49630f9810e62f72f98d069b91e1e3c">build 7</a>)</div><dl><dt>Latest editor’s draft:</dt><dd><a href="https://spec.xproc.org/master/head/file/">https://spec.xproc.org/master/head/file/</a></dd><dt>Editors:</dt><dd><span class="personname">Norman Walsh</span></dd><dd><span class="personname">Achim Berndzen</span></dd><dd><span class="personname">Gerrit Imsieke</span></dd><dd><span class="personname">Erik Siegel</span></dd><dt>Participate:</dt><dd><a href="http://github.com/xproc/3.0-steps">GitHub xproc/3.0-steps</a></dd><dd><a href="http://github.com/xproc/3.0-steps/issues">Report an issue</a></dd><dt>Changes:</dt><dd><a href="diff.html">Diff against current “status quo” draft</a></dd><dd><a href="http://github.com/xproc/3.0-steps/commits/master">Commits for this specification</a></dd></dl><p>This document is also available in these non-normative formats: <a href="specification.xml">XML</a> and HTML with automatic change markup  courtesy of <a href="http://www.deltaxml.com/">DeltaXML</a>.</p><p class="copyright"><a href="https://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © <span class="years">2018, 2019, 2020</span> the Contributors to the <cite>XProc 3.0: file steps</cite> specification, published by the <a href="https://www.w3.org/community/xproc-next/">XProc Next Community Group</a> under the <a href="https://www.w3.org/community/about/agreements/cla/">W3C
    Community Contributor License Agreement (CLA)</a>. A human-readable <a href="https://www.w3.org/community/about/agreements/cla-deed/">summary</a> is available.</p><hr title="Separator for header"/><section id="abstract" class="introductory"><h2>Abstract</h2>
<p>This specification describes the file related steps
for
<em class="citetitle">XProc 3.0: An XML Pipeline Language</em>.</p>
</section><section id="sotd" class="introductory"><h2>Status of this Document</h2><p><strong>This document is an editor's  draft that has no official standing.</strong></p>
  <p>This specification was published by the
  <a href="https://www.w3.org/community/xproc-next/">XProc
  Next Community Group</a>. It is not a W3C Standard nor is it on
  the W3C Standards Track. Please note that under the
  <a href="https://www.w3.org/community/about/agreements/cla/">W3C
  Community Contributor License Agreement (CLA)</a> there is a limited
  opt-out and other conditions apply. Learn more about <a href="https://www.w3.org/community/">W3C Community and Business
  Groups</a>.
  </p>
  
  <p>If you wish to make comments regarding this document, please
  send them to
  <a href="mailto:xproc-dev@w3.org">xproc-dev@w3.org</a>.
  (<a href="mailto:xproc-dev-request@w3.org?subject=subscribe">subscribe</a>,
  <a href="https://lists.w3.org/Archives/Public/xproc-dev/">archives</a>).
  </p>
</section></div><div class="lists-of-titles"><nav id="toc"><h2 id="TableOfContents">Table of Contents</h2><ol class="toc"><li class="tocline"><a class="tocxref" href="#introduction"><bdi class="secno">1. </bdi>Introduction</a></li><li class="tocline"><a class="tocxref" href="#c.directory-list"><bdi class="secno">2. </bdi>p:directory-list</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#dir-list-details"><bdi class="secno">2.1. </bdi>Directory list details</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.file-copy"><bdi class="secno">3. </bdi>p:file-copy</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#recursive-copy"><bdi class="secno">3.1. </bdi>Copying directories</a></li></ul></li><li class="tocline"><a class="tocxref" href="#c.file-delete"><bdi class="secno">4. </bdi>p:file-delete</a></li><li class="tocline"><a class="tocxref" href="#c.file-info"><bdi class="secno">5. </bdi>p:file-info</a></li><li class="tocline"><a class="tocxref" href="#c.file-mkdir"><bdi class="secno">6. </bdi>p:file-mkdir</a></li><li class="tocline"><a class="tocxref" href="#c.file-move"><bdi class="secno">7. </bdi>p:file-move</a></li><li class="tocline"><a class="tocxref" href="#c.file-create-tempfile"><bdi class="secno">8. </bdi>p:file-create-tempfile</a></li><li class="tocline"><a class="tocxref" href="#c.file-touch"><bdi class="secno">9. </bdi>p:file-touch</a></li><li class="tocline"><a class="tocxref" href="#errors"><bdi class="secno">10. </bdi>Step Errors</a></li><li class="tocline"><a class="tocxref" href="#conformance"><bdi class="secno">A. </bdi>Conformance</a><ul class="toc"><li class="tocline"><a class="tocxref" href="#implementation-defined"><bdi class="secno">A.1. </bdi>Implementation-defined features</a></li><li class="tocline"><a class="tocxref" href="#implementation-dependent"><bdi class="secno">A.2. </bdi>Implementation-dependent features</a></li></ul></li><li class="tocline"><a class="tocxref" href="#references"><bdi class="secno">B. </bdi>References</a></li><li class="tocline"><a class="tocxref" href="#glossary"><bdi class="secno">C. </bdi>Glossary</a></li><li class="tocline"><a class="tocxref" href="#ancillary-files"><bdi class="secno">D. </bdi>Ancillary files</a></li></ol></nav></div><article class="specification">


<section id="introduction" class="section"><div class="section-titlepage"><h2><bdi class="secno">1. </bdi>Introduction<a aria-label="§" class="self-link" href="#introduction"/></h2></div><div class="content">


<p>This specification describes the file related XProc steps.
A machine-readable description of
these steps may be found in
<a href="steps.xpl">steps.xpl</a>.
</p>

<p>Familarity with the
general nature of [<a href="#xproc30"><span class="abbrev">XProc 3.0</span></a>]
steps is assumed; for background details, see
[<a href="#xproc30-steps"><span class="abbrev">XProc 3.0 Steps</span></a>].</p>
</div></section>

  <section id="c.directory-list" class="section"><div class="section-titlepage"><h2><bdi class="secno">2. </bdi>p:directory-list<a aria-label="§" class="self-link" href="#c.directory-list"/></h2></div><div class="content">
    
    
    <p>The <code class="code">p:directory-list</code> step produces a list of the contents
      of a specified directory.</p>
    
    <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:directory-list</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">path</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">detailed</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code>  </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">max-depth</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">'1'</code><code>"</code><code>/&gt;</code><code>     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">include-filter</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string*</code><code>"</code><code>/&gt;</code><code>             </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">exclude-filter</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string*</code><code>"</code><code>/&gt;</code><code>             </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">override-content-types</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">array(array(xs:string))?</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>
    
    <p><span id="impl-1">Conformant processors <span class="rfc2119" id="c.directory-list.4.1.1">must</span> support directory paths whose
      scheme is <code class="code">file</code>. It is
      <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
      supported by <code class="tag-element">p:directory-list</code>, and what the interpretation
      of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
      <a id="err.inline.C0090"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0090"><code class="errqname">err:XC0090</code></a>) if an
        implementation does not support directory listing for a specified scheme.
    </p>
    
    <p>If <code class="option">path</code> is relative, it is made absolute against the 
      base URI of the element on which it is specified 
      (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:directory-list</code> in the case of a 
      syntactic shortcut value). <a id="err.inline.D0064"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
        error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0017"/>It is a
        <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0017"><code class="errqname">err:XC0017</code></a>) if the absolute path does not
        identify a directory. <a id="err.inline.C0012"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0012"><code class="errqname">err:XC0012</code></a>) if the contents of the directory
          path are not available to the step due to access restrictions in the
          environment in which the pipeline is run.</p>
    
    <p>If the <code class="option">detailed</code> option is true, the pipeline
      author is requesting additional information about the matching entries,
      see <a href="#dir-list-details" title="Directory list details">Section 2.1, “Directory list details”</a>.</p>
    
    <p>The <code class="option">max-depth</code> option may contain either the string “<code class="literal">unbounded</code>” or a string
      that may be cast to a non-negative integer. An integer value of <code class="literal">0</code> means that only information
      about the directory that is given in the <code class="option">path</code> option is returned. A <code class="option">max-depth</code> of
      <code class="literal">1</code>, which is the default, will effect that also information about the top-level directory’s
      immediate children will be included. For larger values of <code class="option">max-depth</code>, also the content of
      directories will be considered recursively up to the maximum depth, and it will be included as children of the
      corresponding <a href="#cv.directory"><code class="tag-element">c:directory</code></a> elements.</p>
    
    <p>If present, the value of the <code class="option">include-filter</code> or
      <code class="option">exclude-filter</code> option <span class="rfc2119" id="c.directory-list.8.3">must</span> be a sequence of strings, each
      one representing a regular expressions as specified in [<a href="#xpath31-functions"><span class="abbrev">XPath and XQuery Functions and Operators 3.1</span></a>],
      section 7.61 “<code class="literal">Regular Expression Syntax</code>”. <a id="err.inline.C0147"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic
        error</a></em> (<a href="#err.C0147"><code class="errqname">err:XC0147</code></a>) if a specified value is not a valid XPath regular
        expression.</p>
    
    <p>The regular expressions will be matched against an item’s file system path relative to the
      top-level path that was given in the <code class="option">path</code> option. If the item is a directory,
      a trailing slash will be appended. The matching is done unanchored: it is a match if the
      regular expression matches part of the relative item’s file system path. Informally: matching behaves like applying
      the XPath <code class="code">matches#2</code> function, like in 
      <code class="code">matches($path, $regular-expression)</code>.</p>
    
    <p>Examples: A file <code class="literal">file.txt</code> in the directory specified by <code class="option">path</code> will remain
      <code class="literal">file.txt</code>, a relative path <code class="literal">dir1/file.txt</code> will remain
      <code class="literal">dir1/file.txt</code>, while a relative path <code class="literal">dir1/dir2</code> will become
      <code class="literal">dir1/dir2/</code> if <code class="literal">dir2</code> is a directory.</p>
    <p>Regular expressions that match <code class="literal">a/a/b/file.txt</code> are, for example,
      <code class="literal">^(\w+/){2,3}.+\.txt$</code>, <code class="literal">a/a/b/</code>, or <code class="literal">/file\.[^/]+$</code>.</p>
    
    <p>If any <code class="option">include-filter</code> pattern matches the slash-augmented relative path, the entry is included in the output. 
      If a directory’s path matches the inclusion regex, the directory’s content will not automatically be included, too.
      They need to match, the regular expression, too. So the filter regex <code class="literal">^dir/</code> will match the directory
      content but <code class="literal">^dir/$</code> won’t, and as a consequence the directory’s content will not be included in the result.</p>
    <p>If a relative path is matched by an include filter,
      all its ancestor directories starting from the initial directory (but not their content if not included explicitly) 
      will be included, too.</p>
    <figure id="ex.c.directory-list" class="example-wrapper"><div class="title">Example 1. Sample Directory List Output for a Single File</div><div class="example"><p>For a file <code class="literal">a/a/b/file.txt</code> below the initial directory 
        <code class="literal">/home/jane</code>, this output will be produced, omitting content that might be present in the 
        intermediate directories:</p><pre class="literallayout language-none">&lt;c:directory xml:base="file:///home/jane/" name="jane"&gt;
  &lt;c:directory xml:base="a/" name="a"&gt;
    &lt;c:directory xml:base="a/" name="a"&gt;
      &lt;c:directory xml:base="b/" name="b"&gt;
        &lt;c:file xml:base="file.txt" name="file.txt"/&gt;
      &lt;/c:directory&gt;
    &lt;/c:directory&gt;
  &lt;/c:directory&gt;
&lt;/c:directory&gt;</pre></div></figure>
    <p>If the <code class="option">exclude-filter</code> pattern matches the slash-augmented relative path, the entry (and all of
      its content in case of a directory) is excluded in the output.</p>
    <p>If both options are
      provided, the include filter is processed first, then the exclude
      filter. As a result, an item is included if it matches (at least) one
      of the <code class="option">include-filter</code> values and none of the
      <code class="option">exclude-filter</code> values.</p>
    <p>If no <code class="option">include-filter</code> is given, that is, if <code class="option">include-filter</code> is an empty
      sequence, any item will be included in the result (unless it is excluded by <code class="option">exclude-filter</code>).</p>
    
    <div class="note admonition"><h3>Note</h3><div class="admonition-body">
      <p>There is no way to specify a list of values using attribute value
        templates. If the option shortcut syntax is used to provide the
        <code class="option">include-filter</code> or <code class="option">exclude-filter</code> option,
        it will consist of a single regular expression. To specify a list of
        regular expressions, you must use the  <code class="tag-element">p:with-option</code>
        syntax.
      </p>
    </div></div>
    
    <p>The <code class="option">override-content-types</code> option can be used to partially override the
      content-type determination mechanism. This works just like with the
        <code class="option">override-content-types</code> option of <code class="tag-element">p:archive-manifest</code> and
        <code class="tag-element">p:unarchive</code> (see <cite><a href="../steps/#override-content-type">Overriding content types</a></cite> in <cite><a href="../steps/">XProc 3.0+: Standard Step Library</a></cite>), except
      that the regular expression matching is done against the paths as used for the matching of the
        <code class="option">include-filter</code> and <code class="option">exclude-filter</code> options.</p>
    
    <p id="cv.directory">The result document produced for the specified directory path has a <a href="#cv.directory"><code class="tag-element">c:directory</code></a>
      document element whose base URI, attached as an <code class="tag-element attribute">xml:base</code> attribute, is the absolute
      directory path (expressed as a URI that ends in a slash) and whose <code class="tag-attribute">name</code> attribute
      (without a trailing slash) is the last segment of the directory path. The same base URI is attached as the 
      resulting document’s base-uri property and, accordingly, as its document node’s base URI.</p>
    
    <p id="d308e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:directory<br/>  <strong>name</strong> = <var>string</var><br/>  size? = <var>integer</var><br/>  readable? = <var>boolean</var><br/>  writable? = <var>boolean</var><br/>  last-modified? = <var>dateTime</var><br/>  hidden? = <var>boolean</var>&gt;<br/>    (<a href="#cv.file">c:file</a> | <br/>     <a href="#cv.directory">c:directory</a> | <br/>     <a href="#cv.other">c:other</a>)*<br/>&lt;/c:directory&gt;</code></p>
    
    <p>Its contents are determined as follows, based on the entries in the directory identified by the directory path.
      For each entry in the directory and subject to the rules that are imposed by the <code class="option">max-depth</code>,
      <code class="option">include-filter</code>, and <code class="option">exclude-filter</code> options, a <a href="#cv.file"><code class="tag-element">c:file</code></a>, a
      <a href="#cv.directory"><code class="tag-element">c:directory</code></a>, or a <a href="#cv.other"><code class="tag-element">c:other</code></a> element is produced, as follows: </p>
    
    <div class="itemizedlist">
      
      
      
    <ul><li>
        <p>A <a href="#cv.directory"><code class="tag-element">c:directory</code></a> is produced for each subdirectory not determined to be special. Depending on the
          values of the three options, it may contain child elements for the directory’s content.</p>
      </li><li>
        <p id="cv.file">A <a href="#cv.file"><code class="tag-element">c:file</code></a> is produced for each file
          not determined to be special.</p>
        <p id="d326e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:file<br/>  <strong>name</strong> = <var>string</var><br/>  size? = <var>integer</var><br/>  readable? = <var>boolean</var><br/>  writable? = <var>boolean</var><br/>  last-modified? = <var>dateTime</var><br/>  hidden? = <var>boolean</var><br/>  content-type? = <var>ContentType</var> /&gt;</code></p>
      </li><li>
        <p id="cv.other"><span id="impl-2">Any file or directory determined to be
          special by the <code class="tag-element">p:directory-list</code> step may be output using a
          <a href="#cv.other"><code class="tag-element">c:other</code></a> element but the criteria for marking a file as
          special are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</span>
        </p>
        <p id="d335e0" class="element-syntax element-syntax-step-vocabulary"><code>&lt;c:other<br/>  <strong>name</strong> = <var>string</var><br/>  size? = <var>integer</var><br/>  readable? = <var>boolean</var><br/>  writable? = <var>boolean</var><br/>  last-modified? = <var>dateTime</var><br/>  hidden? = <var>boolean</var> /&gt;</code></p>
      </li></ul></div>
    
    <p>Each of the elements <a href="#cv.file"><code class="tag-element">c:file</code></a>, <a href="#cv.directory"><code class="tag-element">c:directory</code></a>,
      and <a href="#cv.other"><code class="tag-element">c:other</code></a> has a <code class="code">name</code> attribute, whose
      value is a relative IRI reference, giving the (local) file or
      directory name.</p>
    
    <p>Each of these element also contains the corresponding resource’s URI in an <code class="tag-element attribute">xml:base</code>
      attribute, which may be a relative URI for any but the top-level <a href="#cv.directory"><code class="tag-element">c:directory</code></a> element. In the case of
      <a href="#cv.directory"><code class="tag-element">c:directory</code></a>, it must end in a trailing slash. This way, users will always be able to compute the
      absolute URI for any of these elements by applying <code class="code">fn:base-uri()</code> to it.</p>
    
    <section id="dir-list-details" class="section"><div class="section-titlepage"><h3><bdi class="secno">2.1. </bdi>Directory list details<a aria-label="§" class="self-link" href="#dir-list-details"/></h3></div><div class="content">
      
      
      <p>If <code class="option">detailed</code> is false, then only the
        <code class="tag-attribute">name</code> and <code class="tag-attribute">xml:base</code> attributes are expected on
        <a href="#cv.file"><code class="tag-element">c:file</code></a>, <a href="#cv.directory"><code class="tag-element">c:directory</code></a>, or <a href="#cv.other"><code class="tag-element">c:other</code></a>
        elements.</p>
      
      <p>If <code class="option">detailed</code> is true, then the pipeline author
        is expecting additional details about each entry. The following attributes
        <span class="rfc2119" id="dir-list-details.3.2">should</span> be provided by the implementation:</p>
      
      <div class="variablelist">
        
        
        
        
        
        
      <dl><dt><span class="term"><code class="tag-attribute">content-type</code></span></dt><dd>
            <p>The <code class="tag-element attribute">content-type</code> attribute contains
              the content type of the respective file. The value “<code class="literal">application/octet-stream</code>”
              will be used if the processor is not able to identify another content type.</p>
          </dd><dt><span class="term"><code class="tag-attribute">readable</code></span></dt><dd><p>“<code class="code">true</code>” if the entry is readable.</p>
          </dd><dt><span class="term"><code class="tag-attribute">writable</code></span></dt><dd><p>“<code class="code">true</code>” if the entry is writable.</p>
          </dd><dt><span class="term"><code class="tag-attribute">hidden</code></span></dt><dd><p>“<code class="code">true</code>” if the entry is hidden.</p>
          </dd><dt><span class="term"><code class="tag-attribute">last-modified</code></span></dt><dd><p>The last modification time of the entry, expressed as a lexical
            <code class="code">xs:dateTime</code> in UTC.</p>
          </dd><dt><span class="term"><code class="tag-attribute">size</code></span></dt><dd><p>The size of the entry in bytes.</p>
          </dd></dl></div>
      
      <p><span id="impl-3">The precise meaning of these properties are
        <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> and may vary according
        to the URI scheme of the <code class="option">path</code>.</span>
        If the value of an attribute is “<code class="code">false</code>” or if it has no
        meaningful value, the attribute may be omitted.</p>
      
      <p><span id="impl-4">Any other attributes on
        <a href="#cv.file"><code class="tag-element">c:file</code></a>, <a href="#cv.directory"><code class="tag-element">c:directory</code></a>, or <a href="#cv.other"><code class="tag-element">c:other</code></a>
        are <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></span>, but they <span class="rfc2119" id="dir-list-details.6.2">must</span> be in a namespace.</p>
    </div></section>
    
    <section id="c.directory-list.27" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
      
      <p>Besides the <code class="property">content-type</code> property, 
        the resulting document has a <code class="property">base-uri</code>. Its value is identical to the top-level
        element’s <code class="tag-attribute">xml:base</code> attribute, that is, to the directory’s URI.</p>
    </div></section>
  </div></section>
  
  <section id="c.file-copy" class="section"><div class="section-titlepage"><h2><bdi class="secno">3. </bdi>p:file-copy<a aria-label="§" class="self-link" href="#c.file-copy"/></h2></div><div class="content">
  

  <p>The <code class="code">p:file-copy</code> step copies a file or a directory to a given target.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-copy</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">target</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">overwrite</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code>  </code></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-copy</code> step copies the file or directory named in <code class="option">href</code> to the new position specified in
      <code class="option">target</code>. Any non existent directory contained in <code class="option">target</code> will be created before copying starts.
    If the target is a directory, the step attempts to copy the file or directory into that directory,
    preserving its base name. <a id="err.inline.C0157"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0157"><code class="errqname">err:XC0157</code></a>) if the <code class="option">href</code>
    option names a directory, but the <code class="option">target</code> option names a file.</p>
  
  <p>If the <code class="option">overwrite</code> evaluates to <code class="literal">false</code>, no existing file will be changed.</p>

    <p><span id="impl-5">Conformant processors <span class="rfc2119" id="c.file-copy.6.1.1">must</span> support URIs whose
      scheme is <code class="code">file</code> for the <code class="option">href</code> and <code class="option">target</code> options
      of <code class="tag-element">p:file-copy</code>.
      It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
      supported by <code class="tag-element">p:file-copy</code>, and what the interpretation
      of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
      <a id="err.inline.C0144"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0144"><code class="errqname">err:XC0144</code></a>) if an
        implementation does not support <code class="tag-element">p:file-copy</code> for a specified scheme.
    </p>
    
    <p>If <code class="option">href</code> or <code class="option">target</code> are relative, they are made absolute against the 
      base URI of the element on which they are specified 
      (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-copy</code> in the case of a 
      syntactic shortcut value). <a id="err.inline.D0064.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
        error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0145"/>It is a
            <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0145"><code class="errqname">err:XC0145</code></a>) if <code class="tag-element">p:file-copy</code> is not available to the step due to access restrictions 
            in the environment in which the pipeline is run.</p>

  <p>If no error occurs, the step returns a <code class="tag-element">c:result</code> element containing the absolute URI of the
    target.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error. In the case of a recursive copy, processing stops at the first error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, one of the following errors is
    raised:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p><a id="err.inline.D0011"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option does not exist, cannot be accessed or is not a file or directory.</p>
    </li><li>
      <p><a id="err.inline.C0050"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0050"><code class="errqname">err:XC0050</code></a>) the file or directory cannot be copied 
        to the specified location.</p>
    </li></ul></div>

  <section id="recursive-copy" class="section"><div class="section-titlepage"><h3><bdi class="secno">3.1. </bdi>Copying directories<a aria-label="§" class="self-link" href="#recursive-copy"/></h3></div><div class="content">
    

  <p>If <code class="option">href</code> identifies a directory and
  <code class="code">target</code> also identifies a directory, or does not exist,
  then the <a href="#c.file-copy"><code class="tag-element">p:file-copy</code></a> step attempts to copy the entire
  directory tree identified by <code class="option">href</code>: the directory and
  all of its descendants.</p>

  <p>In this case:</p>

  <div class="itemizedlist">
    
    
  <ul><li>
      <p>If <code class="option">fail-on-error</code> is <code class="code">false</code> and an error occurs, no further copying
      is attempted after the first error is detected.</p>
    </li><li>
      <p>If <code class="option">overwrite</code> is <code class="code">true</code>, <code class="code">err:XC0157</code> does not apply to
      descendants. A directory under <code class="option">href</code> may replace a file with the corresponding
      name under <code class="option">target</code>.
      </p>
    </li></ul></div>
  </div></section>

  <section id="c.file-copy.13" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>
  
</div></section>

<section id="c.file-delete" class="section"><div class="section-titlepage"><h2><bdi class="secno">4. </bdi>p:file-delete<a aria-label="§" class="self-link" href="#c.file-delete"/></h2></div><div class="content">
  

  <p>The <code class="code">p:file-delete</code> step deletes a file or a directory.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-delete</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">recursive</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code> </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-delete</code> step attempts to delete an existing file or directory named in
    <code class="option">href</code>. If the named file or directory does not exist, the step just returns a
  <code class="tag-element">c:result</code> element as described below.</p>

  <p><span id="impl-6">Conformant processors <span class="rfc2119" id="c.file-delete.5.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> option of <code class="tag-element">p:file-delete</code>.
    It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-delete</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0142"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0142"><code class="errqname">err:XC0142</code></a>) if an
      implementation does not support <code class="tag-element">p:file-delete</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> is relative, it is made absolute against the 
    base URI of the element on which it is specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-delete</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0143"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0143"><code class="errqname">err:XC0143</code></a>) if <code class="tag-element">p:file-delete</code> is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p>
  

  <p>If <code class="option">href</code> specifies a directory, it can only be deleted if the <code class="option">recursive</code> option
    is <code class="code">true</code> or if the specified directory is empty.</p>

  <p>The step returns a <code class="tag-element">c:result</code> element containing the absolute URI of the file or directory.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, one of the following errors is
    raised:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p><a id="err.inline.D0011.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option cannot be accessed or is not a file or directory.</p>
    </li><li>
      <p><a id="err.inline.C0113"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0113"><code class="errqname">err:XC0113</code></a>) if an attempt is made to delete a non-empty
      directory and the <code class="option">recursive</code> option was set to <code class="code">false</code>.</p>
    </li></ul></div>


  <section id="c.file-delete.12" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>

<section id="c.file-info" class="section"><div class="section-titlepage"><h2><bdi class="secno">5. </bdi>p:file-info<a aria-label="§" class="self-link" href="#c.file-info"/></h2></div><div class="content">
  

  <p>The <code class="code">p:file-info</code> step returns information about a file, directory or other file system
    object.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-info</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">override-content-types</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">array(array(xs:string))?</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-info</code> step returns information about the file, directory or other file system object named
    in the <code class="option">href</code> option.</p>

  <p><span id="impl-7">Conformant processors <span class="rfc2119" id="c.file-info.5.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> option of <code class="tag-element">p:file-info</code>.
    It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-info</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0134"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0134"><code class="errqname">err:XC0134</code></a>) if an
      implementation does not support <code class="tag-element">p:file-info</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> is relative, it is made absolute against the 
    base URI of the element on which it is specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-info</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0135"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0135"><code class="errqname">err:XC0135</code></a>) if <code class="tag-element">p:file-info</code> is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p>
  
  <p>If the <code class="option">href</code> option is a <code class="code">file:</code> URI, the step returns:</p>
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p>If <code class="option">href</code> option references a file: A <a href="#cv.file"><code class="tag-element">c:file</code></a> element with standard attributes (see
        below).</p>
    </li><li>
      <p>If <code class="option">href</code> option references a directory: A <a href="#cv.directory"><code class="tag-element">c:directory</code></a> element with standard
        attributes (see below).</p>
    </li><li>
      <p>If <code class="option">href</code> option references any other file system object: Implementation defined (for example
        an <a href="#cv.other"><code class="tag-element">c:other</code></a> or <code class="tag-element">c:device</code> element). It is advised to use the standard attributes (see below)
        if applicable.</p>
    </li></ul></div>
  
    <p>The <code class="option">override-content-types</code> option can be used to partially override the
      content-type determination mechanism for files. This works just like with the
        <code class="option">override-content-types</code> option of <code class="tag-element">p:archive-manifest</code> and
        <code class="tag-element">p:unarchive</code> (see <cite><a href="../steps/#override-content-type">Overriding content types</a></cite> in <cite><a href="../steps/">XProc 3.0+: Standard Step Library</a></cite>), except
      that the regular expression matching is done against the absolute URI of the file.</p>

  <p>Each of the elements <a href="#cv.file"><code class="tag-element">c:file</code></a>, <a href="#cv.directory"><code class="tag-element">c:directory</code></a>,
    and <a href="#cv.other"><code class="tag-element">c:other</code></a> has a <code class="code">name</code> attribute, whose
    value is a relative IRI reference, giving the (local) file or
    directory name.</p>
  
  <p>The following attributes are standard on a returned <a href="#cv.file"><code class="tag-element">c:file</code></a> or <a href="#cv.directory"><code class="tag-element">c:directory</code></a> element. All
    attributes are optional and must be absent if not applicable. Additional implementation-defined attributes may be
    present, but they must be in a namespace.</p>
  <figure id="c.file-info.12" class="informaltable-wrapper"><div class="informaltable"><table border="0" style="border-collapse: collapse;border-top: 1px solid ; border-bottom: 1px solid ; border-left: 1px solid ; border-right: 1px solid ; "><colgroup><col class="tcol1" width="33%"/><col class="tcol2" width="33%"/><col class="tcol3" width="33%"/></colgroup><thead><tr><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Attribute</th><th style="border-right: 1px solid ; border-bottom: 1px solid ; ">Type</th><th style="border-bottom: 1px solid ; ">Description</th></tr></thead><tbody><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="tag-attribute">readable</code></td><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="type">xs:boolean</code></td><td style="border-bottom: 1px solid ; "><code class="literal">true</code> if the object is readable.</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="tag-attribute">writable</code></td><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="type">xs:boolean</code></td><td style="border-bottom: 1px solid ; "><code class="literal">true</code> if the object file is writable.</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="tag-attribute">hidden</code></td><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="type">xs:boolean</code></td><td style="border-bottom: 1px solid ; "><code class="literal">true</code> if the object is hidden.</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="tag-attribute">last-modified</code></td><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="type">xs:dateTime</code></td><td style="border-bottom: 1px solid ; ">The last modification time of the object expressed in UTC.</td></tr><tr><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="tag-attribute">size</code></td><td style="border-right: 1px solid ; border-bottom: 1px solid ; "><code class="type">xs:integer</code></td><td style="border-bottom: 1px solid ; ">The size of the object in bytes.</td></tr><tr><td style="border-right: 1px solid ; "><code class="tag-attribute">content-type</code></td><td style="border-right: 1px solid ; "><code class="type">xs:string</code></td><td>The content type, if the object is a file.</td></tr></tbody></table></div></figure>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, one of the following errors is
    raised:</p>
  <div class="itemizedlist">
    
  <ul><li>
      <p><a id="err.inline.D0011.2"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option does not exist, cannot be accessed or is not a file, directory or other file
          system object.</p>
    </li></ul></div>


  <section id="c.file-info.16" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>

<section id="c.file-mkdir" class="section"><div class="section-titlepage"><h2><bdi class="secno">6. </bdi>p:file-mkdir<a aria-label="§" class="self-link" href="#c.file-mkdir"/></h2></div><div class="content">
  

  <p>The <code class="code">p:file-mkdir</code> step creates a directory.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-mkdir</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-mkdir</code> create the directory named in the <code class="option">href</code> option. If this includes
    more than one directory component, all of the intermediate components are created. If the directory already exists 
    the step just returns the <code class="tag-element">c:result</code> element as described below. The path separator is
    implementation-defined.</p>

  <p><span id="impl-8">Conformant processors <span class="rfc2119" id="c.file-mkdir.5.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> option of <code class="tag-element">p:file-mkdir</code>.
    It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-mkdir</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0140"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0140"><code class="errqname">err:XC0140</code></a>) if an
      implementation does not support <code class="tag-element">p:file-mkdir</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> is relative, it is made absolute against the 
    base URI of the element on which it is specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-mkdir</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0141"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0141"><code class="errqname">err:XC0141</code></a>) if <code class="tag-element">p:file-mkdir</code> not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p>
  

  <p>The step returns a <code class="tag-element">c:result</code> element containing the absolute URI of the directory.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, the following error is
    raised:</p>
  <div class="itemizedlist">
    
  <ul><li>
      <p><a id="err.inline.C0114"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0114"><code class="errqname">err:XC0114</code></a>) if the directory referenced by the
            <code class="option">href</code> option cannot be created.</p>
    </li></ul></div>

  <section id="c.file-mkdir.11" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>
<section id="c.file-move" class="section"><div class="section-titlepage"><h2><bdi class="secno">7. </bdi>p:file-move<a aria-label="§" class="self-link" href="#c.file-move"/></h2></div><div class="content">
  

  <p>The <code class="code">p:file-move</code> step moves a file or directory.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-move</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">target</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>      </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-move</code> step moves the file or directory named in <code class="option">href</code> to the new location
    specified in <code class="option">target</code>. If the <code class="option">target</code> option specifies an
      <em>existing</em> directory, the step attempts to move the file or directory <em>into</em>
    that directory, preserving its base name. <a id="err.inline.C0158"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0158"><code class="errqname">err:XC0158</code></a>) if the <code class="option">href</code>
      option names a directory, but the <code class="option">target</code> option names a file.</p>

  <p><span id="impl-9">Conformant processors <span class="rfc2119" id="c.file-move.5.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> and <code class="option">target</code> options
    of <code class="tag-element">p:file-move</code>.
    It is <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-move</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0148"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0148"><code class="errqname">err:XC0148</code></a>) if an
      implementation does not support <code class="tag-element">p:file-move</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> or <code class="option">target</code> are relative, they are made absolute against the 
    base URI of the element on which they are specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-move</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0149"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0149"><code class="errqname">err:XC0149</code></a>) if <code class="tag-element">p:file-move</code> is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p>
  

  <p>If the <code class="option">href</code> option specifies a device or other special kind of object, the results are
    implementation-defined.</p>

  <p>If the move is successful, the step returns a <code class="tag-element">c:result</code> element containing the absolute URI of the
    target.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, one of the following errors is
    raised:</p>
  <div class="itemizedlist">
    
    
    
  <ul><li>
      <p><a id="err.inline.D0011.3"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option does not exist, cannot be accessed or is not a file or
        directory.</p>
    </li><li>
      <p><a id="err.inline.C0115"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0115"><code class="errqname">err:XC0115</code></a>) if the resource referenced by the
        <code class="option">target</code> option is an existing file or other file system object.</p>
    </li><li>
      <p><a id="err.inline.C0050.1"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0050"><code class="errqname">err:XC0050</code></a>) if the directory cannot be 
        moved to the specified location.</p>
    </li></ul></div>

  <section id="c.file-move.12" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>

<section id="c.file-create-tempfile" class="section"><div class="section-titlepage"><h2><bdi class="secno">8. </bdi>p:file-create-tempfile<a aria-label="§" class="self-link" href="#c.file-create-tempfile"/></h2></div><div class="content">
  
 
  <p>The <code class="code">p:file-create-tempfile</code> step creates a temporary file.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-create-tempfile</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI?</code><code>"</code><code>/&gt;</code><code>                       </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">suffix</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">prefix</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:string?</code><code>"</code><code>/&gt;</code><code>                     </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">delete-on-exit</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">false()</code><code>"</code><code>/&gt;</code><code/></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

  <p>The <code class="tag-element">p:file-create-tempfile</code> creates a temporary file. The temporary file is guaranteed not to already exist
    when the step is called.</p>

  <p>If the <code class="option">href</code> option is specified it must be the URI of an existing directory. The temporary file
    is created here. If there is no <code class="option">href</code> option specified the location of the temporary file is
    implementation defined, usually the operating system's default location for temporary files.</p>

  <p><span id="impl-10">Conformant processors <span class="rfc2119" id="c.file-create-tempfile.6.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> option of <code class="tag-element">p:file-create-tempfile</code>. It is
    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-create-tempfile</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0138"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0138"><code class="errqname">err:XC0138</code></a>) if an
      implementation does not support <code class="tag-element">p:file-create-tempfile</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> is relative, it is made absolute against the 
    base URI of the element on which it is specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-create-tempfile</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.6"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0139"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0139"><code class="errqname">err:XC0139</code></a>) if <code class="tag-element">p:file-create-tempfile</code> cannot be completed due to access 
          restrictions in the environment in which the pipeline is run.</p>
  

  <p>If the <code class="option">prefix</code> option is specified, the filename will begin with that prefix. If the
      <code class="option">suffix</code> option is specified, the filename will end with that suffix.</p>

  <p>If the <code class="option">delete-on-exit</code> option is <code class="code">true</code>, an attempt will be made to automatically
    delete the temporary file when the processor terminates the pipeline. No error will be raised if this is
    unsuccessful.</p>

  <p>If the temporary file creation is successful, the step returns a <code class="tag-element">c:result</code> element containing the
    absolute URI of this file.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">false</code>, the step returns a
      <code class="tag-element">c:error</code> element which may contain additional, implementation-defined, information about the nature of
    the error.</p>

  <p>If an error occurs and <code class="option">fail-on-error</code> is <code class="code">true</code>, one of the following errors is
    raised:</p>
  <div class="itemizedlist">
    
    
  <ul><li>
      <p><a id="err.inline.D0011.4"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option does not exist, cannot be accessed or is not a directory.</p>
    </li><li>
      <p><a id="err.inline.C0116"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0116"><code class="errqname">err:XC0116</code></a>) if the temporary file could not be
          created.</p>
    </li></ul></div>

  <section id="c.file-create-tempfile.14" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>

</div></section>

<section id="c.file-touch" class="section"><div class="section-titlepage"><h2><bdi class="secno">9. </bdi>p:file-touch<a aria-label="§" class="self-link" href="#c.file-touch"/></h2></div><div class="content">


<p>The <code class="code">p:file-touch</code> step updates the modification
timestamp of a file.</p>

  <p class="element-syntax element-syntax-declare-step"><span class="decl"><code>&lt;p:declare-step</code> <code class="attr type-attr">type</code><code>="</code><code class="value type-value">p:file-touch</code><code>"</code><code>&gt;</code></span><br/>     <span class="input"><code>&lt;p:output</code> <code class="attr port-attr">port</code><code>="</code><code class="value port-value">result</code><code>"</code> <code class="attr primary-attr">primary</code><code>="</code><code class="value primary-value">true</code><code>"</code> <code class="attr content-types-attr">content-types</code><code>="</code><code class="value content-types-value">application/xml</code><code>"</code><code>/&gt;</code></span><br/>     <span class="opt-req"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">href</code><code>"</code> <code class="attr required-attr">required</code><code>="</code><code class="value required-value">true</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:anyURI</code><code>"</code><code>/&gt;</code><code>        </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">timestamp</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:dateTime?</code><code>"</code><code>/&gt;</code><code>                </code></span><br/>     <span class="opt-opt"><code>&lt;p:option</code> <code class="attr name-attr">name</code><code>="</code><code class="value name-value">fail-on-error</code><code>"</code> <code class="attr as-attr">as</code><code>="</code><code class="value as-value">xs:boolean</code><code>"</code> <code class="attr select-attr">select</code><code>="</code><code class="value select-value">true()</code><code>"</code><code>/&gt;</code><code/></span><br/><code>&lt;/p:declare-step&gt;</code></p>

<p>The <code class="tag-element">p:file-touch</code> step updates the modification
timestamp of the file specified in the <code class="option">href</code>
option. If the file specified by <code class="option">href</code> does not
exist, an empty file will be created at the given location.</p>

  <p><span id="impl-11">Conformant processors <span class="rfc2119" id="c.file-touch.5.1.1">must</span> support URIs whose
    scheme is <code class="code">file</code> for the <code class="option">href</code> option of <code class="tag-element">p:file-touch</code>. It is
    <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> what other schemes are
    supported by <code class="tag-element">p:file-touch</code>, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes.</span>
    <a id="err.inline.C0136"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0136"><code class="errqname">err:XC0136</code></a>) if an
      implementation does not support <code class="tag-element">p:file-touch</code> for a specified scheme.
  </p>
  
  <p>If <code class="option">href</code> is relative, it is made absolute against the 
    base URI of the element on which it is specified 
    (<code class="tag-element">p:with-option</code> or <code class="tag-element">p:file-touch</code> in the case of a 
    syntactic shortcut value). <a id="err.inline.D0064.7"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic 
      error</a></em> (<a href="#err.D0064"><code class="errqname">err:XD0064</code></a>) if the base URI is not both absolute and valid according to [<a href="#rfc3986"><span class="abbrev">RFC 3986</span></a>]. <a id="err.inline.C0137"/>It is a
          <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.C0137"><code class="errqname">err:XC0137</code></a>) if <code class="tag-element">p:file-touch</code> cannot be completed due to access 
          restrictions in the environment in which the pipeline is run.</p>

<p>If the <code class="option">timestamp</code> option is set, the file's
timestamp is set to this value. Otherwise the file's timestamp is set
to the current system's date and time.</p>

<p>If the operation is successful, the step returns a <code class="tag-element">c:result</code> element containing the absolute URI 
of the file.</p>

<p>If an error occurs and <code class="option">fail-on-error</code> is
<code class="code">false</code>, the step returns a <code class="tag-element">c:error</code> element
which may contain additional, implementation-defined, information
about the nature of the error.</p>

<p>If an error occurs and <code class="option">fail-on-error</code> is
<code class="code">true</code>, the following error is raised:</p>
  <div class="itemizedlist">
    
  <ul><li>
      <p><a id="err.inline.D0011.5"/>It is a <em class="glossterm"><a href="#dt-dynamic-error">dynamic error</a></em> (<a href="#err.D0011"><code class="errqname">err:XD0011</code></a>) if the resource referenced by the
            <code class="option">href</code> option does not exist and cannot be created
or exists and cannot be accessed.</p>
    </li></ul></div>

  <section id="c.file-touch.12" class="simplesect"><div class="section-titlepage"><h3>Document properties</h3></div><div class="content">
    
    <p>The resulting document has no properties 
  apart from <code class="property">content-type</code>. In particular, it has no <code class="property">base-uri</code>.</p>
  </div></section>
</div></section>

<section id="errors" class="section"><div class="section-titlepage"><h2><bdi class="secno">10. </bdi>Step Errors<a aria-label="§" class="self-link" href="#errors"/></h2></div><div class="content">


<p>These steps can raise
<em class="glossterm"><a href="#dt-dynamic-error">dynamic errors</a></em>.
</p>

<p><span id="dt-dynamic-error" class="termdef">[Definition: A <em class="glossterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.]</span> Examples of dynamic errors include references to
URIs that cannot be resolved, steps which fail, and pipelines that
exhaust the capacity of an implementation (such as memory or disk
space). For a more complete discussion of dynamic errors, see
<cite><a href="../xproc/#dynamic-errors">Dynamic Errors</a></cite> in <cite><a href="../xproc/">XProc 3.0: An XML Pipeline Language</a></cite>.
</p>

<p>If a step fails due to a dynamic error, failure propagates
upwards until either a <code class="tag-element">p:try</code> is encountered or the entire
pipeline fails. In other words, outside of a <code class="tag-element">p:try</code>, step
failure causes the entire pipeline to fail.</p>

<p>The following specific errors can be raised by these steps:</p>

<div id="step-error-summary"><dl class="errs"><dt id="err.C0012"><code class="errqname">err:XC0012</code></dt><dd><p>It is a
          dynamic error if the contents of the directory
          path are not available to the step due to access restrictions in the
          environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0012">p:directory-list</a></p></dd><dt id="err.C0017"><code class="errqname">err:XC0017</code></dt><dd><p>It is a
        dynamic error if the absolute path does not
        identify a directory.</p><p>See: <a href="#err.inline.C0017">p:directory-list</a></p></dd><dt id="err.C0050"><code class="errqname">err:XC0050</code></dt><dd><p>It is a dynamic error the file or directory cannot be copied 
        to the specified location.</p><p>See: <a href="#err.inline.C0050">p:file-copy</a>, <a href="#err.inline.C0050.1">p:file-move</a></p></dd><dt id="err.C0090"><code class="errqname">err:XC0090</code></dt><dd><p>It is a dynamic error if an
        implementation does not support directory listing for a specified scheme.</p><p>See: <a href="#err.inline.C0090">p:directory-list</a></p></dd><dt id="err.C0113"><code class="errqname">err:XC0113</code></dt><dd><p>It is a dynamic error if an attempt is made to delete a non-empty
      directory and the recursive option was set to false.</p><p>See: <a href="#err.inline.C0113">p:file-delete</a></p></dd><dt id="err.C0114"><code class="errqname">err:XC0114</code></dt><dd><p>It is a dynamic error if the directory referenced by the
            href option cannot be created.</p><p>See: <a href="#err.inline.C0114">p:file-mkdir</a></p></dd><dt id="err.C0115"><code class="errqname">err:XC0115</code></dt><dd><p>It is a dynamic error if the resource referenced by the
        target option is an existing file or other file system object.</p><p>See: <a href="#err.inline.C0115">p:file-move</a></p></dd><dt id="err.C0116"><code class="errqname">err:XC0116</code></dt><dd><p>It is a dynamic error if the temporary file could not be
          created.</p><p>See: <a href="#err.inline.C0116">p:file-create-tempfile</a></p></dd><dt id="err.C0134"><code class="errqname">err:XC0134</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-info for a specified scheme.</p><p>See: <a href="#err.inline.C0134">p:file-info</a></p></dd><dt id="err.C0135"><code class="errqname">err:XC0135</code></dt><dd><p>It is a
          dynamic error if p:file-info is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0135">p:file-info</a></p></dd><dt id="err.C0136"><code class="errqname">err:XC0136</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-touch for a specified scheme.</p><p>See: <a href="#err.inline.C0136">p:file-touch</a></p></dd><dt id="err.C0137"><code class="errqname">err:XC0137</code></dt><dd><p>It is a
          dynamic error if p:file-touch cannot be completed due to access 
          restrictions in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0137">p:file-touch</a></p></dd><dt id="err.C0138"><code class="errqname">err:XC0138</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-create-tempfile for a specified scheme.</p><p>See: <a href="#err.inline.C0138">p:file-create-tempfile</a></p></dd><dt id="err.C0139"><code class="errqname">err:XC0139</code></dt><dd><p>It is a
          dynamic error if p:file-create-tempfile cannot be completed due to access 
          restrictions in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0139">p:file-create-tempfile</a></p></dd><dt id="err.C0140"><code class="errqname">err:XC0140</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-mkdir for a specified scheme.</p><p>See: <a href="#err.inline.C0140">p:file-mkdir</a></p></dd><dt id="err.C0141"><code class="errqname">err:XC0141</code></dt><dd><p>It is a
          dynamic error if p:file-mkdir not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0141">p:file-mkdir</a></p></dd><dt id="err.C0142"><code class="errqname">err:XC0142</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-delete for a specified scheme.</p><p>See: <a href="#err.inline.C0142">p:file-delete</a></p></dd><dt id="err.C0143"><code class="errqname">err:XC0143</code></dt><dd><p>It is a
          dynamic error if p:file-delete is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0143">p:file-delete</a></p></dd><dt id="err.C0144"><code class="errqname">err:XC0144</code></dt><dd><p>It is a dynamic error if an
        implementation does not support p:file-copy for a specified scheme.</p><p>See: <a href="#err.inline.C0144">p:file-copy</a></p></dd><dt id="err.C0145"><code class="errqname">err:XC0145</code></dt><dd><p>It is a
            dynamic error if p:file-copy is not available to the step due to access restrictions 
            in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0145">p:file-copy</a></p></dd><dt id="err.C0147"><code class="errqname">err:XC0147</code></dt><dd><p>It is a dynamic
        error if a specified value is not a valid XPath regular
        expression.</p><p>See: <a href="#err.inline.C0147">p:directory-list</a></p></dd><dt id="err.C0148"><code class="errqname">err:XC0148</code></dt><dd><p>It is a dynamic error if an
      implementation does not support p:file-move for a specified scheme.</p><p>See: <a href="#err.inline.C0148">p:file-move</a></p></dd><dt id="err.C0149"><code class="errqname">err:XC0149</code></dt><dd><p>It is a
          dynamic error if p:file-move is not available to the step due to access restrictions 
          in the environment in which the pipeline is run.</p><p>See: <a href="#err.inline.C0149">p:file-move</a></p></dd><dt id="err.C0157"><code class="errqname">err:XC0157</code></dt><dd><p>It is a dynamic error if the href
    option names a directory, but the target option names a file.</p><p>See: <a href="#err.inline.C0157">p:file-copy</a></p></dd><dt id="err.C0158"><code class="errqname">err:XC0158</code></dt><dd><p>It is a dynamic error if the href
      option names a directory, but the target option names a file.</p><p>See: <a href="#err.inline.C0158">p:file-move</a></p></dd></dl></div>

</div></section>

<article id="conformance" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">A. </bdi>Conformance<a aria-label="§" class="self-link" href="#conformance"/></h2></header><div class="content">


<p>Conformant processors <span class="rfc2119" id="conformance.2.1">must</span> implement all of the features
described in this specification except those that are explicitly identified
as optional.</p>

<p>Some aspects of processor behavior are not completely specified; those
features are either <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> or
<em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em>.</p>

<p><span id="dt-implementation-dependent" class="termdef">[Definition: An
<em class="glossterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.]</span>
</p>

<p><span id="dt-implementation-defined" class="termdef">[Definition: An
<em class="glossterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="dt-implementation-defined.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.]</span>
</p>

<section id="implementation-defined" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.1. </bdi>Implementation-defined features<a aria-label="§" class="self-link" href="#implementation-defined"/></h2></div><div class="content">


<p>The following features are implementation-defined:</p>

<ol class="features"><li>Conformant processors must support directory paths whose
      scheme is file. It is
      implementation-defined what other schemes are
      supported by p:directory-list, and what the interpretation
      of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.directory-list" title="p:directory-list">Section 2, “p:directory-list”</a>.</li><li>Any file or directory determined to be
          special by the p:directory-list step may be output using a
          c:other element but the criteria for marking a file as
          special are implementation-defined. See <a href="#c.directory-list" title="p:directory-list">Section 2, “p:directory-list”</a>.</li><li>The precise meaning of these properties are
        implementation-defined and may vary according
        to the URI scheme of the path. See <a href="#dir-list-details" title="Directory list details">Section 2.1, “Directory list details”</a>.</li><li>Any other attributes on
        c:file, c:directory, or c:other
        are implementation-defined See <a href="#dir-list-details" title="Directory list details">Section 2.1, “Directory list details”</a>.</li><li>Conformant processors must support URIs whose
      scheme is file for the href and target options
      of p:file-copy.
      It is implementation-defined what other schemes are
      supported by p:file-copy, and what the interpretation
      of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-copy" title="p:file-copy">Section 3, “p:file-copy”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href option of p:file-delete.
    It is implementation-defined what other schemes are
    supported by p:file-delete, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-delete" title="p:file-delete">Section 4, “p:file-delete”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href option of p:file-info.
    It is implementation-defined what other schemes are
    supported by p:file-info, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-info" title="p:file-info">Section 5, “p:file-info”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href option of p:file-mkdir.
    It is implementation-defined what other schemes are
    supported by p:file-mkdir, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-mkdir" title="p:file-mkdir">Section 6, “p:file-mkdir”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href and target options
    of p:file-move.
    It is implementation-defined what other schemes are
    supported by p:file-move, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-move" title="p:file-move">Section 7, “p:file-move”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href option of p:file-create-tempfile. It is
    implementation-defined what other schemes are
    supported by p:file-create-tempfile, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-create-tempfile" title="p:file-create-tempfile">Section 8, “p:file-create-tempfile”</a>.</li><li>Conformant processors must support URIs whose
    scheme is file for the href option of p:file-touch. It is
    implementation-defined what other schemes are
    supported by p:file-touch, and what the interpretation
    of ‘directory’, ‘file’ and ‘contents’ is for those schemes. See <a href="#c.file-touch" title="p:file-touch">Section 9, “p:file-touch”</a>.</li></ol>
</div></section>

<section id="implementation-dependent" class="section"><div class="section-titlepage"><h2><bdi class="secno">A.2. </bdi>Implementation-dependent features<a aria-label="§" class="self-link" href="#implementation-dependent"/></h2></div><div class="content">


<p>The following features are implementation-dependent:</p>

<ol class="features"/>
</div></section>
</div></article>

<article id="references" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">B. </bdi>References<a aria-label="§" class="self-link" href="#references"/></h2></header><div class="content">

<div id="references.2" class="bibliolist">
<div id="xproc30" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0</span>] 
<a href="https://spec.xproc.org/3.0/xproc/"><span class="citetitle"><cite>XProc 3.0:
An XML Pipeline Language</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xproc30-steps" class="bibliomixed"><p>[<span class="abbrev">XProc 3.0 Steps</span>] 
<a href="https://spec.xproc.org/"><span class="citetitle"><cite>XProc 3.0 Steps:
An Introduction</cite></span></a>.
Norman Walsh, Achim Berndzen, Gerrit Imsieke and Erik Siegel, editors.
</p></div>
<div id="xpath31-functions" class="bibliomixed"><p>[<span class="abbrev">XPath and XQuery Functions and Operators 3.1</span>] 
<a href="https://www.w3.org/TR/xpath-functions-31/"><span class="citetitle"><cite>XPath and XQuery Functions and  Operators 3.1</cite></span></a>. Michael Kay, editor.
W3C Recommendation. 21 March 2017</p></div>
<div id="rfc3986" class="bibliomixed"><p>[<span class="abbrev">RFC 3986</span>] 
<a href="https://doi.org/10.17487/RFC3986"><span class="citetitle"><cite>RFC 3986:
Uniform Resource Identifier (URI): General Syntax</cite></span></a>.
T. Berners-Lee, R. Fielding, and L. Masinter, editors.
Internet Engineering Task Force. January, 2005.</p></div>
</div>
</div></article>


<article id="glossary" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">C. </bdi>Glossary<a aria-label="§" class="self-link" href="#glossary"/></h2></header><div class="content"><div class="glosslist"><dl><dt id="glossary.2.1" class="glossentry"><em class="glossterm"><a href="#dt-dynamic-error">dynamic
error</a></em></dt><dd class="glossdef"><p>A <em class="firstterm">dynamic
error</em> is one which occurs while a pipeline is being
evaluated.</p></dd><dt id="glossary.2.2" class="glossentry"><em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-defined</em> feature is one where the
implementation has discretion in how it is performed.
Conformant implementations <span class="rfc2119" id="glossary.2.2.2.1.2">must</span> document
how <em class="glossterm"><a href="#dt-implementation-defined">implementation-defined</a></em> features are performed.</p></dd><dt id="glossary.2.3" class="glossentry"><em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em></dt><dd class="glossdef"><p>An
<em class="firstterm">implementation-dependent</em> feature is one where the
implementation has discretion in how it is performed.
Implementations are not required to document or explain
how <em class="glossterm"><a href="#dt-implementation-dependent">implementation-dependent</a></em> features are performed.</p></dd></dl></div></div></article>

<article id="ancillary-files" class="appendix"><header class="appendix-titlepage"><h2><bdi class="secno">D. </bdi>Ancillary files<a aria-label="§" class="self-link" href="#ancillary-files"/></h2></header><div class="content">


<p>This specification includes by reference a number of
ancillary files.</p>

<div class="variablelist">

<dl><dt><span class="term"><a href="steps.xpl">steps.xpl</a></span></dt><dd>
<p>An XProc step library for the declared steps.
</p>
</dd></dl></div>

</div></article>

</article><script src="js/prism.js"/><script src="js/fixup.js"/></body></html></c:directory>